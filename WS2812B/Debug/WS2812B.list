
WS2812B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bf4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002cb4  08002cb4  00012cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ce4  08002ce4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ce4  08002ce4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ce4  08002ce4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ce4  08002ce4  00012ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ce8  08002ce8  00012ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002cec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026d8  2000000c  08002cf8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200026e4  08002cf8  000226e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000820d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000158a  00000000  00000000  00028241  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000960  00000000  00000000  000297d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008a8  00000000  00000000  0002a130  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000184c3  00000000  00000000  0002a9d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007edf  00000000  00000000  00042e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f71a  00000000  00000000  0004ad7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000da494  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002148  00000000  00000000  000da510  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002c9c 	.word	0x08002c9c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002c9c 	.word	0x08002c9c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fbc5 	bl	80009b4 <HAL_Init>

  /* USER CODE BEGIN Init */
  reset_buf();
 800022a:	f000 fa65 	bl	80006f8 <reset_buf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022e:	f000 f853 	bl	80002d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000232:	f000 f91b 	bl	800046c <MX_GPIO_Init>
  MX_DMA_Init();
 8000236:	f000 f8fb 	bl	8000430 <MX_DMA_Init>
  MX_TIM3_Init();
 800023a:	f000 f899 	bl	8000370 <MX_TIM3_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//				   R  G  B
	  reset_buf();
 800023e:	f000 fa5b 	bl	80006f8 <reset_buf>
	  for (int i = 0; i<quantity_led; i+=3)
 8000242:	2300      	movs	r3, #0
 8000244:	607b      	str	r3, [r7, #4]
 8000246:	e031      	b.n	80002ac <main+0x8c>
	  {
		  set_pixel(i+0, 255, 0, 0);
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	2300      	movs	r3, #0
 800024c:	2200      	movs	r2, #0
 800024e:	21ff      	movs	r1, #255	; 0xff
 8000250:	f000 f972 	bl	8000538 <set_pixel>
		  HAL_TIM_PWM_Start_DMA (&htim3, TIM_CHANNEL_1, (uint32_t*)&buf, (RESET_DELAY+(quantity_led*24))*2+4);
 8000254:	4b1d      	ldr	r3, [pc, #116]	; (80002cc <main+0xac>)
 8000256:	4a1e      	ldr	r2, [pc, #120]	; (80002d0 <main+0xb0>)
 8000258:	481e      	ldr	r0, [pc, #120]	; (80002d4 <main+0xb4>)
 800025a:	2100      	movs	r1, #0
 800025c:	f001 fdf2 	bl	8001e44 <HAL_TIM_PWM_Start_DMA>
		  HAL_Delay(200);
 8000260:	20c8      	movs	r0, #200	; 0xc8
 8000262:	f000 fc0b 	bl	8000a7c <HAL_Delay>

		  set_pixel(i+1, 0, 255, 0);
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	1c58      	adds	r0, r3, #1
 800026a:	2300      	movs	r3, #0
 800026c:	22ff      	movs	r2, #255	; 0xff
 800026e:	2100      	movs	r1, #0
 8000270:	f000 f962 	bl	8000538 <set_pixel>
		  HAL_TIM_PWM_Start_DMA (&htim3, TIM_CHANNEL_1, (uint32_t*)&buf, (RESET_DELAY+(quantity_led*24))*2+4);
 8000274:	4b15      	ldr	r3, [pc, #84]	; (80002cc <main+0xac>)
 8000276:	4a16      	ldr	r2, [pc, #88]	; (80002d0 <main+0xb0>)
 8000278:	4816      	ldr	r0, [pc, #88]	; (80002d4 <main+0xb4>)
 800027a:	2100      	movs	r1, #0
 800027c:	f001 fde2 	bl	8001e44 <HAL_TIM_PWM_Start_DMA>
		  HAL_Delay(200);
 8000280:	20c8      	movs	r0, #200	; 0xc8
 8000282:	f000 fbfb 	bl	8000a7c <HAL_Delay>

		  set_pixel(i+2, 0, 0, 255);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	1c98      	adds	r0, r3, #2
 800028a:	23ff      	movs	r3, #255	; 0xff
 800028c:	2200      	movs	r2, #0
 800028e:	2100      	movs	r1, #0
 8000290:	f000 f952 	bl	8000538 <set_pixel>
		  HAL_TIM_PWM_Start_DMA (&htim3, TIM_CHANNEL_1, (uint32_t*)&buf, (RESET_DELAY+(quantity_led*24))*2+4);
 8000294:	4b0d      	ldr	r3, [pc, #52]	; (80002cc <main+0xac>)
 8000296:	4a0e      	ldr	r2, [pc, #56]	; (80002d0 <main+0xb0>)
 8000298:	480e      	ldr	r0, [pc, #56]	; (80002d4 <main+0xb4>)
 800029a:	2100      	movs	r1, #0
 800029c:	f001 fdd2 	bl	8001e44 <HAL_TIM_PWM_Start_DMA>
		  //HAL_TIM_PWM_Start_DMA (&htim3, TIM_CHANNEL_1, (uint8_t*)&buf, (RESET_DELAY+(quantity_led*24))+2);
		  HAL_Delay(200);
 80002a0:	20c8      	movs	r0, #200	; 0xc8
 80002a2:	f000 fbeb 	bl	8000a7c <HAL_Delay>
	  for (int i = 0; i<quantity_led; i+=3)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	3303      	adds	r3, #3
 80002aa:	607b      	str	r3, [r7, #4]
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2b63      	cmp	r3, #99	; 0x63
 80002b0:	ddca      	ble.n	8000248 <main+0x28>


	  }
	  reset_buf();
 80002b2:	f000 fa21 	bl	80006f8 <reset_buf>
	  	  HAL_TIM_PWM_Start_DMA (&htim3, TIM_CHANNEL_1, (uint32_t*)&buf, (RESET_DELAY+(quantity_led*24))*2+4);
 80002b6:	4b05      	ldr	r3, [pc, #20]	; (80002cc <main+0xac>)
 80002b8:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <main+0xb0>)
 80002ba:	4806      	ldr	r0, [pc, #24]	; (80002d4 <main+0xb4>)
 80002bc:	2100      	movs	r1, #0
 80002be:	f001 fdc1 	bl	8001e44 <HAL_TIM_PWM_Start_DMA>
	  	  HAL_Delay(200);
 80002c2:	20c8      	movs	r0, #200	; 0xc8
 80002c4:	f000 fbda 	bl	8000a7c <HAL_Delay>
	  reset_buf();
 80002c8:	e7b9      	b.n	800023e <main+0x1e>
 80002ca:	46c0      	nop			; (mov r8, r8)
 80002cc:	00001314 	.word	0x00001314
 80002d0:	20000028 	.word	0x20000028
 80002d4:	20002654 	.word	0x20002654

080002d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d8:	b590      	push	{r4, r7, lr}
 80002da:	b093      	sub	sp, #76	; 0x4c
 80002dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002de:	2414      	movs	r4, #20
 80002e0:	193b      	adds	r3, r7, r4
 80002e2:	0018      	movs	r0, r3
 80002e4:	2334      	movs	r3, #52	; 0x34
 80002e6:	001a      	movs	r2, r3
 80002e8:	2100      	movs	r1, #0
 80002ea:	f002 fccf 	bl	8002c8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	0018      	movs	r0, r3
 80002f2:	2310      	movs	r3, #16
 80002f4:	001a      	movs	r2, r3
 80002f6:	2100      	movs	r1, #0
 80002f8:	f002 fcc8 	bl	8002c8c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002fc:	0021      	movs	r1, r4
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2202      	movs	r2, #2
 8000302:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000304:	187b      	adds	r3, r7, r1
 8000306:	2201      	movs	r2, #1
 8000308:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2210      	movs	r2, #16
 800030e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000310:	187b      	adds	r3, r7, r1
 8000312:	2202      	movs	r2, #2
 8000314:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000316:	187b      	adds	r3, r7, r1
 8000318:	2280      	movs	r2, #128	; 0x80
 800031a:	0212      	lsls	r2, r2, #8
 800031c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800031e:	187b      	adds	r3, r7, r1
 8000320:	2280      	movs	r2, #128	; 0x80
 8000322:	0352      	lsls	r2, r2, #13
 8000324:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000326:	187b      	adds	r3, r7, r1
 8000328:	2200      	movs	r2, #0
 800032a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032c:	187b      	adds	r3, r7, r1
 800032e:	0018      	movs	r0, r3
 8000330:	f001 f858 	bl	80013e4 <HAL_RCC_OscConfig>
 8000334:	1e03      	subs	r3, r0, #0
 8000336:	d001      	beq.n	800033c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000338:	f000 fa18 	bl	800076c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	2207      	movs	r2, #7
 8000340:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2202      	movs	r2, #2
 8000346:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	2200      	movs	r2, #0
 800034c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	2200      	movs	r2, #0
 8000352:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	2101      	movs	r1, #1
 8000358:	0018      	movs	r0, r3
 800035a:	f001 fbc9 	bl	8001af0 <HAL_RCC_ClockConfig>
 800035e:	1e03      	subs	r3, r0, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000362:	f000 fa03 	bl	800076c <Error_Handler>
  }
}
 8000366:	46c0      	nop			; (mov r8, r8)
 8000368:	46bd      	mov	sp, r7
 800036a:	b013      	add	sp, #76	; 0x4c
 800036c:	bd90      	pop	{r4, r7, pc}
	...

08000370 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b08a      	sub	sp, #40	; 0x28
 8000374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000376:	2320      	movs	r3, #32
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	0018      	movs	r0, r3
 800037c:	2308      	movs	r3, #8
 800037e:	001a      	movs	r2, r3
 8000380:	2100      	movs	r1, #0
 8000382:	f002 fc83 	bl	8002c8c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	0018      	movs	r0, r3
 800038a:	231c      	movs	r3, #28
 800038c:	001a      	movs	r2, r3
 800038e:	2100      	movs	r1, #0
 8000390:	f002 fc7c 	bl	8002c8c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000394:	4b24      	ldr	r3, [pc, #144]	; (8000428 <MX_TIM3_Init+0xb8>)
 8000396:	4a25      	ldr	r2, [pc, #148]	; (800042c <MX_TIM3_Init+0xbc>)
 8000398:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800039a:	4b23      	ldr	r3, [pc, #140]	; (8000428 <MX_TIM3_Init+0xb8>)
 800039c:	2200      	movs	r2, #0
 800039e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003a0:	4b21      	ldr	r3, [pc, #132]	; (8000428 <MX_TIM3_Init+0xb8>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59;
 80003a6:	4b20      	ldr	r3, [pc, #128]	; (8000428 <MX_TIM3_Init+0xb8>)
 80003a8:	223b      	movs	r2, #59	; 0x3b
 80003aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ac:	4b1e      	ldr	r3, [pc, #120]	; (8000428 <MX_TIM3_Init+0xb8>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003b2:	4b1d      	ldr	r3, [pc, #116]	; (8000428 <MX_TIM3_Init+0xb8>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80003b8:	4b1b      	ldr	r3, [pc, #108]	; (8000428 <MX_TIM3_Init+0xb8>)
 80003ba:	0018      	movs	r0, r3
 80003bc:	f001 fcf2 	bl	8001da4 <HAL_TIM_PWM_Init>
 80003c0:	1e03      	subs	r3, r0, #0
 80003c2:	d001      	beq.n	80003c8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80003c4:	f000 f9d2 	bl	800076c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003c8:	2120      	movs	r1, #32
 80003ca:	187b      	adds	r3, r7, r1
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003d0:	187b      	adds	r3, r7, r1
 80003d2:	2200      	movs	r2, #0
 80003d4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003d6:	187a      	adds	r2, r7, r1
 80003d8:	4b13      	ldr	r3, [pc, #76]	; (8000428 <MX_TIM3_Init+0xb8>)
 80003da:	0011      	movs	r1, r2
 80003dc:	0018      	movs	r0, r3
 80003de:	f002 fbd3 	bl	8002b88 <HAL_TIMEx_MasterConfigSynchronization>
 80003e2:	1e03      	subs	r3, r0, #0
 80003e4:	d001      	beq.n	80003ea <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80003e6:	f000 f9c1 	bl	800076c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	2260      	movs	r2, #96	; 0x60
 80003ee:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80003f0:	1d3b      	adds	r3, r7, #4
 80003f2:	2200      	movs	r2, #0
 80003f4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	2200      	movs	r2, #0
 80003fa:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	2200      	movs	r2, #0
 8000400:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000402:	1d39      	adds	r1, r7, #4
 8000404:	4b08      	ldr	r3, [pc, #32]	; (8000428 <MX_TIM3_Init+0xb8>)
 8000406:	2200      	movs	r2, #0
 8000408:	0018      	movs	r0, r3
 800040a:	f001 ff81 	bl	8002310 <HAL_TIM_PWM_ConfigChannel>
 800040e:	1e03      	subs	r3, r0, #0
 8000410:	d001      	beq.n	8000416 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8000412:	f000 f9ab 	bl	800076c <Error_Handler>
  /* USER CODE BEGIN TIM3_Init 2 */
  /* Peripheral DMA init*/


  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000416:	4b04      	ldr	r3, [pc, #16]	; (8000428 <MX_TIM3_Init+0xb8>)
 8000418:	0018      	movs	r0, r3
 800041a:	f000 fa1f 	bl	800085c <HAL_TIM_MspPostInit>

}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	b00a      	add	sp, #40	; 0x28
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	20002654 	.word	0x20002654
 800042c:	40000400 	.word	0x40000400

08000430 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000436:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <MX_DMA_Init+0x38>)
 8000438:	695a      	ldr	r2, [r3, #20]
 800043a:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <MX_DMA_Init+0x38>)
 800043c:	2101      	movs	r1, #1
 800043e:	430a      	orrs	r2, r1
 8000440:	615a      	str	r2, [r3, #20]
 8000442:	4b09      	ldr	r3, [pc, #36]	; (8000468 <MX_DMA_Init+0x38>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	2201      	movs	r2, #1
 8000448:	4013      	ands	r3, r2
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 800044e:	2200      	movs	r2, #0
 8000450:	2100      	movs	r1, #0
 8000452:	200b      	movs	r0, #11
 8000454:	f000 fbe0 	bl	8000c18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8000458:	200b      	movs	r0, #11
 800045a:	f000 fbf2 	bl	8000c42 <HAL_NVIC_EnableIRQ>

}
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	46bd      	mov	sp, r7
 8000462:	b002      	add	sp, #8
 8000464:	bd80      	pop	{r7, pc}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	40021000 	.word	0x40021000

0800046c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800046c:	b590      	push	{r4, r7, lr}
 800046e:	b089      	sub	sp, #36	; 0x24
 8000470:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000472:	240c      	movs	r4, #12
 8000474:	193b      	adds	r3, r7, r4
 8000476:	0018      	movs	r0, r3
 8000478:	2314      	movs	r3, #20
 800047a:	001a      	movs	r2, r3
 800047c:	2100      	movs	r1, #0
 800047e:	f002 fc05 	bl	8002c8c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000482:	4b2a      	ldr	r3, [pc, #168]	; (800052c <MX_GPIO_Init+0xc0>)
 8000484:	695a      	ldr	r2, [r3, #20]
 8000486:	4b29      	ldr	r3, [pc, #164]	; (800052c <MX_GPIO_Init+0xc0>)
 8000488:	2180      	movs	r1, #128	; 0x80
 800048a:	0289      	lsls	r1, r1, #10
 800048c:	430a      	orrs	r2, r1
 800048e:	615a      	str	r2, [r3, #20]
 8000490:	4b26      	ldr	r3, [pc, #152]	; (800052c <MX_GPIO_Init+0xc0>)
 8000492:	695a      	ldr	r2, [r3, #20]
 8000494:	2380      	movs	r3, #128	; 0x80
 8000496:	029b      	lsls	r3, r3, #10
 8000498:	4013      	ands	r3, r2
 800049a:	60bb      	str	r3, [r7, #8]
 800049c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800049e:	4b23      	ldr	r3, [pc, #140]	; (800052c <MX_GPIO_Init+0xc0>)
 80004a0:	695a      	ldr	r2, [r3, #20]
 80004a2:	4b22      	ldr	r3, [pc, #136]	; (800052c <MX_GPIO_Init+0xc0>)
 80004a4:	2180      	movs	r1, #128	; 0x80
 80004a6:	02c9      	lsls	r1, r1, #11
 80004a8:	430a      	orrs	r2, r1
 80004aa:	615a      	str	r2, [r3, #20]
 80004ac:	4b1f      	ldr	r3, [pc, #124]	; (800052c <MX_GPIO_Init+0xc0>)
 80004ae:	695a      	ldr	r2, [r3, #20]
 80004b0:	2380      	movs	r3, #128	; 0x80
 80004b2:	02db      	lsls	r3, r3, #11
 80004b4:	4013      	ands	r3, r2
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80004ba:	2380      	movs	r3, #128	; 0x80
 80004bc:	01db      	lsls	r3, r3, #7
 80004be:	481c      	ldr	r0, [pc, #112]	; (8000530 <MX_GPIO_Init+0xc4>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	0019      	movs	r1, r3
 80004c4:	f000 ff30 	bl	8001328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80004c8:	193b      	adds	r3, r7, r4
 80004ca:	2280      	movs	r2, #128	; 0x80
 80004cc:	01d2      	lsls	r2, r2, #7
 80004ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	2201      	movs	r2, #1
 80004d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d6:	193b      	adds	r3, r7, r4
 80004d8:	2200      	movs	r2, #0
 80004da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004dc:	193b      	adds	r3, r7, r4
 80004de:	2200      	movs	r2, #0
 80004e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e2:	193b      	adds	r3, r7, r4
 80004e4:	4a12      	ldr	r2, [pc, #72]	; (8000530 <MX_GPIO_Init+0xc4>)
 80004e6:	0019      	movs	r1, r3
 80004e8:	0010      	movs	r0, r2
 80004ea:	f000 fda5 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80004ee:	0021      	movs	r1, r4
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	2280      	movs	r2, #128	; 0x80
 80004f4:	0112      	lsls	r2, r2, #4
 80004f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	4a0e      	ldr	r2, [pc, #56]	; (8000534 <MX_GPIO_Init+0xc8>)
 80004fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	2201      	movs	r2, #1
 8000502:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000504:	187a      	adds	r2, r7, r1
 8000506:	2390      	movs	r3, #144	; 0x90
 8000508:	05db      	lsls	r3, r3, #23
 800050a:	0011      	movs	r1, r2
 800050c:	0018      	movs	r0, r3
 800050e:	f000 fd93 	bl	8001038 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000512:	2200      	movs	r2, #0
 8000514:	2100      	movs	r1, #0
 8000516:	2007      	movs	r0, #7
 8000518:	f000 fb7e 	bl	8000c18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800051c:	2007      	movs	r0, #7
 800051e:	f000 fb90 	bl	8000c42 <HAL_NVIC_EnableIRQ>

}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	46bd      	mov	sp, r7
 8000526:	b009      	add	sp, #36	; 0x24
 8000528:	bd90      	pop	{r4, r7, pc}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	40021000 	.word	0x40021000
 8000530:	48000400 	.word	0x48000400
 8000534:	10210000 	.word	0x10210000

08000538 <set_pixel>:

/* USER CODE BEGIN 4 */
void set_pixel(uint16_t pixel, uint16_t R, uint16_t G, uint16_t B)
{
 8000538:	b5b0      	push	{r4, r5, r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af00      	add	r7, sp, #0
 800053e:	0005      	movs	r5, r0
 8000540:	000c      	movs	r4, r1
 8000542:	0010      	movs	r0, r2
 8000544:	0019      	movs	r1, r3
 8000546:	1dbb      	adds	r3, r7, #6
 8000548:	1c2a      	adds	r2, r5, #0
 800054a:	801a      	strh	r2, [r3, #0]
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	1c22      	adds	r2, r4, #0
 8000550:	801a      	strh	r2, [r3, #0]
 8000552:	1cbb      	adds	r3, r7, #2
 8000554:	1c02      	adds	r2, r0, #0
 8000556:	801a      	strh	r2, [r3, #0]
 8000558:	003b      	movs	r3, r7
 800055a:	1c0a      	adds	r2, r1, #0
 800055c:	801a      	strh	r2, [r3, #0]
	if (pixel > quantity_led-1) pixel = quantity_led-1; else if (pixel<0) pixel = 0;
 800055e:	1dbb      	adds	r3, r7, #6
 8000560:	881b      	ldrh	r3, [r3, #0]
 8000562:	2b63      	cmp	r3, #99	; 0x63
 8000564:	d902      	bls.n	800056c <set_pixel+0x34>
 8000566:	1dbb      	adds	r3, r7, #6
 8000568:	2263      	movs	r2, #99	; 0x63
 800056a:	801a      	strh	r2, [r3, #0]
	if (R>255) R=255;
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	881b      	ldrh	r3, [r3, #0]
 8000570:	2bff      	cmp	r3, #255	; 0xff
 8000572:	d903      	bls.n	800057c <set_pixel+0x44>
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	22ff      	movs	r2, #255	; 0xff
 8000578:	801a      	strh	r2, [r3, #0]
 800057a:	e00e      	b.n	800059a <set_pixel+0x62>
	else if (R<0) R=0;
		else if (G>255) G=255;
 800057c:	1cbb      	adds	r3, r7, #2
 800057e:	881b      	ldrh	r3, [r3, #0]
 8000580:	2bff      	cmp	r3, #255	; 0xff
 8000582:	d903      	bls.n	800058c <set_pixel+0x54>
 8000584:	1cbb      	adds	r3, r7, #2
 8000586:	22ff      	movs	r2, #255	; 0xff
 8000588:	801a      	strh	r2, [r3, #0]
 800058a:	e006      	b.n	800059a <set_pixel+0x62>
		else if (G<0) G=0;
			else if (B>255) B=255;
 800058c:	003b      	movs	r3, r7
 800058e:	881b      	ldrh	r3, [r3, #0]
 8000590:	2bff      	cmp	r3, #255	; 0xff
 8000592:	d902      	bls.n	800059a <set_pixel+0x62>
 8000594:	003b      	movs	r3, r7
 8000596:	22ff      	movs	r2, #255	; 0xff
 8000598:	801a      	strh	r2, [r3, #0]
			else if (B<0) B=0;

	//GGGGGGGG RRRRRRRR BBBBBBBB //  8+8+8
	//RED -----------------------------------------------------
		for(int i=0; i<8; i++)
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	e02a      	b.n	80005f6 <set_pixel+0xbe>
		{
			if (bit_set(R,(7-i)) == 1)
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	8818      	ldrh	r0, [r3, #0]
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	2207      	movs	r2, #7
 80005a8:	1ad3      	subs	r3, r2, r3
 80005aa:	0019      	movs	r1, r3
 80005ac:	f000 f88e 	bl	80006cc <bit_set>
 80005b0:	0003      	movs	r3, r0
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d10e      	bne.n	80005d4 <set_pixel+0x9c>
			{
				buf[RESET_DELAY + pixel*24 + 8 + i] = log_1;
 80005b6:	1dbb      	adds	r3, r7, #6
 80005b8:	881a      	ldrh	r2, [r3, #0]
 80005ba:	0013      	movs	r3, r2
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	189b      	adds	r3, r3, r2
 80005c0:	00db      	lsls	r3, r3, #3
 80005c2:	3330      	adds	r3, #48	; 0x30
 80005c4:	001a      	movs	r2, r3
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	18d2      	adds	r2, r2, r3
 80005ca:	4b3f      	ldr	r3, [pc, #252]	; (80006c8 <set_pixel+0x190>)
 80005cc:	0092      	lsls	r2, r2, #2
 80005ce:	2129      	movs	r1, #41	; 0x29
 80005d0:	50d1      	str	r1, [r2, r3]
 80005d2:	e00d      	b.n	80005f0 <set_pixel+0xb8>
			}
			else
			{
				buf[RESET_DELAY + pixel*24 + 8 + i] = log_0;
 80005d4:	1dbb      	adds	r3, r7, #6
 80005d6:	881a      	ldrh	r2, [r3, #0]
 80005d8:	0013      	movs	r3, r2
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	189b      	adds	r3, r3, r2
 80005de:	00db      	lsls	r3, r3, #3
 80005e0:	3330      	adds	r3, #48	; 0x30
 80005e2:	001a      	movs	r2, r3
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	18d2      	adds	r2, r2, r3
 80005e8:	4b37      	ldr	r3, [pc, #220]	; (80006c8 <set_pixel+0x190>)
 80005ea:	0092      	lsls	r2, r2, #2
 80005ec:	2111      	movs	r1, #17
 80005ee:	50d1      	str	r1, [r2, r3]
		for(int i=0; i<8; i++)
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	3301      	adds	r3, #1
 80005f4:	617b      	str	r3, [r7, #20]
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	2b07      	cmp	r3, #7
 80005fa:	ddd1      	ble.n	80005a0 <set_pixel+0x68>
			}

		}
	//GREEN -----------------------------------------------------
		for(int i=0; i<8; i++)
 80005fc:	2300      	movs	r3, #0
 80005fe:	613b      	str	r3, [r7, #16]
 8000600:	e02a      	b.n	8000658 <set_pixel+0x120>
		{
			if (bit_set(G,(7-i)) == 1)
 8000602:	1cbb      	adds	r3, r7, #2
 8000604:	8818      	ldrh	r0, [r3, #0]
 8000606:	693b      	ldr	r3, [r7, #16]
 8000608:	2207      	movs	r2, #7
 800060a:	1ad3      	subs	r3, r2, r3
 800060c:	0019      	movs	r1, r3
 800060e:	f000 f85d 	bl	80006cc <bit_set>
 8000612:	0003      	movs	r3, r0
 8000614:	2b01      	cmp	r3, #1
 8000616:	d10e      	bne.n	8000636 <set_pixel+0xfe>
			{
				buf[RESET_DELAY + pixel*24 + 0 + i] = log_1;
 8000618:	1dbb      	adds	r3, r7, #6
 800061a:	881a      	ldrh	r2, [r3, #0]
 800061c:	0013      	movs	r3, r2
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	189b      	adds	r3, r3, r2
 8000622:	00db      	lsls	r3, r3, #3
 8000624:	3328      	adds	r3, #40	; 0x28
 8000626:	001a      	movs	r2, r3
 8000628:	693b      	ldr	r3, [r7, #16]
 800062a:	18d2      	adds	r2, r2, r3
 800062c:	4b26      	ldr	r3, [pc, #152]	; (80006c8 <set_pixel+0x190>)
 800062e:	0092      	lsls	r2, r2, #2
 8000630:	2129      	movs	r1, #41	; 0x29
 8000632:	50d1      	str	r1, [r2, r3]
 8000634:	e00d      	b.n	8000652 <set_pixel+0x11a>
			}
			else
			{
				buf[RESET_DELAY + pixel*24 + 0 + i] = log_0;
 8000636:	1dbb      	adds	r3, r7, #6
 8000638:	881a      	ldrh	r2, [r3, #0]
 800063a:	0013      	movs	r3, r2
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	189b      	adds	r3, r3, r2
 8000640:	00db      	lsls	r3, r3, #3
 8000642:	3328      	adds	r3, #40	; 0x28
 8000644:	001a      	movs	r2, r3
 8000646:	693b      	ldr	r3, [r7, #16]
 8000648:	18d2      	adds	r2, r2, r3
 800064a:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <set_pixel+0x190>)
 800064c:	0092      	lsls	r2, r2, #2
 800064e:	2111      	movs	r1, #17
 8000650:	50d1      	str	r1, [r2, r3]
		for(int i=0; i<8; i++)
 8000652:	693b      	ldr	r3, [r7, #16]
 8000654:	3301      	adds	r3, #1
 8000656:	613b      	str	r3, [r7, #16]
 8000658:	693b      	ldr	r3, [r7, #16]
 800065a:	2b07      	cmp	r3, #7
 800065c:	ddd1      	ble.n	8000602 <set_pixel+0xca>
			}

		}
	//BLUE -----------------------------------------------------
		for(int i=0; i<8; i++)
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	e02a      	b.n	80006ba <set_pixel+0x182>
		{
			if (bit_set(B,(7-i)) == 1)
 8000664:	003b      	movs	r3, r7
 8000666:	8818      	ldrh	r0, [r3, #0]
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	2207      	movs	r2, #7
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	0019      	movs	r1, r3
 8000670:	f000 f82c 	bl	80006cc <bit_set>
 8000674:	0003      	movs	r3, r0
 8000676:	2b01      	cmp	r3, #1
 8000678:	d10e      	bne.n	8000698 <set_pixel+0x160>
			{
				buf[RESET_DELAY + pixel*24 + 16 + i] = log_1;
 800067a:	1dbb      	adds	r3, r7, #6
 800067c:	881a      	ldrh	r2, [r3, #0]
 800067e:	0013      	movs	r3, r2
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	189b      	adds	r3, r3, r2
 8000684:	00db      	lsls	r3, r3, #3
 8000686:	3338      	adds	r3, #56	; 0x38
 8000688:	001a      	movs	r2, r3
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	18d2      	adds	r2, r2, r3
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <set_pixel+0x190>)
 8000690:	0092      	lsls	r2, r2, #2
 8000692:	2129      	movs	r1, #41	; 0x29
 8000694:	50d1      	str	r1, [r2, r3]
 8000696:	e00d      	b.n	80006b4 <set_pixel+0x17c>
			}
			else
			{
				buf[RESET_DELAY + pixel*24 + 16 + i] = log_0;
 8000698:	1dbb      	adds	r3, r7, #6
 800069a:	881a      	ldrh	r2, [r3, #0]
 800069c:	0013      	movs	r3, r2
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	189b      	adds	r3, r3, r2
 80006a2:	00db      	lsls	r3, r3, #3
 80006a4:	3338      	adds	r3, #56	; 0x38
 80006a6:	001a      	movs	r2, r3
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	18d2      	adds	r2, r2, r3
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <set_pixel+0x190>)
 80006ae:	0092      	lsls	r2, r2, #2
 80006b0:	2111      	movs	r1, #17
 80006b2:	50d1      	str	r1, [r2, r3]
		for(int i=0; i<8; i++)
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	3301      	adds	r3, #1
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	2b07      	cmp	r3, #7
 80006be:	ddd1      	ble.n	8000664 <set_pixel+0x12c>
			}

		}

}
 80006c0:	46c0      	nop			; (mov r8, r8)
 80006c2:	46bd      	mov	sp, r7
 80006c4:	b006      	add	sp, #24
 80006c6:	bdb0      	pop	{r4, r5, r7, pc}
 80006c8:	20000028 	.word	0x20000028

080006cc <bit_set>:

int bit_set(int pixel_value, int pos)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
	int value = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
    if (((pixel_value >> pos)&0x01) == 1 ) value = 1;
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	411a      	asrs	r2, r3
 80006e0:	0013      	movs	r3, r2
 80006e2:	2201      	movs	r2, #1
 80006e4:	4013      	ands	r3, r2
 80006e6:	d001      	beq.n	80006ec <bit_set+0x20>
 80006e8:	2301      	movs	r3, #1
 80006ea:	60fb      	str	r3, [r7, #12]
	return value;
 80006ec:	68fb      	ldr	r3, [r7, #12]
}
 80006ee:	0018      	movs	r0, r3
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b004      	add	sp, #16
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <reset_buf>:

void reset_buf(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
	for (int i = 0; i<RESET_DELAY; i++)
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	e007      	b.n	8000714 <reset_buf+0x1c>
	    {
	  	  buf[i] = 0;
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <reset_buf+0x60>)
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	0092      	lsls	r2, r2, #2
 800070a:	2100      	movs	r1, #0
 800070c:	50d1      	str	r1, [r2, r3]
	for (int i = 0; i<RESET_DELAY; i++)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	3301      	adds	r3, #1
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2b27      	cmp	r3, #39	; 0x27
 8000718:	ddf4      	ble.n	8000704 <reset_buf+0xc>
	    }
	for (int i = RESET_DELAY; i<quantity_led*24+RESET_DELAY; i++)
 800071a:	2328      	movs	r3, #40	; 0x28
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	e007      	b.n	8000730 <reset_buf+0x38>
	  	{
		  buf[i] = log_0;
 8000720:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <reset_buf+0x60>)
 8000722:	683a      	ldr	r2, [r7, #0]
 8000724:	0092      	lsls	r2, r2, #2
 8000726:	2111      	movs	r1, #17
 8000728:	50d1      	str	r1, [r2, r3]
	for (int i = RESET_DELAY; i<quantity_led*24+RESET_DELAY; i++)
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	3301      	adds	r3, #1
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	4a0a      	ldr	r2, [pc, #40]	; (800075c <reset_buf+0x64>)
 8000734:	4293      	cmp	r3, r2
 8000736:	ddf3      	ble.n	8000720 <reset_buf+0x28>
	    }
	buf[RESET_DELAY+quantity_led*24] = 0;
 8000738:	4b07      	ldr	r3, [pc, #28]	; (8000758 <reset_buf+0x60>)
 800073a:	4a09      	ldr	r2, [pc, #36]	; (8000760 <reset_buf+0x68>)
 800073c:	2100      	movs	r1, #0
 800073e:	5099      	str	r1, [r3, r2]
	buf[RESET_DELAY+quantity_led*24+1] = 0;
 8000740:	4b05      	ldr	r3, [pc, #20]	; (8000758 <reset_buf+0x60>)
 8000742:	4a08      	ldr	r2, [pc, #32]	; (8000764 <reset_buf+0x6c>)
 8000744:	2100      	movs	r1, #0
 8000746:	5099      	str	r1, [r3, r2]
	buf[RESET_DELAY+quantity_led*24+2] = 0;
 8000748:	4b03      	ldr	r3, [pc, #12]	; (8000758 <reset_buf+0x60>)
 800074a:	4a07      	ldr	r2, [pc, #28]	; (8000768 <reset_buf+0x70>)
 800074c:	2100      	movs	r1, #0
 800074e:	5099      	str	r1, [r3, r2]
}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	b002      	add	sp, #8
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000028 	.word	0x20000028
 800075c:	00000987 	.word	0x00000987
 8000760:	00002620 	.word	0x00002620
 8000764:	00002624 	.word	0x00002624
 8000768:	00002628 	.word	0x00002628

0800076c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000770:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000772:	e7fe      	b.n	8000772 <Error_Handler+0x6>

08000774 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077a:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <HAL_MspInit+0x44>)
 800077c:	699a      	ldr	r2, [r3, #24]
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <HAL_MspInit+0x44>)
 8000780:	2101      	movs	r1, #1
 8000782:	430a      	orrs	r2, r1
 8000784:	619a      	str	r2, [r3, #24]
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <HAL_MspInit+0x44>)
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	2201      	movs	r2, #1
 800078c:	4013      	ands	r3, r2
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <HAL_MspInit+0x44>)
 8000794:	69da      	ldr	r2, [r3, #28]
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <HAL_MspInit+0x44>)
 8000798:	2180      	movs	r1, #128	; 0x80
 800079a:	0549      	lsls	r1, r1, #21
 800079c:	430a      	orrs	r2, r1
 800079e:	61da      	str	r2, [r3, #28]
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <HAL_MspInit+0x44>)
 80007a2:	69da      	ldr	r2, [r3, #28]
 80007a4:	2380      	movs	r3, #128	; 0x80
 80007a6:	055b      	lsls	r3, r3, #21
 80007a8:	4013      	ands	r3, r2
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	b002      	add	sp, #8
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	40021000 	.word	0x40021000

080007bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a20      	ldr	r2, [pc, #128]	; (800084c <HAL_TIM_PWM_MspInit+0x90>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d139      	bne.n	8000842 <HAL_TIM_PWM_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007ce:	4b20      	ldr	r3, [pc, #128]	; (8000850 <HAL_TIM_PWM_MspInit+0x94>)
 80007d0:	69da      	ldr	r2, [r3, #28]
 80007d2:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <HAL_TIM_PWM_MspInit+0x94>)
 80007d4:	2102      	movs	r1, #2
 80007d6:	430a      	orrs	r2, r1
 80007d8:	61da      	str	r2, [r3, #28]
 80007da:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <HAL_TIM_PWM_MspInit+0x94>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	2202      	movs	r2, #2
 80007e0:	4013      	ands	r3, r2
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel4;
 80007e6:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <HAL_TIM_PWM_MspInit+0x98>)
 80007e8:	4a1b      	ldr	r2, [pc, #108]	; (8000858 <HAL_TIM_PWM_MspInit+0x9c>)
 80007ea:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007ec:	4b19      	ldr	r3, [pc, #100]	; (8000854 <HAL_TIM_PWM_MspInit+0x98>)
 80007ee:	2210      	movs	r2, #16
 80007f0:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80007f2:	4b18      	ldr	r3, [pc, #96]	; (8000854 <HAL_TIM_PWM_MspInit+0x98>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80007f8:	4b16      	ldr	r3, [pc, #88]	; (8000854 <HAL_TIM_PWM_MspInit+0x98>)
 80007fa:	2280      	movs	r2, #128	; 0x80
 80007fc:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <HAL_TIM_PWM_MspInit+0x98>)
 8000800:	2280      	movs	r2, #128	; 0x80
 8000802:	0092      	lsls	r2, r2, #2
 8000804:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <HAL_TIM_PWM_MspInit+0x98>)
 8000808:	2280      	movs	r2, #128	; 0x80
 800080a:	0112      	lsls	r2, r2, #4
 800080c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <HAL_TIM_PWM_MspInit+0x98>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <HAL_TIM_PWM_MspInit+0x98>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <HAL_TIM_PWM_MspInit+0x98>)
 800081c:	0018      	movs	r0, r3
 800081e:	f000 fa2d 	bl	8000c7c <HAL_DMA_Init>
 8000822:	1e03      	subs	r3, r0, #0
 8000824:	d001      	beq.n	800082a <HAL_TIM_PWM_MspInit+0x6e>
    {
      Error_Handler();
 8000826:	f7ff ffa1 	bl	800076c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4a09      	ldr	r2, [pc, #36]	; (8000854 <HAL_TIM_PWM_MspInit+0x98>)
 800082e:	625a      	str	r2, [r3, #36]	; 0x24
 8000830:	4b08      	ldr	r3, [pc, #32]	; (8000854 <HAL_TIM_PWM_MspInit+0x98>)
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4a06      	ldr	r2, [pc, #24]	; (8000854 <HAL_TIM_PWM_MspInit+0x98>)
 800083a:	639a      	str	r2, [r3, #56]	; 0x38
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <HAL_TIM_PWM_MspInit+0x98>)
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	b004      	add	sp, #16
 8000848:	bd80      	pop	{r7, pc}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	40000400 	.word	0x40000400
 8000850:	40021000 	.word	0x40021000
 8000854:	2000269c 	.word	0x2000269c
 8000858:	40020044 	.word	0x40020044

0800085c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b088      	sub	sp, #32
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	230c      	movs	r3, #12
 8000866:	18fb      	adds	r3, r7, r3
 8000868:	0018      	movs	r0, r3
 800086a:	2314      	movs	r3, #20
 800086c:	001a      	movs	r2, r3
 800086e:	2100      	movs	r1, #0
 8000870:	f002 fa0c 	bl	8002c8c <memset>
  if(htim->Instance==TIM3)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a15      	ldr	r2, [pc, #84]	; (80008d0 <HAL_TIM_MspPostInit+0x74>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d124      	bne.n	80008c8 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <HAL_TIM_MspPostInit+0x78>)
 8000880:	695a      	ldr	r2, [r3, #20]
 8000882:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <HAL_TIM_MspPostInit+0x78>)
 8000884:	2180      	movs	r1, #128	; 0x80
 8000886:	0289      	lsls	r1, r1, #10
 8000888:	430a      	orrs	r2, r1
 800088a:	615a      	str	r2, [r3, #20]
 800088c:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <HAL_TIM_MspPostInit+0x78>)
 800088e:	695a      	ldr	r2, [r3, #20]
 8000890:	2380      	movs	r3, #128	; 0x80
 8000892:	029b      	lsls	r3, r3, #10
 8000894:	4013      	ands	r3, r2
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800089a:	210c      	movs	r1, #12
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2240      	movs	r2, #64	; 0x40
 80008a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2202      	movs	r2, #2
 80008a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2200      	movs	r2, #0
 80008b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	2201      	movs	r2, #1
 80008b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ba:	187a      	adds	r2, r7, r1
 80008bc:	2390      	movs	r3, #144	; 0x90
 80008be:	05db      	lsls	r3, r3, #23
 80008c0:	0011      	movs	r1, r2
 80008c2:	0018      	movs	r0, r3
 80008c4:	f000 fbb8 	bl	8001038 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	b008      	add	sp, #32
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40000400 	.word	0x40000400
 80008d4:	40021000 	.word	0x40021000

080008d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <NMI_Handler+0x4>

080008de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <HardFault_Handler+0x4>

080008e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008e8:	46c0      	nop			; (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008fc:	f000 f8a2 	bl	8000a44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000900:	46c0      	nop			; (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
	...

08000908 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800090c:	2380      	movs	r3, #128	; 0x80
 800090e:	011b      	lsls	r3, r3, #4
 8000910:	0018      	movs	r0, r3
 8000912:	f000 fd41 	bl	8001398 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */
  HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_14);
 8000916:	2380      	movs	r3, #128	; 0x80
 8000918:	01db      	lsls	r3, r3, #7
 800091a:	4a04      	ldr	r2, [pc, #16]	; (800092c <EXTI4_15_IRQHandler+0x24>)
 800091c:	0019      	movs	r1, r3
 800091e:	0010      	movs	r0, r2
 8000920:	f000 fd1f 	bl	8001362 <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	48000400 	.word	0x48000400

08000930 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, 5, 6 and 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 8000936:	2100      	movs	r1, #0
 8000938:	0018      	movs	r0, r3
 800093a:	f001 fc21 	bl	8002180 <HAL_TIM_PWM_Stop_DMA>
  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 800093e:	4b04      	ldr	r3, [pc, #16]	; (8000950 <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 8000940:	0018      	movs	r0, r3
 8000942:	f000 fa8f 	bl	8000e64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20002654 	.word	0x20002654
 8000950:	2000269c 	.word	0x2000269c

08000954 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <Reset_Handler>:
 8000960:	480d      	ldr	r0, [pc, #52]	; (8000998 <LoopForever+0x2>)
 8000962:	4685      	mov	sp, r0
 8000964:	480d      	ldr	r0, [pc, #52]	; (800099c <LoopForever+0x6>)
 8000966:	490e      	ldr	r1, [pc, #56]	; (80009a0 <LoopForever+0xa>)
 8000968:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <LoopForever+0xe>)
 800096a:	2300      	movs	r3, #0
 800096c:	e002      	b.n	8000974 <LoopCopyDataInit>

0800096e <CopyDataInit>:
 800096e:	58d4      	ldr	r4, [r2, r3]
 8000970:	50c4      	str	r4, [r0, r3]
 8000972:	3304      	adds	r3, #4

08000974 <LoopCopyDataInit>:
 8000974:	18c4      	adds	r4, r0, r3
 8000976:	428c      	cmp	r4, r1
 8000978:	d3f9      	bcc.n	800096e <CopyDataInit>
 800097a:	4a0b      	ldr	r2, [pc, #44]	; (80009a8 <LoopForever+0x12>)
 800097c:	4c0b      	ldr	r4, [pc, #44]	; (80009ac <LoopForever+0x16>)
 800097e:	2300      	movs	r3, #0
 8000980:	e001      	b.n	8000986 <LoopFillZerobss>

08000982 <FillZerobss>:
 8000982:	6013      	str	r3, [r2, #0]
 8000984:	3204      	adds	r2, #4

08000986 <LoopFillZerobss>:
 8000986:	42a2      	cmp	r2, r4
 8000988:	d3fb      	bcc.n	8000982 <FillZerobss>
 800098a:	f7ff ffe3 	bl	8000954 <SystemInit>
 800098e:	f002 f959 	bl	8002c44 <__libc_init_array>
 8000992:	f7ff fc45 	bl	8000220 <main>

08000996 <LoopForever>:
 8000996:	e7fe      	b.n	8000996 <LoopForever>
 8000998:	20004000 	.word	0x20004000
 800099c:	20000000 	.word	0x20000000
 80009a0:	2000000c 	.word	0x2000000c
 80009a4:	08002cec 	.word	0x08002cec
 80009a8:	2000000c 	.word	0x2000000c
 80009ac:	200026e4 	.word	0x200026e4

080009b0 <ADC1_COMP_IRQHandler>:
 80009b0:	e7fe      	b.n	80009b0 <ADC1_COMP_IRQHandler>
	...

080009b4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b8:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <HAL_Init+0x24>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_Init+0x24>)
 80009be:	2110      	movs	r1, #16
 80009c0:	430a      	orrs	r2, r1
 80009c2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80009c4:	2000      	movs	r0, #0
 80009c6:	f000 f809 	bl	80009dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009ca:	f7ff fed3 	bl	8000774 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ce:	2300      	movs	r3, #0
}
 80009d0:	0018      	movs	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	40022000 	.word	0x40022000

080009dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009dc:	b590      	push	{r4, r7, lr}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <HAL_InitTick+0x5c>)
 80009e6:	681c      	ldr	r4, [r3, #0]
 80009e8:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <HAL_InitTick+0x60>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	0019      	movs	r1, r3
 80009ee:	23fa      	movs	r3, #250	; 0xfa
 80009f0:	0098      	lsls	r0, r3, #2
 80009f2:	f7ff fb89 	bl	8000108 <__udivsi3>
 80009f6:	0003      	movs	r3, r0
 80009f8:	0019      	movs	r1, r3
 80009fa:	0020      	movs	r0, r4
 80009fc:	f7ff fb84 	bl	8000108 <__udivsi3>
 8000a00:	0003      	movs	r3, r0
 8000a02:	0018      	movs	r0, r3
 8000a04:	f000 f92d 	bl	8000c62 <HAL_SYSTICK_Config>
 8000a08:	1e03      	subs	r3, r0, #0
 8000a0a:	d001      	beq.n	8000a10 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	e00f      	b.n	8000a30 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2b03      	cmp	r3, #3
 8000a14:	d80b      	bhi.n	8000a2e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a16:	6879      	ldr	r1, [r7, #4]
 8000a18:	2301      	movs	r3, #1
 8000a1a:	425b      	negs	r3, r3
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f000 f8fa 	bl	8000c18 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_InitTick+0x64>)
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	e000      	b.n	8000a30 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
}
 8000a30:	0018      	movs	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	b003      	add	sp, #12
 8000a36:	bd90      	pop	{r4, r7, pc}
 8000a38:	20000000 	.word	0x20000000
 8000a3c:	20000008 	.word	0x20000008
 8000a40:	20000004 	.word	0x20000004

08000a44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <HAL_IncTick+0x1c>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	001a      	movs	r2, r3
 8000a4e:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <HAL_IncTick+0x20>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	18d2      	adds	r2, r2, r3
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <HAL_IncTick+0x20>)
 8000a56:	601a      	str	r2, [r3, #0]
}
 8000a58:	46c0      	nop			; (mov r8, r8)
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	20000008 	.word	0x20000008
 8000a64:	200026e0 	.word	0x200026e0

08000a68 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a6c:	4b02      	ldr	r3, [pc, #8]	; (8000a78 <HAL_GetTick+0x10>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
}
 8000a70:	0018      	movs	r0, r3
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	200026e0 	.word	0x200026e0

08000a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a84:	f7ff fff0 	bl	8000a68 <HAL_GetTick>
 8000a88:	0003      	movs	r3, r0
 8000a8a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	3301      	adds	r3, #1
 8000a94:	d005      	beq.n	8000aa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <HAL_Delay+0x40>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	001a      	movs	r2, r3
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	189b      	adds	r3, r3, r2
 8000aa0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	f7ff ffe0 	bl	8000a68 <HAL_GetTick>
 8000aa8:	0002      	movs	r2, r0
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	68fa      	ldr	r2, [r7, #12]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d8f7      	bhi.n	8000aa4 <HAL_Delay+0x28>
  {
  }
}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b004      	add	sp, #16
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000008 	.word	0x20000008

08000ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	0002      	movs	r2, r0
 8000ac8:	1dfb      	adds	r3, r7, #7
 8000aca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000acc:	1dfb      	adds	r3, r7, #7
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b7f      	cmp	r3, #127	; 0x7f
 8000ad2:	d809      	bhi.n	8000ae8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ad4:	1dfb      	adds	r3, r7, #7
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	001a      	movs	r2, r3
 8000ada:	231f      	movs	r3, #31
 8000adc:	401a      	ands	r2, r3
 8000ade:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <__NVIC_EnableIRQ+0x30>)
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	4091      	lsls	r1, r2
 8000ae4:	000a      	movs	r2, r1
 8000ae6:	601a      	str	r2, [r3, #0]
  }
}
 8000ae8:	46c0      	nop			; (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b002      	add	sp, #8
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	e000e100 	.word	0xe000e100

08000af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af4:	b590      	push	{r4, r7, lr}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	0002      	movs	r2, r0
 8000afc:	6039      	str	r1, [r7, #0]
 8000afe:	1dfb      	adds	r3, r7, #7
 8000b00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b02:	1dfb      	adds	r3, r7, #7
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b7f      	cmp	r3, #127	; 0x7f
 8000b08:	d828      	bhi.n	8000b5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b0a:	4a2f      	ldr	r2, [pc, #188]	; (8000bc8 <__NVIC_SetPriority+0xd4>)
 8000b0c:	1dfb      	adds	r3, r7, #7
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	b25b      	sxtb	r3, r3
 8000b12:	089b      	lsrs	r3, r3, #2
 8000b14:	33c0      	adds	r3, #192	; 0xc0
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	589b      	ldr	r3, [r3, r2]
 8000b1a:	1dfa      	adds	r2, r7, #7
 8000b1c:	7812      	ldrb	r2, [r2, #0]
 8000b1e:	0011      	movs	r1, r2
 8000b20:	2203      	movs	r2, #3
 8000b22:	400a      	ands	r2, r1
 8000b24:	00d2      	lsls	r2, r2, #3
 8000b26:	21ff      	movs	r1, #255	; 0xff
 8000b28:	4091      	lsls	r1, r2
 8000b2a:	000a      	movs	r2, r1
 8000b2c:	43d2      	mvns	r2, r2
 8000b2e:	401a      	ands	r2, r3
 8000b30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	019b      	lsls	r3, r3, #6
 8000b36:	22ff      	movs	r2, #255	; 0xff
 8000b38:	401a      	ands	r2, r3
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	0018      	movs	r0, r3
 8000b40:	2303      	movs	r3, #3
 8000b42:	4003      	ands	r3, r0
 8000b44:	00db      	lsls	r3, r3, #3
 8000b46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b48:	481f      	ldr	r0, [pc, #124]	; (8000bc8 <__NVIC_SetPriority+0xd4>)
 8000b4a:	1dfb      	adds	r3, r7, #7
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	b25b      	sxtb	r3, r3
 8000b50:	089b      	lsrs	r3, r3, #2
 8000b52:	430a      	orrs	r2, r1
 8000b54:	33c0      	adds	r3, #192	; 0xc0
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b5a:	e031      	b.n	8000bc0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b5c:	4a1b      	ldr	r2, [pc, #108]	; (8000bcc <__NVIC_SetPriority+0xd8>)
 8000b5e:	1dfb      	adds	r3, r7, #7
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	0019      	movs	r1, r3
 8000b64:	230f      	movs	r3, #15
 8000b66:	400b      	ands	r3, r1
 8000b68:	3b08      	subs	r3, #8
 8000b6a:	089b      	lsrs	r3, r3, #2
 8000b6c:	3306      	adds	r3, #6
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	18d3      	adds	r3, r2, r3
 8000b72:	3304      	adds	r3, #4
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	1dfa      	adds	r2, r7, #7
 8000b78:	7812      	ldrb	r2, [r2, #0]
 8000b7a:	0011      	movs	r1, r2
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	400a      	ands	r2, r1
 8000b80:	00d2      	lsls	r2, r2, #3
 8000b82:	21ff      	movs	r1, #255	; 0xff
 8000b84:	4091      	lsls	r1, r2
 8000b86:	000a      	movs	r2, r1
 8000b88:	43d2      	mvns	r2, r2
 8000b8a:	401a      	ands	r2, r3
 8000b8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	019b      	lsls	r3, r3, #6
 8000b92:	22ff      	movs	r2, #255	; 0xff
 8000b94:	401a      	ands	r2, r3
 8000b96:	1dfb      	adds	r3, r7, #7
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	4003      	ands	r3, r0
 8000ba0:	00db      	lsls	r3, r3, #3
 8000ba2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ba4:	4809      	ldr	r0, [pc, #36]	; (8000bcc <__NVIC_SetPriority+0xd8>)
 8000ba6:	1dfb      	adds	r3, r7, #7
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	001c      	movs	r4, r3
 8000bac:	230f      	movs	r3, #15
 8000bae:	4023      	ands	r3, r4
 8000bb0:	3b08      	subs	r3, #8
 8000bb2:	089b      	lsrs	r3, r3, #2
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	3306      	adds	r3, #6
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	18c3      	adds	r3, r0, r3
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	601a      	str	r2, [r3, #0]
}
 8000bc0:	46c0      	nop			; (mov r8, r8)
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	b003      	add	sp, #12
 8000bc6:	bd90      	pop	{r4, r7, pc}
 8000bc8:	e000e100 	.word	0xe000e100
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	4a0c      	ldr	r2, [pc, #48]	; (8000c10 <SysTick_Config+0x40>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d901      	bls.n	8000be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000be2:	2301      	movs	r3, #1
 8000be4:	e010      	b.n	8000c08 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <SysTick_Config+0x44>)
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	3a01      	subs	r2, #1
 8000bec:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bee:	2301      	movs	r3, #1
 8000bf0:	425b      	negs	r3, r3
 8000bf2:	2103      	movs	r1, #3
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f7ff ff7d 	bl	8000af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <SysTick_Config+0x44>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c00:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <SysTick_Config+0x44>)
 8000c02:	2207      	movs	r2, #7
 8000c04:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c06:	2300      	movs	r3, #0
}
 8000c08:	0018      	movs	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	b002      	add	sp, #8
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	00ffffff 	.word	0x00ffffff
 8000c14:	e000e010 	.word	0xe000e010

08000c18 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
 8000c22:	210f      	movs	r1, #15
 8000c24:	187b      	adds	r3, r7, r1
 8000c26:	1c02      	adds	r2, r0, #0
 8000c28:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	b25b      	sxtb	r3, r3
 8000c32:	0011      	movs	r1, r2
 8000c34:	0018      	movs	r0, r3
 8000c36:	f7ff ff5d 	bl	8000af4 <__NVIC_SetPriority>
}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	b004      	add	sp, #16
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	0002      	movs	r2, r0
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c4e:	1dfb      	adds	r3, r7, #7
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	b25b      	sxtb	r3, r3
 8000c54:	0018      	movs	r0, r3
 8000c56:	f7ff ff33 	bl	8000ac0 <__NVIC_EnableIRQ>
}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b002      	add	sp, #8
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f7ff ffaf 	bl	8000bd0 <SysTick_Config>
 8000c72:	0003      	movs	r3, r0
}
 8000c74:	0018      	movs	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	b002      	add	sp, #8
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d101      	bne.n	8000c92 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e036      	b.n	8000d00 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2221      	movs	r2, #33	; 0x21
 8000c96:	2102      	movs	r1, #2
 8000c98:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	4a18      	ldr	r2, [pc, #96]	; (8000d08 <HAL_DMA_Init+0x8c>)
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000cb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	695b      	ldr	r3, [r3, #20]
 8000cc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	69db      	ldr	r3, [r3, #28]
 8000cd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	68fa      	ldr	r2, [r7, #12]
 8000cde:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f000 f98c 	bl	8001000 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2200      	movs	r2, #0
 8000cec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2221      	movs	r2, #33	; 0x21
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2220      	movs	r2, #32
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000cfe:	2300      	movs	r3, #0
}  
 8000d00:	0018      	movs	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	b004      	add	sp, #16
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	ffffc00f 	.word	0xffffc00f

08000d0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
 8000d18:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000d1a:	2317      	movs	r3, #23
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	2200      	movs	r2, #0
 8000d20:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	2220      	movs	r2, #32
 8000d26:	5c9b      	ldrb	r3, [r3, r2]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d101      	bne.n	8000d30 <HAL_DMA_Start_IT+0x24>
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	e04f      	b.n	8000dd0 <HAL_DMA_Start_IT+0xc4>
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	2220      	movs	r2, #32
 8000d34:	2101      	movs	r1, #1
 8000d36:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2221      	movs	r2, #33	; 0x21
 8000d3c:	5c9b      	ldrb	r3, [r3, r2]
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d13a      	bne.n	8000dba <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	2221      	movs	r2, #33	; 0x21
 8000d48:	2102      	movs	r1, #2
 8000d4a:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	438a      	bics	r2, r1
 8000d60:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	68b9      	ldr	r1, [r7, #8]
 8000d68:	68f8      	ldr	r0, [r7, #12]
 8000d6a:	f000 f91d 	bl	8000fa8 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d008      	beq.n	8000d88 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	210e      	movs	r1, #14
 8000d82:	430a      	orrs	r2, r1
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	e00f      	b.n	8000da8 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	210a      	movs	r1, #10
 8000d94:	430a      	orrs	r2, r1
 8000d96:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2104      	movs	r1, #4
 8000da4:	438a      	bics	r2, r1
 8000da6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2101      	movs	r1, #1
 8000db4:	430a      	orrs	r2, r1
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	e007      	b.n	8000dca <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	2220      	movs	r2, #32
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000dc2:	2317      	movs	r3, #23
 8000dc4:	18fb      	adds	r3, r7, r3
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8000dca:	2317      	movs	r3, #23
 8000dcc:	18fb      	adds	r3, r7, r3
 8000dce:	781b      	ldrb	r3, [r3, #0]
} 
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	b006      	add	sp, #24
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000de0:	230f      	movs	r3, #15
 8000de2:	18fb      	adds	r3, r7, r3
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2221      	movs	r2, #33	; 0x21
 8000dec:	5c9b      	ldrb	r3, [r3, r2]
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d007      	beq.n	8000e04 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2204      	movs	r2, #4
 8000df8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000dfa:	230f      	movs	r3, #15
 8000dfc:	18fb      	adds	r3, r7, r3
 8000dfe:	2201      	movs	r2, #1
 8000e00:	701a      	strb	r2, [r3, #0]
 8000e02:	e028      	b.n	8000e56 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	210e      	movs	r1, #14
 8000e10:	438a      	bics	r2, r1
 8000e12:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2101      	movs	r1, #1
 8000e20:	438a      	bics	r2, r1
 8000e22:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	4091      	lsls	r1, r2
 8000e30:	000a      	movs	r2, r1
 8000e32:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2221      	movs	r2, #33	; 0x21
 8000e38:	2101      	movs	r1, #1
 8000e3a:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2220      	movs	r2, #32
 8000e40:	2100      	movs	r1, #0
 8000e42:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d004      	beq.n	8000e56 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	0010      	movs	r0, r2
 8000e54:	4798      	blx	r3
    } 
  }
  return status;
 8000e56:	230f      	movs	r3, #15
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	781b      	ldrb	r3, [r3, #0]
}
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	b004      	add	sp, #16
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e80:	2204      	movs	r2, #4
 8000e82:	409a      	lsls	r2, r3
 8000e84:	0013      	movs	r3, r2
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	d024      	beq.n	8000ed6 <HAL_DMA_IRQHandler+0x72>
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	2204      	movs	r2, #4
 8000e90:	4013      	ands	r3, r2
 8000e92:	d020      	beq.n	8000ed6 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2220      	movs	r2, #32
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	d107      	bne.n	8000eb0 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2104      	movs	r1, #4
 8000eac:	438a      	bics	r2, r1
 8000eae:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eb8:	2104      	movs	r1, #4
 8000eba:	4091      	lsls	r1, r2
 8000ebc:	000a      	movs	r2, r1
 8000ebe:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d100      	bne.n	8000eca <HAL_DMA_IRQHandler+0x66>
 8000ec8:	e06a      	b.n	8000fa0 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	0010      	movs	r0, r2
 8000ed2:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000ed4:	e064      	b.n	8000fa0 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	2202      	movs	r2, #2
 8000edc:	409a      	lsls	r2, r3
 8000ede:	0013      	movs	r3, r2
 8000ee0:	68fa      	ldr	r2, [r7, #12]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	d02b      	beq.n	8000f3e <HAL_DMA_IRQHandler+0xda>
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	2202      	movs	r2, #2
 8000eea:	4013      	ands	r3, r2
 8000eec:	d027      	beq.n	8000f3e <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2220      	movs	r2, #32
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	d10b      	bne.n	8000f12 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	210a      	movs	r1, #10
 8000f06:	438a      	bics	r2, r1
 8000f08:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2221      	movs	r2, #33	; 0x21
 8000f0e:	2101      	movs	r1, #1
 8000f10:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f1a:	2102      	movs	r1, #2
 8000f1c:	4091      	lsls	r1, r2
 8000f1e:	000a      	movs	r2, r1
 8000f20:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2220      	movs	r2, #32
 8000f26:	2100      	movs	r1, #0
 8000f28:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d036      	beq.n	8000fa0 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	0010      	movs	r0, r2
 8000f3a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000f3c:	e030      	b.n	8000fa0 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	2208      	movs	r2, #8
 8000f44:	409a      	lsls	r2, r3
 8000f46:	0013      	movs	r3, r2
 8000f48:	68fa      	ldr	r2, [r7, #12]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	d028      	beq.n	8000fa0 <HAL_DMA_IRQHandler+0x13c>
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	2208      	movs	r2, #8
 8000f52:	4013      	ands	r3, r2
 8000f54:	d024      	beq.n	8000fa0 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	210e      	movs	r1, #14
 8000f62:	438a      	bics	r2, r1
 8000f64:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f6e:	2101      	movs	r1, #1
 8000f70:	4091      	lsls	r1, r2
 8000f72:	000a      	movs	r2, r1
 8000f74:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2221      	movs	r2, #33	; 0x21
 8000f80:	2101      	movs	r1, #1
 8000f82:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2220      	movs	r2, #32
 8000f88:	2100      	movs	r1, #0
 8000f8a:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d005      	beq.n	8000fa0 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	0010      	movs	r0, r2
 8000f9c:	4798      	blx	r3
    }
   }
}  
 8000f9e:	e7ff      	b.n	8000fa0 <HAL_DMA_IRQHandler+0x13c>
 8000fa0:	46c0      	nop			; (mov r8, r8)
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	b004      	add	sp, #16
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
 8000fb4:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	4091      	lsls	r1, r2
 8000fc2:	000a      	movs	r2, r1
 8000fc4:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	683a      	ldr	r2, [r7, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2b10      	cmp	r3, #16
 8000fd4:	d108      	bne.n	8000fe8 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000fe6:	e007      	b.n	8000ff8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	68ba      	ldr	r2, [r7, #8]
 8000fee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	60da      	str	r2, [r3, #12]
}
 8000ff8:	46c0      	nop			; (mov r8, r8)
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b004      	add	sp, #16
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a08      	ldr	r2, [pc, #32]	; (8001030 <DMA_CalcBaseAndBitshift+0x30>)
 800100e:	4694      	mov	ip, r2
 8001010:	4463      	add	r3, ip
 8001012:	2114      	movs	r1, #20
 8001014:	0018      	movs	r0, r3
 8001016:	f7ff f877 	bl	8000108 <__udivsi3>
 800101a:	0003      	movs	r3, r0
 800101c:	009a      	lsls	r2, r3, #2
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a03      	ldr	r2, [pc, #12]	; (8001034 <DMA_CalcBaseAndBitshift+0x34>)
 8001026:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001028:	46c0      	nop			; (mov r8, r8)
 800102a:	46bd      	mov	sp, r7
 800102c:	b002      	add	sp, #8
 800102e:	bd80      	pop	{r7, pc}
 8001030:	bffdfff8 	.word	0xbffdfff8
 8001034:	40020000 	.word	0x40020000

08001038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001046:	e155      	b.n	80012f4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2101      	movs	r1, #1
 800104e:	697a      	ldr	r2, [r7, #20]
 8001050:	4091      	lsls	r1, r2
 8001052:	000a      	movs	r2, r1
 8001054:	4013      	ands	r3, r2
 8001056:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d100      	bne.n	8001060 <HAL_GPIO_Init+0x28>
 800105e:	e146      	b.n	80012ee <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d00b      	beq.n	8001080 <HAL_GPIO_Init+0x48>
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	2b02      	cmp	r3, #2
 800106e:	d007      	beq.n	8001080 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001074:	2b11      	cmp	r3, #17
 8001076:	d003      	beq.n	8001080 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	2b12      	cmp	r3, #18
 800107e:	d130      	bne.n	80010e2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	2203      	movs	r2, #3
 800108c:	409a      	lsls	r2, r3
 800108e:	0013      	movs	r3, r2
 8001090:	43da      	mvns	r2, r3
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	68da      	ldr	r2, [r3, #12]
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	409a      	lsls	r2, r3
 80010a2:	0013      	movs	r3, r2
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b6:	2201      	movs	r2, #1
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	409a      	lsls	r2, r3
 80010bc:	0013      	movs	r3, r2
 80010be:	43da      	mvns	r2, r3
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	091b      	lsrs	r3, r3, #4
 80010cc:	2201      	movs	r2, #1
 80010ce:	401a      	ands	r2, r3
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	409a      	lsls	r2, r3
 80010d4:	0013      	movs	r3, r2
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	2203      	movs	r2, #3
 80010ee:	409a      	lsls	r2, r3
 80010f0:	0013      	movs	r3, r2
 80010f2:	43da      	mvns	r2, r3
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4013      	ands	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	409a      	lsls	r2, r3
 8001104:	0013      	movs	r3, r2
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	2b02      	cmp	r3, #2
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_Init+0xea>
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2b12      	cmp	r3, #18
 8001120:	d123      	bne.n	800116a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	08da      	lsrs	r2, r3, #3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3208      	adds	r2, #8
 800112a:	0092      	lsls	r2, r2, #2
 800112c:	58d3      	ldr	r3, [r2, r3]
 800112e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	2207      	movs	r2, #7
 8001134:	4013      	ands	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	220f      	movs	r2, #15
 800113a:	409a      	lsls	r2, r3
 800113c:	0013      	movs	r3, r2
 800113e:	43da      	mvns	r2, r3
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	4013      	ands	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	691a      	ldr	r2, [r3, #16]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	2107      	movs	r1, #7
 800114e:	400b      	ands	r3, r1
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	409a      	lsls	r2, r3
 8001154:	0013      	movs	r3, r2
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	08da      	lsrs	r2, r3, #3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3208      	adds	r2, #8
 8001164:	0092      	lsls	r2, r2, #2
 8001166:	6939      	ldr	r1, [r7, #16]
 8001168:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	2203      	movs	r2, #3
 8001176:	409a      	lsls	r2, r3
 8001178:	0013      	movs	r3, r2
 800117a:	43da      	mvns	r2, r3
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4013      	ands	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2203      	movs	r2, #3
 8001188:	401a      	ands	r2, r3
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	409a      	lsls	r2, r3
 8001190:	0013      	movs	r3, r2
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	2380      	movs	r3, #128	; 0x80
 80011a4:	055b      	lsls	r3, r3, #21
 80011a6:	4013      	ands	r3, r2
 80011a8:	d100      	bne.n	80011ac <HAL_GPIO_Init+0x174>
 80011aa:	e0a0      	b.n	80012ee <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ac:	4b57      	ldr	r3, [pc, #348]	; (800130c <HAL_GPIO_Init+0x2d4>)
 80011ae:	699a      	ldr	r2, [r3, #24]
 80011b0:	4b56      	ldr	r3, [pc, #344]	; (800130c <HAL_GPIO_Init+0x2d4>)
 80011b2:	2101      	movs	r1, #1
 80011b4:	430a      	orrs	r2, r1
 80011b6:	619a      	str	r2, [r3, #24]
 80011b8:	4b54      	ldr	r3, [pc, #336]	; (800130c <HAL_GPIO_Init+0x2d4>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	2201      	movs	r2, #1
 80011be:	4013      	ands	r3, r2
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011c4:	4a52      	ldr	r2, [pc, #328]	; (8001310 <HAL_GPIO_Init+0x2d8>)
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	089b      	lsrs	r3, r3, #2
 80011ca:	3302      	adds	r3, #2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	589b      	ldr	r3, [r3, r2]
 80011d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	2203      	movs	r2, #3
 80011d6:	4013      	ands	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	220f      	movs	r2, #15
 80011dc:	409a      	lsls	r2, r3
 80011de:	0013      	movs	r3, r2
 80011e0:	43da      	mvns	r2, r3
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	2390      	movs	r3, #144	; 0x90
 80011ec:	05db      	lsls	r3, r3, #23
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d019      	beq.n	8001226 <HAL_GPIO_Init+0x1ee>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a47      	ldr	r2, [pc, #284]	; (8001314 <HAL_GPIO_Init+0x2dc>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d013      	beq.n	8001222 <HAL_GPIO_Init+0x1ea>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a46      	ldr	r2, [pc, #280]	; (8001318 <HAL_GPIO_Init+0x2e0>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d00d      	beq.n	800121e <HAL_GPIO_Init+0x1e6>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a45      	ldr	r2, [pc, #276]	; (800131c <HAL_GPIO_Init+0x2e4>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d007      	beq.n	800121a <HAL_GPIO_Init+0x1e2>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a44      	ldr	r2, [pc, #272]	; (8001320 <HAL_GPIO_Init+0x2e8>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d101      	bne.n	8001216 <HAL_GPIO_Init+0x1de>
 8001212:	2304      	movs	r3, #4
 8001214:	e008      	b.n	8001228 <HAL_GPIO_Init+0x1f0>
 8001216:	2305      	movs	r3, #5
 8001218:	e006      	b.n	8001228 <HAL_GPIO_Init+0x1f0>
 800121a:	2303      	movs	r3, #3
 800121c:	e004      	b.n	8001228 <HAL_GPIO_Init+0x1f0>
 800121e:	2302      	movs	r3, #2
 8001220:	e002      	b.n	8001228 <HAL_GPIO_Init+0x1f0>
 8001222:	2301      	movs	r3, #1
 8001224:	e000      	b.n	8001228 <HAL_GPIO_Init+0x1f0>
 8001226:	2300      	movs	r3, #0
 8001228:	697a      	ldr	r2, [r7, #20]
 800122a:	2103      	movs	r1, #3
 800122c:	400a      	ands	r2, r1
 800122e:	0092      	lsls	r2, r2, #2
 8001230:	4093      	lsls	r3, r2
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001238:	4935      	ldr	r1, [pc, #212]	; (8001310 <HAL_GPIO_Init+0x2d8>)
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	089b      	lsrs	r3, r3, #2
 800123e:	3302      	adds	r3, #2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001246:	4b37      	ldr	r3, [pc, #220]	; (8001324 <HAL_GPIO_Init+0x2ec>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	43da      	mvns	r2, r3
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	2380      	movs	r3, #128	; 0x80
 800125c:	025b      	lsls	r3, r3, #9
 800125e:	4013      	ands	r3, r2
 8001260:	d003      	beq.n	800126a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4313      	orrs	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800126a:	4b2e      	ldr	r3, [pc, #184]	; (8001324 <HAL_GPIO_Init+0x2ec>)
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001270:	4b2c      	ldr	r3, [pc, #176]	; (8001324 <HAL_GPIO_Init+0x2ec>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	43da      	mvns	r2, r3
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	4013      	ands	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	2380      	movs	r3, #128	; 0x80
 8001286:	029b      	lsls	r3, r3, #10
 8001288:	4013      	ands	r3, r2
 800128a:	d003      	beq.n	8001294 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	4313      	orrs	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001294:	4b23      	ldr	r3, [pc, #140]	; (8001324 <HAL_GPIO_Init+0x2ec>)
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800129a:	4b22      	ldr	r3, [pc, #136]	; (8001324 <HAL_GPIO_Init+0x2ec>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	43da      	mvns	r2, r3
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	4013      	ands	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685a      	ldr	r2, [r3, #4]
 80012ae:	2380      	movs	r3, #128	; 0x80
 80012b0:	035b      	lsls	r3, r3, #13
 80012b2:	4013      	ands	r3, r2
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012be:	4b19      	ldr	r3, [pc, #100]	; (8001324 <HAL_GPIO_Init+0x2ec>)
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012c4:	4b17      	ldr	r3, [pc, #92]	; (8001324 <HAL_GPIO_Init+0x2ec>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	43da      	mvns	r2, r3
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	4013      	ands	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	2380      	movs	r3, #128	; 0x80
 80012da:	039b      	lsls	r3, r3, #14
 80012dc:	4013      	ands	r3, r2
 80012de:	d003      	beq.n	80012e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012e8:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <HAL_GPIO_Init+0x2ec>)
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	3301      	adds	r3, #1
 80012f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	40da      	lsrs	r2, r3
 80012fc:	1e13      	subs	r3, r2, #0
 80012fe:	d000      	beq.n	8001302 <HAL_GPIO_Init+0x2ca>
 8001300:	e6a2      	b.n	8001048 <HAL_GPIO_Init+0x10>
  } 
}
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	46bd      	mov	sp, r7
 8001306:	b006      	add	sp, #24
 8001308:	bd80      	pop	{r7, pc}
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	40021000 	.word	0x40021000
 8001310:	40010000 	.word	0x40010000
 8001314:	48000400 	.word	0x48000400
 8001318:	48000800 	.word	0x48000800
 800131c:	48000c00 	.word	0x48000c00
 8001320:	48001000 	.word	0x48001000
 8001324:	40010400 	.word	0x40010400

08001328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	0008      	movs	r0, r1
 8001332:	0011      	movs	r1, r2
 8001334:	1cbb      	adds	r3, r7, #2
 8001336:	1c02      	adds	r2, r0, #0
 8001338:	801a      	strh	r2, [r3, #0]
 800133a:	1c7b      	adds	r3, r7, #1
 800133c:	1c0a      	adds	r2, r1, #0
 800133e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001340:	1c7b      	adds	r3, r7, #1
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d004      	beq.n	8001352 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001348:	1cbb      	adds	r3, r7, #2
 800134a:	881a      	ldrh	r2, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001350:	e003      	b.n	800135a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001352:	1cbb      	adds	r3, r7, #2
 8001354:	881a      	ldrh	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	629a      	str	r2, [r3, #40]	; 0x28
}
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	46bd      	mov	sp, r7
 800135e:	b002      	add	sp, #8
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b084      	sub	sp, #16
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
 800136a:	000a      	movs	r2, r1
 800136c:	1cbb      	adds	r3, r7, #2
 800136e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001376:	1cbb      	adds	r3, r7, #2
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	4013      	ands	r3, r2
 800137e:	041a      	lsls	r2, r3, #16
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	43db      	mvns	r3, r3
 8001384:	1cb9      	adds	r1, r7, #2
 8001386:	8809      	ldrh	r1, [r1, #0]
 8001388:	400b      	ands	r3, r1
 800138a:	431a      	orrs	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	619a      	str	r2, [r3, #24]
}
 8001390:	46c0      	nop			; (mov r8, r8)
 8001392:	46bd      	mov	sp, r7
 8001394:	b004      	add	sp, #16
 8001396:	bd80      	pop	{r7, pc}

08001398 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	0002      	movs	r2, r0
 80013a0:	1dbb      	adds	r3, r7, #6
 80013a2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	1dba      	adds	r2, r7, #6
 80013aa:	8812      	ldrh	r2, [r2, #0]
 80013ac:	4013      	ands	r3, r2
 80013ae:	d008      	beq.n	80013c2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80013b2:	1dba      	adds	r2, r7, #6
 80013b4:	8812      	ldrh	r2, [r2, #0]
 80013b6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013b8:	1dbb      	adds	r3, r7, #6
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	0018      	movs	r0, r3
 80013be:	f000 f807 	bl	80013d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	46bd      	mov	sp, r7
 80013c6:	b002      	add	sp, #8
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	40010400 	.word	0x40010400

080013d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	0002      	movs	r2, r0
 80013d8:	1dbb      	adds	r3, r7, #6
 80013da:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 80013dc:	46c0      	nop			; (mov r8, r8)
 80013de:	46bd      	mov	sp, r7
 80013e0:	b002      	add	sp, #8
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b088      	sub	sp, #32
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d102      	bne.n	80013f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	f000 fb76 	bl	8001ae4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2201      	movs	r2, #1
 80013fe:	4013      	ands	r3, r2
 8001400:	d100      	bne.n	8001404 <HAL_RCC_OscConfig+0x20>
 8001402:	e08e      	b.n	8001522 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001404:	4bc5      	ldr	r3, [pc, #788]	; (800171c <HAL_RCC_OscConfig+0x338>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	220c      	movs	r2, #12
 800140a:	4013      	ands	r3, r2
 800140c:	2b04      	cmp	r3, #4
 800140e:	d00e      	beq.n	800142e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001410:	4bc2      	ldr	r3, [pc, #776]	; (800171c <HAL_RCC_OscConfig+0x338>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	220c      	movs	r2, #12
 8001416:	4013      	ands	r3, r2
 8001418:	2b08      	cmp	r3, #8
 800141a:	d117      	bne.n	800144c <HAL_RCC_OscConfig+0x68>
 800141c:	4bbf      	ldr	r3, [pc, #764]	; (800171c <HAL_RCC_OscConfig+0x338>)
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	23c0      	movs	r3, #192	; 0xc0
 8001422:	025b      	lsls	r3, r3, #9
 8001424:	401a      	ands	r2, r3
 8001426:	2380      	movs	r3, #128	; 0x80
 8001428:	025b      	lsls	r3, r3, #9
 800142a:	429a      	cmp	r2, r3
 800142c:	d10e      	bne.n	800144c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800142e:	4bbb      	ldr	r3, [pc, #748]	; (800171c <HAL_RCC_OscConfig+0x338>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	2380      	movs	r3, #128	; 0x80
 8001434:	029b      	lsls	r3, r3, #10
 8001436:	4013      	ands	r3, r2
 8001438:	d100      	bne.n	800143c <HAL_RCC_OscConfig+0x58>
 800143a:	e071      	b.n	8001520 <HAL_RCC_OscConfig+0x13c>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d000      	beq.n	8001446 <HAL_RCC_OscConfig+0x62>
 8001444:	e06c      	b.n	8001520 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	f000 fb4c 	bl	8001ae4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d107      	bne.n	8001464 <HAL_RCC_OscConfig+0x80>
 8001454:	4bb1      	ldr	r3, [pc, #708]	; (800171c <HAL_RCC_OscConfig+0x338>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4bb0      	ldr	r3, [pc, #704]	; (800171c <HAL_RCC_OscConfig+0x338>)
 800145a:	2180      	movs	r1, #128	; 0x80
 800145c:	0249      	lsls	r1, r1, #9
 800145e:	430a      	orrs	r2, r1
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	e02f      	b.n	80014c4 <HAL_RCC_OscConfig+0xe0>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d10c      	bne.n	8001486 <HAL_RCC_OscConfig+0xa2>
 800146c:	4bab      	ldr	r3, [pc, #684]	; (800171c <HAL_RCC_OscConfig+0x338>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4baa      	ldr	r3, [pc, #680]	; (800171c <HAL_RCC_OscConfig+0x338>)
 8001472:	49ab      	ldr	r1, [pc, #684]	; (8001720 <HAL_RCC_OscConfig+0x33c>)
 8001474:	400a      	ands	r2, r1
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	4ba8      	ldr	r3, [pc, #672]	; (800171c <HAL_RCC_OscConfig+0x338>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4ba7      	ldr	r3, [pc, #668]	; (800171c <HAL_RCC_OscConfig+0x338>)
 800147e:	49a9      	ldr	r1, [pc, #676]	; (8001724 <HAL_RCC_OscConfig+0x340>)
 8001480:	400a      	ands	r2, r1
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	e01e      	b.n	80014c4 <HAL_RCC_OscConfig+0xe0>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b05      	cmp	r3, #5
 800148c:	d10e      	bne.n	80014ac <HAL_RCC_OscConfig+0xc8>
 800148e:	4ba3      	ldr	r3, [pc, #652]	; (800171c <HAL_RCC_OscConfig+0x338>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	4ba2      	ldr	r3, [pc, #648]	; (800171c <HAL_RCC_OscConfig+0x338>)
 8001494:	2180      	movs	r1, #128	; 0x80
 8001496:	02c9      	lsls	r1, r1, #11
 8001498:	430a      	orrs	r2, r1
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	4b9f      	ldr	r3, [pc, #636]	; (800171c <HAL_RCC_OscConfig+0x338>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b9e      	ldr	r3, [pc, #632]	; (800171c <HAL_RCC_OscConfig+0x338>)
 80014a2:	2180      	movs	r1, #128	; 0x80
 80014a4:	0249      	lsls	r1, r1, #9
 80014a6:	430a      	orrs	r2, r1
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	e00b      	b.n	80014c4 <HAL_RCC_OscConfig+0xe0>
 80014ac:	4b9b      	ldr	r3, [pc, #620]	; (800171c <HAL_RCC_OscConfig+0x338>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b9a      	ldr	r3, [pc, #616]	; (800171c <HAL_RCC_OscConfig+0x338>)
 80014b2:	499b      	ldr	r1, [pc, #620]	; (8001720 <HAL_RCC_OscConfig+0x33c>)
 80014b4:	400a      	ands	r2, r1
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	4b98      	ldr	r3, [pc, #608]	; (800171c <HAL_RCC_OscConfig+0x338>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b97      	ldr	r3, [pc, #604]	; (800171c <HAL_RCC_OscConfig+0x338>)
 80014be:	4999      	ldr	r1, [pc, #612]	; (8001724 <HAL_RCC_OscConfig+0x340>)
 80014c0:	400a      	ands	r2, r1
 80014c2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d014      	beq.n	80014f6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014cc:	f7ff facc 	bl	8000a68 <HAL_GetTick>
 80014d0:	0003      	movs	r3, r0
 80014d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014d6:	f7ff fac7 	bl	8000a68 <HAL_GetTick>
 80014da:	0002      	movs	r2, r0
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b64      	cmp	r3, #100	; 0x64
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e2fd      	b.n	8001ae4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e8:	4b8c      	ldr	r3, [pc, #560]	; (800171c <HAL_RCC_OscConfig+0x338>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	2380      	movs	r3, #128	; 0x80
 80014ee:	029b      	lsls	r3, r3, #10
 80014f0:	4013      	ands	r3, r2
 80014f2:	d0f0      	beq.n	80014d6 <HAL_RCC_OscConfig+0xf2>
 80014f4:	e015      	b.n	8001522 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f6:	f7ff fab7 	bl	8000a68 <HAL_GetTick>
 80014fa:	0003      	movs	r3, r0
 80014fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001500:	f7ff fab2 	bl	8000a68 <HAL_GetTick>
 8001504:	0002      	movs	r2, r0
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b64      	cmp	r3, #100	; 0x64
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e2e8      	b.n	8001ae4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001512:	4b82      	ldr	r3, [pc, #520]	; (800171c <HAL_RCC_OscConfig+0x338>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	2380      	movs	r3, #128	; 0x80
 8001518:	029b      	lsls	r3, r3, #10
 800151a:	4013      	ands	r3, r2
 800151c:	d1f0      	bne.n	8001500 <HAL_RCC_OscConfig+0x11c>
 800151e:	e000      	b.n	8001522 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001520:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2202      	movs	r2, #2
 8001528:	4013      	ands	r3, r2
 800152a:	d100      	bne.n	800152e <HAL_RCC_OscConfig+0x14a>
 800152c:	e06c      	b.n	8001608 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800152e:	4b7b      	ldr	r3, [pc, #492]	; (800171c <HAL_RCC_OscConfig+0x338>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	220c      	movs	r2, #12
 8001534:	4013      	ands	r3, r2
 8001536:	d00e      	beq.n	8001556 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001538:	4b78      	ldr	r3, [pc, #480]	; (800171c <HAL_RCC_OscConfig+0x338>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	220c      	movs	r2, #12
 800153e:	4013      	ands	r3, r2
 8001540:	2b08      	cmp	r3, #8
 8001542:	d11f      	bne.n	8001584 <HAL_RCC_OscConfig+0x1a0>
 8001544:	4b75      	ldr	r3, [pc, #468]	; (800171c <HAL_RCC_OscConfig+0x338>)
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	23c0      	movs	r3, #192	; 0xc0
 800154a:	025b      	lsls	r3, r3, #9
 800154c:	401a      	ands	r2, r3
 800154e:	2380      	movs	r3, #128	; 0x80
 8001550:	021b      	lsls	r3, r3, #8
 8001552:	429a      	cmp	r2, r3
 8001554:	d116      	bne.n	8001584 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001556:	4b71      	ldr	r3, [pc, #452]	; (800171c <HAL_RCC_OscConfig+0x338>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2202      	movs	r2, #2
 800155c:	4013      	ands	r3, r2
 800155e:	d005      	beq.n	800156c <HAL_RCC_OscConfig+0x188>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d001      	beq.n	800156c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e2bb      	b.n	8001ae4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156c:	4b6b      	ldr	r3, [pc, #428]	; (800171c <HAL_RCC_OscConfig+0x338>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	22f8      	movs	r2, #248	; 0xf8
 8001572:	4393      	bics	r3, r2
 8001574:	0019      	movs	r1, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	00da      	lsls	r2, r3, #3
 800157c:	4b67      	ldr	r3, [pc, #412]	; (800171c <HAL_RCC_OscConfig+0x338>)
 800157e:	430a      	orrs	r2, r1
 8001580:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001582:	e041      	b.n	8001608 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d024      	beq.n	80015d6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800158c:	4b63      	ldr	r3, [pc, #396]	; (800171c <HAL_RCC_OscConfig+0x338>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b62      	ldr	r3, [pc, #392]	; (800171c <HAL_RCC_OscConfig+0x338>)
 8001592:	2101      	movs	r1, #1
 8001594:	430a      	orrs	r2, r1
 8001596:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001598:	f7ff fa66 	bl	8000a68 <HAL_GetTick>
 800159c:	0003      	movs	r3, r0
 800159e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015a2:	f7ff fa61 	bl	8000a68 <HAL_GetTick>
 80015a6:	0002      	movs	r2, r0
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e297      	b.n	8001ae4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b4:	4b59      	ldr	r3, [pc, #356]	; (800171c <HAL_RCC_OscConfig+0x338>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2202      	movs	r2, #2
 80015ba:	4013      	ands	r3, r2
 80015bc:	d0f1      	beq.n	80015a2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015be:	4b57      	ldr	r3, [pc, #348]	; (800171c <HAL_RCC_OscConfig+0x338>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	22f8      	movs	r2, #248	; 0xf8
 80015c4:	4393      	bics	r3, r2
 80015c6:	0019      	movs	r1, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	00da      	lsls	r2, r3, #3
 80015ce:	4b53      	ldr	r3, [pc, #332]	; (800171c <HAL_RCC_OscConfig+0x338>)
 80015d0:	430a      	orrs	r2, r1
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	e018      	b.n	8001608 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015d6:	4b51      	ldr	r3, [pc, #324]	; (800171c <HAL_RCC_OscConfig+0x338>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	4b50      	ldr	r3, [pc, #320]	; (800171c <HAL_RCC_OscConfig+0x338>)
 80015dc:	2101      	movs	r1, #1
 80015de:	438a      	bics	r2, r1
 80015e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e2:	f7ff fa41 	bl	8000a68 <HAL_GetTick>
 80015e6:	0003      	movs	r3, r0
 80015e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ec:	f7ff fa3c 	bl	8000a68 <HAL_GetTick>
 80015f0:	0002      	movs	r2, r0
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e272      	b.n	8001ae4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015fe:	4b47      	ldr	r3, [pc, #284]	; (800171c <HAL_RCC_OscConfig+0x338>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2202      	movs	r2, #2
 8001604:	4013      	ands	r3, r2
 8001606:	d1f1      	bne.n	80015ec <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2208      	movs	r2, #8
 800160e:	4013      	ands	r3, r2
 8001610:	d036      	beq.n	8001680 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d019      	beq.n	800164e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800161a:	4b40      	ldr	r3, [pc, #256]	; (800171c <HAL_RCC_OscConfig+0x338>)
 800161c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800161e:	4b3f      	ldr	r3, [pc, #252]	; (800171c <HAL_RCC_OscConfig+0x338>)
 8001620:	2101      	movs	r1, #1
 8001622:	430a      	orrs	r2, r1
 8001624:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001626:	f7ff fa1f 	bl	8000a68 <HAL_GetTick>
 800162a:	0003      	movs	r3, r0
 800162c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001630:	f7ff fa1a 	bl	8000a68 <HAL_GetTick>
 8001634:	0002      	movs	r2, r0
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e250      	b.n	8001ae4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001642:	4b36      	ldr	r3, [pc, #216]	; (800171c <HAL_RCC_OscConfig+0x338>)
 8001644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001646:	2202      	movs	r2, #2
 8001648:	4013      	ands	r3, r2
 800164a:	d0f1      	beq.n	8001630 <HAL_RCC_OscConfig+0x24c>
 800164c:	e018      	b.n	8001680 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800164e:	4b33      	ldr	r3, [pc, #204]	; (800171c <HAL_RCC_OscConfig+0x338>)
 8001650:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001652:	4b32      	ldr	r3, [pc, #200]	; (800171c <HAL_RCC_OscConfig+0x338>)
 8001654:	2101      	movs	r1, #1
 8001656:	438a      	bics	r2, r1
 8001658:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165a:	f7ff fa05 	bl	8000a68 <HAL_GetTick>
 800165e:	0003      	movs	r3, r0
 8001660:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001664:	f7ff fa00 	bl	8000a68 <HAL_GetTick>
 8001668:	0002      	movs	r2, r0
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e236      	b.n	8001ae4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001676:	4b29      	ldr	r3, [pc, #164]	; (800171c <HAL_RCC_OscConfig+0x338>)
 8001678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167a:	2202      	movs	r2, #2
 800167c:	4013      	ands	r3, r2
 800167e:	d1f1      	bne.n	8001664 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2204      	movs	r2, #4
 8001686:	4013      	ands	r3, r2
 8001688:	d100      	bne.n	800168c <HAL_RCC_OscConfig+0x2a8>
 800168a:	e0b5      	b.n	80017f8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800168c:	231f      	movs	r3, #31
 800168e:	18fb      	adds	r3, r7, r3
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001694:	4b21      	ldr	r3, [pc, #132]	; (800171c <HAL_RCC_OscConfig+0x338>)
 8001696:	69da      	ldr	r2, [r3, #28]
 8001698:	2380      	movs	r3, #128	; 0x80
 800169a:	055b      	lsls	r3, r3, #21
 800169c:	4013      	ands	r3, r2
 800169e:	d111      	bne.n	80016c4 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a0:	4b1e      	ldr	r3, [pc, #120]	; (800171c <HAL_RCC_OscConfig+0x338>)
 80016a2:	69da      	ldr	r2, [r3, #28]
 80016a4:	4b1d      	ldr	r3, [pc, #116]	; (800171c <HAL_RCC_OscConfig+0x338>)
 80016a6:	2180      	movs	r1, #128	; 0x80
 80016a8:	0549      	lsls	r1, r1, #21
 80016aa:	430a      	orrs	r2, r1
 80016ac:	61da      	str	r2, [r3, #28]
 80016ae:	4b1b      	ldr	r3, [pc, #108]	; (800171c <HAL_RCC_OscConfig+0x338>)
 80016b0:	69da      	ldr	r2, [r3, #28]
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	055b      	lsls	r3, r3, #21
 80016b6:	4013      	ands	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016bc:	231f      	movs	r3, #31
 80016be:	18fb      	adds	r3, r7, r3
 80016c0:	2201      	movs	r2, #1
 80016c2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c4:	4b18      	ldr	r3, [pc, #96]	; (8001728 <HAL_RCC_OscConfig+0x344>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	2380      	movs	r3, #128	; 0x80
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	4013      	ands	r3, r2
 80016ce:	d11a      	bne.n	8001706 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016d0:	4b15      	ldr	r3, [pc, #84]	; (8001728 <HAL_RCC_OscConfig+0x344>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b14      	ldr	r3, [pc, #80]	; (8001728 <HAL_RCC_OscConfig+0x344>)
 80016d6:	2180      	movs	r1, #128	; 0x80
 80016d8:	0049      	lsls	r1, r1, #1
 80016da:	430a      	orrs	r2, r1
 80016dc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016de:	f7ff f9c3 	bl	8000a68 <HAL_GetTick>
 80016e2:	0003      	movs	r3, r0
 80016e4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e8:	f7ff f9be 	bl	8000a68 <HAL_GetTick>
 80016ec:	0002      	movs	r2, r0
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b64      	cmp	r3, #100	; 0x64
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e1f4      	b.n	8001ae4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fa:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <HAL_RCC_OscConfig+0x344>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	2380      	movs	r3, #128	; 0x80
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	4013      	ands	r3, r2
 8001704:	d0f0      	beq.n	80016e8 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d10e      	bne.n	800172c <HAL_RCC_OscConfig+0x348>
 800170e:	4b03      	ldr	r3, [pc, #12]	; (800171c <HAL_RCC_OscConfig+0x338>)
 8001710:	6a1a      	ldr	r2, [r3, #32]
 8001712:	4b02      	ldr	r3, [pc, #8]	; (800171c <HAL_RCC_OscConfig+0x338>)
 8001714:	2101      	movs	r1, #1
 8001716:	430a      	orrs	r2, r1
 8001718:	621a      	str	r2, [r3, #32]
 800171a:	e035      	b.n	8001788 <HAL_RCC_OscConfig+0x3a4>
 800171c:	40021000 	.word	0x40021000
 8001720:	fffeffff 	.word	0xfffeffff
 8001724:	fffbffff 	.word	0xfffbffff
 8001728:	40007000 	.word	0x40007000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d10c      	bne.n	800174e <HAL_RCC_OscConfig+0x36a>
 8001734:	4bca      	ldr	r3, [pc, #808]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 8001736:	6a1a      	ldr	r2, [r3, #32]
 8001738:	4bc9      	ldr	r3, [pc, #804]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 800173a:	2101      	movs	r1, #1
 800173c:	438a      	bics	r2, r1
 800173e:	621a      	str	r2, [r3, #32]
 8001740:	4bc7      	ldr	r3, [pc, #796]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 8001742:	6a1a      	ldr	r2, [r3, #32]
 8001744:	4bc6      	ldr	r3, [pc, #792]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 8001746:	2104      	movs	r1, #4
 8001748:	438a      	bics	r2, r1
 800174a:	621a      	str	r2, [r3, #32]
 800174c:	e01c      	b.n	8001788 <HAL_RCC_OscConfig+0x3a4>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2b05      	cmp	r3, #5
 8001754:	d10c      	bne.n	8001770 <HAL_RCC_OscConfig+0x38c>
 8001756:	4bc2      	ldr	r3, [pc, #776]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 8001758:	6a1a      	ldr	r2, [r3, #32]
 800175a:	4bc1      	ldr	r3, [pc, #772]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 800175c:	2104      	movs	r1, #4
 800175e:	430a      	orrs	r2, r1
 8001760:	621a      	str	r2, [r3, #32]
 8001762:	4bbf      	ldr	r3, [pc, #764]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 8001764:	6a1a      	ldr	r2, [r3, #32]
 8001766:	4bbe      	ldr	r3, [pc, #760]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 8001768:	2101      	movs	r1, #1
 800176a:	430a      	orrs	r2, r1
 800176c:	621a      	str	r2, [r3, #32]
 800176e:	e00b      	b.n	8001788 <HAL_RCC_OscConfig+0x3a4>
 8001770:	4bbb      	ldr	r3, [pc, #748]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 8001772:	6a1a      	ldr	r2, [r3, #32]
 8001774:	4bba      	ldr	r3, [pc, #744]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 8001776:	2101      	movs	r1, #1
 8001778:	438a      	bics	r2, r1
 800177a:	621a      	str	r2, [r3, #32]
 800177c:	4bb8      	ldr	r3, [pc, #736]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 800177e:	6a1a      	ldr	r2, [r3, #32]
 8001780:	4bb7      	ldr	r3, [pc, #732]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 8001782:	2104      	movs	r1, #4
 8001784:	438a      	bics	r2, r1
 8001786:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d014      	beq.n	80017ba <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001790:	f7ff f96a 	bl	8000a68 <HAL_GetTick>
 8001794:	0003      	movs	r3, r0
 8001796:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001798:	e009      	b.n	80017ae <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800179a:	f7ff f965 	bl	8000a68 <HAL_GetTick>
 800179e:	0002      	movs	r2, r0
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	4aaf      	ldr	r2, [pc, #700]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e19a      	b.n	8001ae4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ae:	4bac      	ldr	r3, [pc, #688]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 80017b0:	6a1b      	ldr	r3, [r3, #32]
 80017b2:	2202      	movs	r2, #2
 80017b4:	4013      	ands	r3, r2
 80017b6:	d0f0      	beq.n	800179a <HAL_RCC_OscConfig+0x3b6>
 80017b8:	e013      	b.n	80017e2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ba:	f7ff f955 	bl	8000a68 <HAL_GetTick>
 80017be:	0003      	movs	r3, r0
 80017c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c2:	e009      	b.n	80017d8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017c4:	f7ff f950 	bl	8000a68 <HAL_GetTick>
 80017c8:	0002      	movs	r2, r0
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	4aa5      	ldr	r2, [pc, #660]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e185      	b.n	8001ae4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d8:	4ba1      	ldr	r3, [pc, #644]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	2202      	movs	r2, #2
 80017de:	4013      	ands	r3, r2
 80017e0:	d1f0      	bne.n	80017c4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017e2:	231f      	movs	r3, #31
 80017e4:	18fb      	adds	r3, r7, r3
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d105      	bne.n	80017f8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ec:	4b9c      	ldr	r3, [pc, #624]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 80017ee:	69da      	ldr	r2, [r3, #28]
 80017f0:	4b9b      	ldr	r3, [pc, #620]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 80017f2:	499d      	ldr	r1, [pc, #628]	; (8001a68 <HAL_RCC_OscConfig+0x684>)
 80017f4:	400a      	ands	r2, r1
 80017f6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2210      	movs	r2, #16
 80017fe:	4013      	ands	r3, r2
 8001800:	d063      	beq.n	80018ca <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d12a      	bne.n	8001860 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800180a:	4b95      	ldr	r3, [pc, #596]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 800180c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800180e:	4b94      	ldr	r3, [pc, #592]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 8001810:	2104      	movs	r1, #4
 8001812:	430a      	orrs	r2, r1
 8001814:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001816:	4b92      	ldr	r3, [pc, #584]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 8001818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800181a:	4b91      	ldr	r3, [pc, #580]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 800181c:	2101      	movs	r1, #1
 800181e:	430a      	orrs	r2, r1
 8001820:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001822:	f7ff f921 	bl	8000a68 <HAL_GetTick>
 8001826:	0003      	movs	r3, r0
 8001828:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800182c:	f7ff f91c 	bl	8000a68 <HAL_GetTick>
 8001830:	0002      	movs	r2, r0
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e152      	b.n	8001ae4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800183e:	4b88      	ldr	r3, [pc, #544]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 8001840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001842:	2202      	movs	r2, #2
 8001844:	4013      	ands	r3, r2
 8001846:	d0f1      	beq.n	800182c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001848:	4b85      	ldr	r3, [pc, #532]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 800184a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800184c:	22f8      	movs	r2, #248	; 0xf8
 800184e:	4393      	bics	r3, r2
 8001850:	0019      	movs	r1, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	00da      	lsls	r2, r3, #3
 8001858:	4b81      	ldr	r3, [pc, #516]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 800185a:	430a      	orrs	r2, r1
 800185c:	635a      	str	r2, [r3, #52]	; 0x34
 800185e:	e034      	b.n	80018ca <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	3305      	adds	r3, #5
 8001866:	d111      	bne.n	800188c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001868:	4b7d      	ldr	r3, [pc, #500]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 800186a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800186c:	4b7c      	ldr	r3, [pc, #496]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 800186e:	2104      	movs	r1, #4
 8001870:	438a      	bics	r2, r1
 8001872:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001874:	4b7a      	ldr	r3, [pc, #488]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 8001876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001878:	22f8      	movs	r2, #248	; 0xf8
 800187a:	4393      	bics	r3, r2
 800187c:	0019      	movs	r1, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	00da      	lsls	r2, r3, #3
 8001884:	4b76      	ldr	r3, [pc, #472]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 8001886:	430a      	orrs	r2, r1
 8001888:	635a      	str	r2, [r3, #52]	; 0x34
 800188a:	e01e      	b.n	80018ca <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800188c:	4b74      	ldr	r3, [pc, #464]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 800188e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001890:	4b73      	ldr	r3, [pc, #460]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 8001892:	2104      	movs	r1, #4
 8001894:	430a      	orrs	r2, r1
 8001896:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001898:	4b71      	ldr	r3, [pc, #452]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 800189a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800189c:	4b70      	ldr	r3, [pc, #448]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 800189e:	2101      	movs	r1, #1
 80018a0:	438a      	bics	r2, r1
 80018a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a4:	f7ff f8e0 	bl	8000a68 <HAL_GetTick>
 80018a8:	0003      	movs	r3, r0
 80018aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018ae:	f7ff f8db 	bl	8000a68 <HAL_GetTick>
 80018b2:	0002      	movs	r2, r0
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e111      	b.n	8001ae4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018c0:	4b67      	ldr	r3, [pc, #412]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 80018c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c4:	2202      	movs	r2, #2
 80018c6:	4013      	ands	r3, r2
 80018c8:	d1f1      	bne.n	80018ae <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2220      	movs	r2, #32
 80018d0:	4013      	ands	r3, r2
 80018d2:	d05c      	beq.n	800198e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80018d4:	4b62      	ldr	r3, [pc, #392]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	220c      	movs	r2, #12
 80018da:	4013      	ands	r3, r2
 80018dc:	2b0c      	cmp	r3, #12
 80018de:	d00e      	beq.n	80018fe <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80018e0:	4b5f      	ldr	r3, [pc, #380]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	220c      	movs	r2, #12
 80018e6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80018e8:	2b08      	cmp	r3, #8
 80018ea:	d114      	bne.n	8001916 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80018ec:	4b5c      	ldr	r3, [pc, #368]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	23c0      	movs	r3, #192	; 0xc0
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	401a      	ands	r2, r3
 80018f6:	23c0      	movs	r3, #192	; 0xc0
 80018f8:	025b      	lsls	r3, r3, #9
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d10b      	bne.n	8001916 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80018fe:	4b58      	ldr	r3, [pc, #352]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 8001900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001902:	2380      	movs	r3, #128	; 0x80
 8001904:	025b      	lsls	r3, r3, #9
 8001906:	4013      	ands	r3, r2
 8001908:	d040      	beq.n	800198c <HAL_RCC_OscConfig+0x5a8>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d03c      	beq.n	800198c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e0e6      	b.n	8001ae4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d01b      	beq.n	8001956 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800191e:	4b50      	ldr	r3, [pc, #320]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 8001920:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001922:	4b4f      	ldr	r3, [pc, #316]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 8001924:	2180      	movs	r1, #128	; 0x80
 8001926:	0249      	lsls	r1, r1, #9
 8001928:	430a      	orrs	r2, r1
 800192a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192c:	f7ff f89c 	bl	8000a68 <HAL_GetTick>
 8001930:	0003      	movs	r3, r0
 8001932:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001936:	f7ff f897 	bl	8000a68 <HAL_GetTick>
 800193a:	0002      	movs	r2, r0
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e0cd      	b.n	8001ae4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001948:	4b45      	ldr	r3, [pc, #276]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 800194a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	025b      	lsls	r3, r3, #9
 8001950:	4013      	ands	r3, r2
 8001952:	d0f0      	beq.n	8001936 <HAL_RCC_OscConfig+0x552>
 8001954:	e01b      	b.n	800198e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001956:	4b42      	ldr	r3, [pc, #264]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 8001958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800195a:	4b41      	ldr	r3, [pc, #260]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 800195c:	4943      	ldr	r1, [pc, #268]	; (8001a6c <HAL_RCC_OscConfig+0x688>)
 800195e:	400a      	ands	r2, r1
 8001960:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001962:	f7ff f881 	bl	8000a68 <HAL_GetTick>
 8001966:	0003      	movs	r3, r0
 8001968:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800196c:	f7ff f87c 	bl	8000a68 <HAL_GetTick>
 8001970:	0002      	movs	r2, r0
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e0b2      	b.n	8001ae4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800197e:	4b38      	ldr	r3, [pc, #224]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 8001980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001982:	2380      	movs	r3, #128	; 0x80
 8001984:	025b      	lsls	r3, r3, #9
 8001986:	4013      	ands	r3, r2
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0x588>
 800198a:	e000      	b.n	800198e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800198c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001992:	2b00      	cmp	r3, #0
 8001994:	d100      	bne.n	8001998 <HAL_RCC_OscConfig+0x5b4>
 8001996:	e0a4      	b.n	8001ae2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001998:	4b31      	ldr	r3, [pc, #196]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	220c      	movs	r2, #12
 800199e:	4013      	ands	r3, r2
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	d100      	bne.n	80019a6 <HAL_RCC_OscConfig+0x5c2>
 80019a4:	e078      	b.n	8001a98 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d14c      	bne.n	8001a48 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ae:	4b2c      	ldr	r3, [pc, #176]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	4b2b      	ldr	r3, [pc, #172]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 80019b4:	492e      	ldr	r1, [pc, #184]	; (8001a70 <HAL_RCC_OscConfig+0x68c>)
 80019b6:	400a      	ands	r2, r1
 80019b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ba:	f7ff f855 	bl	8000a68 <HAL_GetTick>
 80019be:	0003      	movs	r3, r0
 80019c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c4:	f7ff f850 	bl	8000a68 <HAL_GetTick>
 80019c8:	0002      	movs	r2, r0
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e086      	b.n	8001ae4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d6:	4b22      	ldr	r3, [pc, #136]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	049b      	lsls	r3, r3, #18
 80019de:	4013      	ands	r3, r2
 80019e0:	d1f0      	bne.n	80019c4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019e2:	4b1f      	ldr	r3, [pc, #124]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 80019e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e6:	220f      	movs	r2, #15
 80019e8:	4393      	bics	r3, r2
 80019ea:	0019      	movs	r1, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019f0:	4b1b      	ldr	r3, [pc, #108]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 80019f2:	430a      	orrs	r2, r1
 80019f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80019f6:	4b1a      	ldr	r3, [pc, #104]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	4a1e      	ldr	r2, [pc, #120]	; (8001a74 <HAL_RCC_OscConfig+0x690>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	0019      	movs	r1, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a08:	431a      	orrs	r2, r3
 8001a0a:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a10:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 8001a16:	2180      	movs	r1, #128	; 0x80
 8001a18:	0449      	lsls	r1, r1, #17
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1e:	f7ff f823 	bl	8000a68 <HAL_GetTick>
 8001a22:	0003      	movs	r3, r0
 8001a24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a28:	f7ff f81e 	bl	8000a68 <HAL_GetTick>
 8001a2c:	0002      	movs	r2, r0
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e054      	b.n	8001ae4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	2380      	movs	r3, #128	; 0x80
 8001a40:	049b      	lsls	r3, r3, #18
 8001a42:	4013      	ands	r3, r2
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0x644>
 8001a46:	e04c      	b.n	8001ae2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a48:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <HAL_RCC_OscConfig+0x67c>)
 8001a4e:	4908      	ldr	r1, [pc, #32]	; (8001a70 <HAL_RCC_OscConfig+0x68c>)
 8001a50:	400a      	ands	r2, r1
 8001a52:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a54:	f7ff f808 	bl	8000a68 <HAL_GetTick>
 8001a58:	0003      	movs	r3, r0
 8001a5a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a5c:	e015      	b.n	8001a8a <HAL_RCC_OscConfig+0x6a6>
 8001a5e:	46c0      	nop			; (mov r8, r8)
 8001a60:	40021000 	.word	0x40021000
 8001a64:	00001388 	.word	0x00001388
 8001a68:	efffffff 	.word	0xefffffff
 8001a6c:	fffeffff 	.word	0xfffeffff
 8001a70:	feffffff 	.word	0xfeffffff
 8001a74:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a78:	f7fe fff6 	bl	8000a68 <HAL_GetTick>
 8001a7c:	0002      	movs	r2, r0
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e02c      	b.n	8001ae4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a8a:	4b18      	ldr	r3, [pc, #96]	; (8001aec <HAL_RCC_OscConfig+0x708>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	2380      	movs	r3, #128	; 0x80
 8001a90:	049b      	lsls	r3, r3, #18
 8001a92:	4013      	ands	r3, r2
 8001a94:	d1f0      	bne.n	8001a78 <HAL_RCC_OscConfig+0x694>
 8001a96:	e024      	b.n	8001ae2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d101      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e01f      	b.n	8001ae4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <HAL_RCC_OscConfig+0x708>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <HAL_RCC_OscConfig+0x708>)
 8001aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aae:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	23c0      	movs	r3, #192	; 0xc0
 8001ab4:	025b      	lsls	r3, r3, #9
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d10e      	bne.n	8001ade <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	220f      	movs	r2, #15
 8001ac4:	401a      	ands	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d107      	bne.n	8001ade <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	23f0      	movs	r3, #240	; 0xf0
 8001ad2:	039b      	lsls	r3, r3, #14
 8001ad4:	401a      	ands	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d001      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e000      	b.n	8001ae4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	b008      	add	sp, #32
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40021000 	.word	0x40021000

08001af0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0bf      	b.n	8001c84 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b04:	4b61      	ldr	r3, [pc, #388]	; (8001c8c <HAL_RCC_ClockConfig+0x19c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d911      	bls.n	8001b36 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b12:	4b5e      	ldr	r3, [pc, #376]	; (8001c8c <HAL_RCC_ClockConfig+0x19c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2201      	movs	r2, #1
 8001b18:	4393      	bics	r3, r2
 8001b1a:	0019      	movs	r1, r3
 8001b1c:	4b5b      	ldr	r3, [pc, #364]	; (8001c8c <HAL_RCC_ClockConfig+0x19c>)
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	430a      	orrs	r2, r1
 8001b22:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b24:	4b59      	ldr	r3, [pc, #356]	; (8001c8c <HAL_RCC_ClockConfig+0x19c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d001      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e0a6      	b.n	8001c84 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d015      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2204      	movs	r2, #4
 8001b46:	4013      	ands	r3, r2
 8001b48:	d006      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b4a:	4b51      	ldr	r3, [pc, #324]	; (8001c90 <HAL_RCC_ClockConfig+0x1a0>)
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	4b50      	ldr	r3, [pc, #320]	; (8001c90 <HAL_RCC_ClockConfig+0x1a0>)
 8001b50:	21e0      	movs	r1, #224	; 0xe0
 8001b52:	00c9      	lsls	r1, r1, #3
 8001b54:	430a      	orrs	r2, r1
 8001b56:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b58:	4b4d      	ldr	r3, [pc, #308]	; (8001c90 <HAL_RCC_ClockConfig+0x1a0>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	22f0      	movs	r2, #240	; 0xf0
 8001b5e:	4393      	bics	r3, r2
 8001b60:	0019      	movs	r1, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	4b4a      	ldr	r3, [pc, #296]	; (8001c90 <HAL_RCC_ClockConfig+0x1a0>)
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2201      	movs	r2, #1
 8001b72:	4013      	ands	r3, r2
 8001b74:	d04c      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d107      	bne.n	8001b8e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7e:	4b44      	ldr	r3, [pc, #272]	; (8001c90 <HAL_RCC_ClockConfig+0x1a0>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	2380      	movs	r3, #128	; 0x80
 8001b84:	029b      	lsls	r3, r3, #10
 8001b86:	4013      	ands	r3, r2
 8001b88:	d120      	bne.n	8001bcc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e07a      	b.n	8001c84 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d107      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b96:	4b3e      	ldr	r3, [pc, #248]	; (8001c90 <HAL_RCC_ClockConfig+0x1a0>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	2380      	movs	r3, #128	; 0x80
 8001b9c:	049b      	lsls	r3, r3, #18
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	d114      	bne.n	8001bcc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e06e      	b.n	8001c84 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b03      	cmp	r3, #3
 8001bac:	d107      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001bae:	4b38      	ldr	r3, [pc, #224]	; (8001c90 <HAL_RCC_ClockConfig+0x1a0>)
 8001bb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bb2:	2380      	movs	r3, #128	; 0x80
 8001bb4:	025b      	lsls	r3, r3, #9
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d108      	bne.n	8001bcc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e062      	b.n	8001c84 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bbe:	4b34      	ldr	r3, [pc, #208]	; (8001c90 <HAL_RCC_ClockConfig+0x1a0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d101      	bne.n	8001bcc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e05b      	b.n	8001c84 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bcc:	4b30      	ldr	r3, [pc, #192]	; (8001c90 <HAL_RCC_ClockConfig+0x1a0>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2203      	movs	r2, #3
 8001bd2:	4393      	bics	r3, r2
 8001bd4:	0019      	movs	r1, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	4b2d      	ldr	r3, [pc, #180]	; (8001c90 <HAL_RCC_ClockConfig+0x1a0>)
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001be0:	f7fe ff42 	bl	8000a68 <HAL_GetTick>
 8001be4:	0003      	movs	r3, r0
 8001be6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be8:	e009      	b.n	8001bfe <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bea:	f7fe ff3d 	bl	8000a68 <HAL_GetTick>
 8001bee:	0002      	movs	r2, r0
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	4a27      	ldr	r2, [pc, #156]	; (8001c94 <HAL_RCC_ClockConfig+0x1a4>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e042      	b.n	8001c84 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bfe:	4b24      	ldr	r3, [pc, #144]	; (8001c90 <HAL_RCC_ClockConfig+0x1a0>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	220c      	movs	r2, #12
 8001c04:	401a      	ands	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d1ec      	bne.n	8001bea <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c10:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <HAL_RCC_ClockConfig+0x19c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2201      	movs	r2, #1
 8001c16:	4013      	ands	r3, r2
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d211      	bcs.n	8001c42 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1e:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <HAL_RCC_ClockConfig+0x19c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2201      	movs	r2, #1
 8001c24:	4393      	bics	r3, r2
 8001c26:	0019      	movs	r1, r3
 8001c28:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <HAL_RCC_ClockConfig+0x19c>)
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c30:	4b16      	ldr	r3, [pc, #88]	; (8001c8c <HAL_RCC_ClockConfig+0x19c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2201      	movs	r2, #1
 8001c36:	4013      	ands	r3, r2
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d001      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e020      	b.n	8001c84 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2204      	movs	r2, #4
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d009      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c4c:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <HAL_RCC_ClockConfig+0x1a0>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	4a11      	ldr	r2, [pc, #68]	; (8001c98 <HAL_RCC_ClockConfig+0x1a8>)
 8001c52:	4013      	ands	r3, r2
 8001c54:	0019      	movs	r1, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	4b0d      	ldr	r3, [pc, #52]	; (8001c90 <HAL_RCC_ClockConfig+0x1a0>)
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c60:	f000 f820 	bl	8001ca4 <HAL_RCC_GetSysClockFreq>
 8001c64:	0001      	movs	r1, r0
 8001c66:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <HAL_RCC_ClockConfig+0x1a0>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	091b      	lsrs	r3, r3, #4
 8001c6c:	220f      	movs	r2, #15
 8001c6e:	4013      	ands	r3, r2
 8001c70:	4a0a      	ldr	r2, [pc, #40]	; (8001c9c <HAL_RCC_ClockConfig+0x1ac>)
 8001c72:	5cd3      	ldrb	r3, [r2, r3]
 8001c74:	000a      	movs	r2, r1
 8001c76:	40da      	lsrs	r2, r3
 8001c78:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b0>)
 8001c7a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	f7fe fead 	bl	80009dc <HAL_InitTick>
  
  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	0018      	movs	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	b004      	add	sp, #16
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40022000 	.word	0x40022000
 8001c90:	40021000 	.word	0x40021000
 8001c94:	00001388 	.word	0x00001388
 8001c98:	fffff8ff 	.word	0xfffff8ff
 8001c9c:	08002cd4 	.word	0x08002cd4
 8001ca0:	20000000 	.word	0x20000000

08001ca4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ca4:	b590      	push	{r4, r7, lr}
 8001ca6:	b08f      	sub	sp, #60	; 0x3c
 8001ca8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001caa:	2314      	movs	r3, #20
 8001cac:	18fb      	adds	r3, r7, r3
 8001cae:	4a37      	ldr	r2, [pc, #220]	; (8001d8c <HAL_RCC_GetSysClockFreq+0xe8>)
 8001cb0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001cb2:	c313      	stmia	r3!, {r0, r1, r4}
 8001cb4:	6812      	ldr	r2, [r2, #0]
 8001cb6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001cb8:	1d3b      	adds	r3, r7, #4
 8001cba:	4a35      	ldr	r2, [pc, #212]	; (8001d90 <HAL_RCC_GetSysClockFreq+0xec>)
 8001cbc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001cbe:	c313      	stmia	r3!, {r0, r1, r4}
 8001cc0:	6812      	ldr	r2, [r2, #0]
 8001cc2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cc8:	2300      	movs	r3, #0
 8001cca:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ccc:	2300      	movs	r3, #0
 8001cce:	637b      	str	r3, [r7, #52]	; 0x34
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001cd8:	4b2e      	ldr	r3, [pc, #184]	; (8001d94 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce0:	220c      	movs	r2, #12
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2b08      	cmp	r3, #8
 8001ce6:	d006      	beq.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x52>
 8001ce8:	2b0c      	cmp	r3, #12
 8001cea:	d043      	beq.n	8001d74 <HAL_RCC_GetSysClockFreq+0xd0>
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	d144      	bne.n	8001d7a <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cf0:	4b29      	ldr	r3, [pc, #164]	; (8001d98 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001cf2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cf4:	e044      	b.n	8001d80 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf8:	0c9b      	lsrs	r3, r3, #18
 8001cfa:	220f      	movs	r2, #15
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	2214      	movs	r2, #20
 8001d00:	18ba      	adds	r2, r7, r2
 8001d02:	5cd3      	ldrb	r3, [r2, r3]
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d06:	4b23      	ldr	r3, [pc, #140]	; (8001d94 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0a:	220f      	movs	r2, #15
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	1d3a      	adds	r2, r7, #4
 8001d10:	5cd3      	ldrb	r3, [r2, r3]
 8001d12:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d16:	23c0      	movs	r3, #192	; 0xc0
 8001d18:	025b      	lsls	r3, r3, #9
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	2380      	movs	r3, #128	; 0x80
 8001d1e:	025b      	lsls	r3, r3, #9
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d109      	bne.n	8001d38 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d26:	481c      	ldr	r0, [pc, #112]	; (8001d98 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001d28:	f7fe f9ee 	bl	8000108 <__udivsi3>
 8001d2c:	0003      	movs	r3, r0
 8001d2e:	001a      	movs	r2, r3
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	4353      	muls	r3, r2
 8001d34:	637b      	str	r3, [r7, #52]	; 0x34
 8001d36:	e01a      	b.n	8001d6e <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d3a:	23c0      	movs	r3, #192	; 0xc0
 8001d3c:	025b      	lsls	r3, r3, #9
 8001d3e:	401a      	ands	r2, r3
 8001d40:	23c0      	movs	r3, #192	; 0xc0
 8001d42:	025b      	lsls	r3, r3, #9
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d109      	bne.n	8001d5c <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d4a:	4814      	ldr	r0, [pc, #80]	; (8001d9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d4c:	f7fe f9dc 	bl	8000108 <__udivsi3>
 8001d50:	0003      	movs	r3, r0
 8001d52:	001a      	movs	r2, r3
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	4353      	muls	r3, r2
 8001d58:	637b      	str	r3, [r7, #52]	; 0x34
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d5e:	4810      	ldr	r0, [pc, #64]	; (8001da0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d60:	f7fe f9d2 	bl	8000108 <__udivsi3>
 8001d64:	0003      	movs	r3, r0
 8001d66:	001a      	movs	r2, r3
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	4353      	muls	r3, r2
 8001d6c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d70:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d72:	e005      	b.n	8001d80 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001d74:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d76:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d78:	e002      	b.n	8001d80 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d7a:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d7c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d7e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001d82:	0018      	movs	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	b00f      	add	sp, #60	; 0x3c
 8001d88:	bd90      	pop	{r4, r7, pc}
 8001d8a:	46c0      	nop			; (mov r8, r8)
 8001d8c:	08002cb4 	.word	0x08002cb4
 8001d90:	08002cc4 	.word	0x08002cc4
 8001d94:	40021000 	.word	0x40021000
 8001d98:	00f42400 	.word	0x00f42400
 8001d9c:	02dc6c00 	.word	0x02dc6c00
 8001da0:	007a1200 	.word	0x007a1200

08001da4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e042      	b.n	8001e3c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	223d      	movs	r2, #61	; 0x3d
 8001dba:	5c9b      	ldrb	r3, [r3, r2]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d107      	bne.n	8001dd2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	223c      	movs	r2, #60	; 0x3c
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f7fe fcf5 	bl	80007bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	223d      	movs	r2, #61	; 0x3d
 8001dd6:	2102      	movs	r1, #2
 8001dd8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3304      	adds	r3, #4
 8001de2:	0019      	movs	r1, r3
 8001de4:	0010      	movs	r0, r2
 8001de6:	f000 fc2f 	bl	8002648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2246      	movs	r2, #70	; 0x46
 8001dee:	2101      	movs	r1, #1
 8001df0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	223e      	movs	r2, #62	; 0x3e
 8001df6:	2101      	movs	r1, #1
 8001df8:	5499      	strb	r1, [r3, r2]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	223f      	movs	r2, #63	; 0x3f
 8001dfe:	2101      	movs	r1, #1
 8001e00:	5499      	strb	r1, [r3, r2]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2240      	movs	r2, #64	; 0x40
 8001e06:	2101      	movs	r1, #1
 8001e08:	5499      	strb	r1, [r3, r2]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2241      	movs	r2, #65	; 0x41
 8001e0e:	2101      	movs	r1, #1
 8001e10:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2242      	movs	r2, #66	; 0x42
 8001e16:	2101      	movs	r1, #1
 8001e18:	5499      	strb	r1, [r3, r2]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2243      	movs	r2, #67	; 0x43
 8001e1e:	2101      	movs	r1, #1
 8001e20:	5499      	strb	r1, [r3, r2]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2244      	movs	r2, #68	; 0x44
 8001e26:	2101      	movs	r1, #1
 8001e28:	5499      	strb	r1, [r3, r2]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2245      	movs	r2, #69	; 0x45
 8001e2e:	2101      	movs	r1, #1
 8001e30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	223d      	movs	r2, #61	; 0x3d
 8001e36:	2101      	movs	r1, #1
 8001e38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	b002      	add	sp, #8
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
 8001e50:	001a      	movs	r2, r3
 8001e52:	1cbb      	adds	r3, r7, #2
 8001e54:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d108      	bne.n	8001e6e <HAL_TIM_PWM_Start_DMA+0x2a>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	223e      	movs	r2, #62	; 0x3e
 8001e60:	5c9b      	ldrb	r3, [r3, r2]
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	3b02      	subs	r3, #2
 8001e66:	425a      	negs	r2, r3
 8001e68:	4153      	adcs	r3, r2
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	e01f      	b.n	8001eae <HAL_TIM_PWM_Start_DMA+0x6a>
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	d108      	bne.n	8001e86 <HAL_TIM_PWM_Start_DMA+0x42>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	223f      	movs	r2, #63	; 0x3f
 8001e78:	5c9b      	ldrb	r3, [r3, r2]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	3b02      	subs	r3, #2
 8001e7e:	425a      	negs	r2, r3
 8001e80:	4153      	adcs	r3, r2
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	e013      	b.n	8001eae <HAL_TIM_PWM_Start_DMA+0x6a>
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d108      	bne.n	8001e9e <HAL_TIM_PWM_Start_DMA+0x5a>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2240      	movs	r2, #64	; 0x40
 8001e90:	5c9b      	ldrb	r3, [r3, r2]
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	3b02      	subs	r3, #2
 8001e96:	425a      	negs	r2, r3
 8001e98:	4153      	adcs	r3, r2
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	e007      	b.n	8001eae <HAL_TIM_PWM_Start_DMA+0x6a>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2241      	movs	r2, #65	; 0x41
 8001ea2:	5c9b      	ldrb	r3, [r3, r2]
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	3b02      	subs	r3, #2
 8001ea8:	425a      	negs	r2, r3
 8001eaa:	4153      	adcs	r3, r2
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <HAL_TIM_PWM_Start_DMA+0x72>
  {
    return HAL_BUSY;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	e14f      	b.n	8002156 <HAL_TIM_PWM_Start_DMA+0x312>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d108      	bne.n	8001ece <HAL_TIM_PWM_Start_DMA+0x8a>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	223e      	movs	r2, #62	; 0x3e
 8001ec0:	5c9b      	ldrb	r3, [r3, r2]
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	425a      	negs	r2, r3
 8001ec8:	4153      	adcs	r3, r2
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	e01f      	b.n	8001f0e <HAL_TIM_PWM_Start_DMA+0xca>
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	d108      	bne.n	8001ee6 <HAL_TIM_PWM_Start_DMA+0xa2>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	223f      	movs	r2, #63	; 0x3f
 8001ed8:	5c9b      	ldrb	r3, [r3, r2]
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	3b01      	subs	r3, #1
 8001ede:	425a      	negs	r2, r3
 8001ee0:	4153      	adcs	r3, r2
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	e013      	b.n	8001f0e <HAL_TIM_PWM_Start_DMA+0xca>
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	2b08      	cmp	r3, #8
 8001eea:	d108      	bne.n	8001efe <HAL_TIM_PWM_Start_DMA+0xba>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2240      	movs	r2, #64	; 0x40
 8001ef0:	5c9b      	ldrb	r3, [r3, r2]
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	425a      	negs	r2, r3
 8001ef8:	4153      	adcs	r3, r2
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	e007      	b.n	8001f0e <HAL_TIM_PWM_Start_DMA+0xca>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2241      	movs	r2, #65	; 0x41
 8001f02:	5c9b      	ldrb	r3, [r3, r2]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	3b01      	subs	r3, #1
 8001f08:	425a      	negs	r2, r3
 8001f0a:	4153      	adcs	r3, r2
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d025      	beq.n	8001f5e <HAL_TIM_PWM_Start_DMA+0x11a>
  {
    if ((pData == NULL) && (Length > 0U))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d105      	bne.n	8001f24 <HAL_TIM_PWM_Start_DMA+0xe0>
 8001f18:	1cbb      	adds	r3, r7, #2
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <HAL_TIM_PWM_Start_DMA+0xe0>
    {
      return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e118      	b.n	8002156 <HAL_TIM_PWM_Start_DMA+0x312>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d104      	bne.n	8001f34 <HAL_TIM_PWM_Start_DMA+0xf0>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	223e      	movs	r2, #62	; 0x3e
 8001f2e:	2102      	movs	r1, #2
 8001f30:	5499      	strb	r1, [r3, r2]
 8001f32:	e016      	b.n	8001f62 <HAL_TIM_PWM_Start_DMA+0x11e>
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d104      	bne.n	8001f44 <HAL_TIM_PWM_Start_DMA+0x100>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	223f      	movs	r2, #63	; 0x3f
 8001f3e:	2102      	movs	r1, #2
 8001f40:	5499      	strb	r1, [r3, r2]
 8001f42:	e00e      	b.n	8001f62 <HAL_TIM_PWM_Start_DMA+0x11e>
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2b08      	cmp	r3, #8
 8001f48:	d104      	bne.n	8001f54 <HAL_TIM_PWM_Start_DMA+0x110>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2240      	movs	r2, #64	; 0x40
 8001f4e:	2102      	movs	r1, #2
 8001f50:	5499      	strb	r1, [r3, r2]
 8001f52:	e006      	b.n	8001f62 <HAL_TIM_PWM_Start_DMA+0x11e>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2241      	movs	r2, #65	; 0x41
 8001f58:	2102      	movs	r1, #2
 8001f5a:	5499      	strb	r1, [r3, r2]
 8001f5c:	e001      	b.n	8001f62 <HAL_TIM_PWM_Start_DMA+0x11e>
    }
  }
  else
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e0f9      	b.n	8002156 <HAL_TIM_PWM_Start_DMA+0x312>
  }

  switch (Channel)
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	d02e      	beq.n	8001fc6 <HAL_TIM_PWM_Start_DMA+0x182>
 8001f68:	d802      	bhi.n	8001f70 <HAL_TIM_PWM_Start_DMA+0x12c>
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d006      	beq.n	8001f7c <HAL_TIM_PWM_Start_DMA+0x138>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
      break;
    }

    default:
      break;
 8001f6e:	e099      	b.n	80020a4 <HAL_TIM_PWM_Start_DMA+0x260>
  switch (Channel)
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d04d      	beq.n	8002010 <HAL_TIM_PWM_Start_DMA+0x1cc>
 8001f74:	2b0c      	cmp	r3, #12
 8001f76:	d100      	bne.n	8001f7a <HAL_TIM_PWM_Start_DMA+0x136>
 8001f78:	e06f      	b.n	800205a <HAL_TIM_PWM_Start_DMA+0x216>
      break;
 8001f7a:	e093      	b.n	80020a4 <HAL_TIM_PWM_Start_DMA+0x260>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	4a77      	ldr	r2, [pc, #476]	; (8002160 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8001f82:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	4a76      	ldr	r2, [pc, #472]	; (8002164 <HAL_TIM_PWM_Start_DMA+0x320>)
 8001f8a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	4a75      	ldr	r2, [pc, #468]	; (8002168 <HAL_TIM_PWM_Start_DMA+0x324>)
 8001f92:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	3334      	adds	r3, #52	; 0x34
 8001fa0:	001a      	movs	r2, r3
 8001fa2:	1cbb      	adds	r3, r7, #2
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	f7fe feb1 	bl	8000d0c <HAL_DMA_Start_IT>
 8001faa:	1e03      	subs	r3, r0, #0
 8001fac:	d001      	beq.n	8001fb2 <HAL_TIM_PWM_Start_DMA+0x16e>
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e0d1      	b.n	8002156 <HAL_TIM_PWM_Start_DMA+0x312>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68da      	ldr	r2, [r3, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2180      	movs	r1, #128	; 0x80
 8001fbe:	0089      	lsls	r1, r1, #2
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	60da      	str	r2, [r3, #12]
      break;
 8001fc4:	e06e      	b.n	80020a4 <HAL_TIM_PWM_Start_DMA+0x260>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fca:	4a65      	ldr	r2, [pc, #404]	; (8002160 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8001fcc:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd2:	4a64      	ldr	r2, [pc, #400]	; (8002164 <HAL_TIM_PWM_Start_DMA+0x320>)
 8001fd4:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fda:	4a63      	ldr	r2, [pc, #396]	; (8002168 <HAL_TIM_PWM_Start_DMA+0x324>)
 8001fdc:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	3338      	adds	r3, #56	; 0x38
 8001fea:	001a      	movs	r2, r3
 8001fec:	1cbb      	adds	r3, r7, #2
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	f7fe fe8c 	bl	8000d0c <HAL_DMA_Start_IT>
 8001ff4:	1e03      	subs	r3, r0, #0
 8001ff6:	d001      	beq.n	8001ffc <HAL_TIM_PWM_Start_DMA+0x1b8>
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e0ac      	b.n	8002156 <HAL_TIM_PWM_Start_DMA+0x312>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68da      	ldr	r2, [r3, #12]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2180      	movs	r1, #128	; 0x80
 8002008:	00c9      	lsls	r1, r1, #3
 800200a:	430a      	orrs	r2, r1
 800200c:	60da      	str	r2, [r3, #12]
      break;
 800200e:	e049      	b.n	80020a4 <HAL_TIM_PWM_Start_DMA+0x260>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002014:	4a52      	ldr	r2, [pc, #328]	; (8002160 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8002016:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201c:	4a51      	ldr	r2, [pc, #324]	; (8002164 <HAL_TIM_PWM_Start_DMA+0x320>)
 800201e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002024:	4a50      	ldr	r2, [pc, #320]	; (8002168 <HAL_TIM_PWM_Start_DMA+0x324>)
 8002026:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	333c      	adds	r3, #60	; 0x3c
 8002034:	001a      	movs	r2, r3
 8002036:	1cbb      	adds	r3, r7, #2
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	f7fe fe67 	bl	8000d0c <HAL_DMA_Start_IT>
 800203e:	1e03      	subs	r3, r0, #0
 8002040:	d001      	beq.n	8002046 <HAL_TIM_PWM_Start_DMA+0x202>
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e087      	b.n	8002156 <HAL_TIM_PWM_Start_DMA+0x312>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68da      	ldr	r2, [r3, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2180      	movs	r1, #128	; 0x80
 8002052:	0109      	lsls	r1, r1, #4
 8002054:	430a      	orrs	r2, r1
 8002056:	60da      	str	r2, [r3, #12]
      break;
 8002058:	e024      	b.n	80020a4 <HAL_TIM_PWM_Start_DMA+0x260>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	4a40      	ldr	r2, [pc, #256]	; (8002160 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8002060:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	4a3f      	ldr	r2, [pc, #252]	; (8002164 <HAL_TIM_PWM_Start_DMA+0x320>)
 8002068:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	4a3e      	ldr	r2, [pc, #248]	; (8002168 <HAL_TIM_PWM_Start_DMA+0x324>)
 8002070:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	3340      	adds	r3, #64	; 0x40
 800207e:	001a      	movs	r2, r3
 8002080:	1cbb      	adds	r3, r7, #2
 8002082:	881b      	ldrh	r3, [r3, #0]
 8002084:	f7fe fe42 	bl	8000d0c <HAL_DMA_Start_IT>
 8002088:	1e03      	subs	r3, r0, #0
 800208a:	d001      	beq.n	8002090 <HAL_TIM_PWM_Start_DMA+0x24c>
        return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e062      	b.n	8002156 <HAL_TIM_PWM_Start_DMA+0x312>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68da      	ldr	r2, [r3, #12]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2180      	movs	r1, #128	; 0x80
 800209c:	0149      	lsls	r1, r1, #5
 800209e:	430a      	orrs	r2, r1
 80020a0:	60da      	str	r2, [r3, #12]
      break;
 80020a2:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68b9      	ldr	r1, [r7, #8]
 80020aa:	2201      	movs	r2, #1
 80020ac:	0018      	movs	r0, r3
 80020ae:	f000 fd47 	bl	8002b40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a2d      	ldr	r2, [pc, #180]	; (800216c <HAL_TIM_PWM_Start_DMA+0x328>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d00e      	beq.n	80020da <HAL_TIM_PWM_Start_DMA+0x296>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a2b      	ldr	r2, [pc, #172]	; (8002170 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d009      	beq.n	80020da <HAL_TIM_PWM_Start_DMA+0x296>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a2a      	ldr	r2, [pc, #168]	; (8002174 <HAL_TIM_PWM_Start_DMA+0x330>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d004      	beq.n	80020da <HAL_TIM_PWM_Start_DMA+0x296>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a28      	ldr	r2, [pc, #160]	; (8002178 <HAL_TIM_PWM_Start_DMA+0x334>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d101      	bne.n	80020de <HAL_TIM_PWM_Start_DMA+0x29a>
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <HAL_TIM_PWM_Start_DMA+0x29c>
 80020de:	2300      	movs	r3, #0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d008      	beq.n	80020f6 <HAL_TIM_PWM_Start_DMA+0x2b2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2180      	movs	r1, #128	; 0x80
 80020f0:	0209      	lsls	r1, r1, #8
 80020f2:	430a      	orrs	r2, r1
 80020f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a1c      	ldr	r2, [pc, #112]	; (800216c <HAL_TIM_PWM_Start_DMA+0x328>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d00f      	beq.n	8002120 <HAL_TIM_PWM_Start_DMA+0x2dc>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	2380      	movs	r3, #128	; 0x80
 8002106:	05db      	lsls	r3, r3, #23
 8002108:	429a      	cmp	r2, r3
 800210a:	d009      	beq.n	8002120 <HAL_TIM_PWM_Start_DMA+0x2dc>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a1a      	ldr	r2, [pc, #104]	; (800217c <HAL_TIM_PWM_Start_DMA+0x338>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d004      	beq.n	8002120 <HAL_TIM_PWM_Start_DMA+0x2dc>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a15      	ldr	r2, [pc, #84]	; (8002170 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d111      	bne.n	8002144 <HAL_TIM_PWM_Start_DMA+0x300>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2207      	movs	r2, #7
 8002128:	4013      	ands	r3, r2
 800212a:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	2b06      	cmp	r3, #6
 8002130:	d010      	beq.n	8002154 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      __HAL_TIM_ENABLE(htim);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2101      	movs	r1, #1
 800213e:	430a      	orrs	r2, r1
 8002140:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002142:	e007      	b.n	8002154 <HAL_TIM_PWM_Start_DMA+0x310>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2101      	movs	r1, #1
 8002150:	430a      	orrs	r2, r1
 8002152:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	0018      	movs	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	b006      	add	sp, #24
 800215c:	bd80      	pop	{r7, pc}
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	08002535 	.word	0x08002535
 8002164:	080025df 	.word	0x080025df
 8002168:	080024a1 	.word	0x080024a1
 800216c:	40012c00 	.word	0x40012c00
 8002170:	40014000 	.word	0x40014000
 8002174:	40014400 	.word	0x40014400
 8002178:	40014800 	.word	0x40014800
 800217c:	40000400 	.word	0x40000400

08002180 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	2b04      	cmp	r3, #4
 800218e:	d016      	beq.n	80021be <HAL_TIM_PWM_Stop_DMA+0x3e>
 8002190:	d802      	bhi.n	8002198 <HAL_TIM_PWM_Stop_DMA+0x18>
 8002192:	2b00      	cmp	r3, #0
 8002194:	d005      	beq.n	80021a2 <HAL_TIM_PWM_Stop_DMA+0x22>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
      break;
    }

    default:
      break;
 8002196:	e03c      	b.n	8002212 <HAL_TIM_PWM_Stop_DMA+0x92>
  switch (Channel)
 8002198:	2b08      	cmp	r3, #8
 800219a:	d01e      	beq.n	80021da <HAL_TIM_PWM_Stop_DMA+0x5a>
 800219c:	2b0c      	cmp	r3, #12
 800219e:	d02a      	beq.n	80021f6 <HAL_TIM_PWM_Stop_DMA+0x76>
      break;
 80021a0:	e037      	b.n	8002212 <HAL_TIM_PWM_Stop_DMA+0x92>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68da      	ldr	r2, [r3, #12]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	494d      	ldr	r1, [pc, #308]	; (80022e4 <HAL_TIM_PWM_Stop_DMA+0x164>)
 80021ae:	400a      	ands	r2, r1
 80021b0:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	0018      	movs	r0, r3
 80021b8:	f7fe fe0e 	bl	8000dd8 <HAL_DMA_Abort_IT>
      break;
 80021bc:	e029      	b.n	8002212 <HAL_TIM_PWM_Stop_DMA+0x92>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4947      	ldr	r1, [pc, #284]	; (80022e8 <HAL_TIM_PWM_Stop_DMA+0x168>)
 80021ca:	400a      	ands	r2, r1
 80021cc:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d2:	0018      	movs	r0, r3
 80021d4:	f7fe fe00 	bl	8000dd8 <HAL_DMA_Abort_IT>
      break;
 80021d8:	e01b      	b.n	8002212 <HAL_TIM_PWM_Stop_DMA+0x92>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4941      	ldr	r1, [pc, #260]	; (80022ec <HAL_TIM_PWM_Stop_DMA+0x16c>)
 80021e6:	400a      	ands	r2, r1
 80021e8:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ee:	0018      	movs	r0, r3
 80021f0:	f7fe fdf2 	bl	8000dd8 <HAL_DMA_Abort_IT>
      break;
 80021f4:	e00d      	b.n	8002212 <HAL_TIM_PWM_Stop_DMA+0x92>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68da      	ldr	r2, [r3, #12]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	493b      	ldr	r1, [pc, #236]	; (80022f0 <HAL_TIM_PWM_Stop_DMA+0x170>)
 8002202:	400a      	ands	r2, r1
 8002204:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	0018      	movs	r0, r3
 800220c:	f7fe fde4 	bl	8000dd8 <HAL_DMA_Abort_IT>
      break;
 8002210:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6839      	ldr	r1, [r7, #0]
 8002218:	2200      	movs	r2, #0
 800221a:	0018      	movs	r0, r3
 800221c:	f000 fc90 	bl	8002b40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a33      	ldr	r2, [pc, #204]	; (80022f4 <HAL_TIM_PWM_Stop_DMA+0x174>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d00e      	beq.n	8002248 <HAL_TIM_PWM_Stop_DMA+0xc8>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a32      	ldr	r2, [pc, #200]	; (80022f8 <HAL_TIM_PWM_Stop_DMA+0x178>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d009      	beq.n	8002248 <HAL_TIM_PWM_Stop_DMA+0xc8>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a30      	ldr	r2, [pc, #192]	; (80022fc <HAL_TIM_PWM_Stop_DMA+0x17c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d004      	beq.n	8002248 <HAL_TIM_PWM_Stop_DMA+0xc8>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a2f      	ldr	r2, [pc, #188]	; (8002300 <HAL_TIM_PWM_Stop_DMA+0x180>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d101      	bne.n	800224c <HAL_TIM_PWM_Stop_DMA+0xcc>
 8002248:	2301      	movs	r3, #1
 800224a:	e000      	b.n	800224e <HAL_TIM_PWM_Stop_DMA+0xce>
 800224c:	2300      	movs	r3, #0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d013      	beq.n	800227a <HAL_TIM_PWM_Stop_DMA+0xfa>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	4a2a      	ldr	r2, [pc, #168]	; (8002304 <HAL_TIM_PWM_Stop_DMA+0x184>)
 800225a:	4013      	ands	r3, r2
 800225c:	d10d      	bne.n	800227a <HAL_TIM_PWM_Stop_DMA+0xfa>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	4a28      	ldr	r2, [pc, #160]	; (8002308 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8002266:	4013      	ands	r3, r2
 8002268:	d107      	bne.n	800227a <HAL_TIM_PWM_Stop_DMA+0xfa>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4925      	ldr	r1, [pc, #148]	; (800230c <HAL_TIM_PWM_Stop_DMA+0x18c>)
 8002276:	400a      	ands	r2, r1
 8002278:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	4a20      	ldr	r2, [pc, #128]	; (8002304 <HAL_TIM_PWM_Stop_DMA+0x184>)
 8002282:	4013      	ands	r3, r2
 8002284:	d10d      	bne.n	80022a2 <HAL_TIM_PWM_Stop_DMA+0x122>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	4a1e      	ldr	r2, [pc, #120]	; (8002308 <HAL_TIM_PWM_Stop_DMA+0x188>)
 800228e:	4013      	ands	r3, r2
 8002290:	d107      	bne.n	80022a2 <HAL_TIM_PWM_Stop_DMA+0x122>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2101      	movs	r1, #1
 800229e:	438a      	bics	r2, r1
 80022a0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d104      	bne.n	80022b2 <HAL_TIM_PWM_Stop_DMA+0x132>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	223e      	movs	r2, #62	; 0x3e
 80022ac:	2101      	movs	r1, #1
 80022ae:	5499      	strb	r1, [r3, r2]
 80022b0:	e013      	b.n	80022da <HAL_TIM_PWM_Stop_DMA+0x15a>
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	2b04      	cmp	r3, #4
 80022b6:	d104      	bne.n	80022c2 <HAL_TIM_PWM_Stop_DMA+0x142>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	223f      	movs	r2, #63	; 0x3f
 80022bc:	2101      	movs	r1, #1
 80022be:	5499      	strb	r1, [r3, r2]
 80022c0:	e00b      	b.n	80022da <HAL_TIM_PWM_Stop_DMA+0x15a>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d104      	bne.n	80022d2 <HAL_TIM_PWM_Stop_DMA+0x152>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2240      	movs	r2, #64	; 0x40
 80022cc:	2101      	movs	r1, #1
 80022ce:	5499      	strb	r1, [r3, r2]
 80022d0:	e003      	b.n	80022da <HAL_TIM_PWM_Stop_DMA+0x15a>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2241      	movs	r2, #65	; 0x41
 80022d6:	2101      	movs	r1, #1
 80022d8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	0018      	movs	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	b002      	add	sp, #8
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	fffffdff 	.word	0xfffffdff
 80022e8:	fffffbff 	.word	0xfffffbff
 80022ec:	fffff7ff 	.word	0xfffff7ff
 80022f0:	ffffefff 	.word	0xffffefff
 80022f4:	40012c00 	.word	0x40012c00
 80022f8:	40014000 	.word	0x40014000
 80022fc:	40014400 	.word	0x40014400
 8002300:	40014800 	.word	0x40014800
 8002304:	00001111 	.word	0x00001111
 8002308:	00000444 	.word	0x00000444
 800230c:	ffff7fff 	.word	0xffff7fff

08002310 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	223c      	movs	r2, #60	; 0x3c
 8002320:	5c9b      	ldrb	r3, [r3, r2]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002326:	2302      	movs	r3, #2
 8002328:	e09c      	b.n	8002464 <HAL_TIM_PWM_ConfigChannel+0x154>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	223c      	movs	r2, #60	; 0x3c
 800232e:	2101      	movs	r1, #1
 8002330:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b04      	cmp	r3, #4
 8002336:	d029      	beq.n	800238c <HAL_TIM_PWM_ConfigChannel+0x7c>
 8002338:	d802      	bhi.n	8002340 <HAL_TIM_PWM_ConfigChannel+0x30>
 800233a:	2b00      	cmp	r3, #0
 800233c:	d005      	beq.n	800234a <HAL_TIM_PWM_ConfigChannel+0x3a>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 800233e:	e08c      	b.n	800245a <HAL_TIM_PWM_ConfigChannel+0x14a>
  switch (Channel)
 8002340:	2b08      	cmp	r3, #8
 8002342:	d046      	beq.n	80023d2 <HAL_TIM_PWM_ConfigChannel+0xc2>
 8002344:	2b0c      	cmp	r3, #12
 8002346:	d065      	beq.n	8002414 <HAL_TIM_PWM_ConfigChannel+0x104>
      break;
 8002348:	e087      	b.n	800245a <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	0011      	movs	r1, r2
 8002352:	0018      	movs	r0, r3
 8002354:	f000 f9f8 	bl	8002748 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	699a      	ldr	r2, [r3, #24]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2108      	movs	r1, #8
 8002364:	430a      	orrs	r2, r1
 8002366:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	699a      	ldr	r2, [r3, #24]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2104      	movs	r1, #4
 8002374:	438a      	bics	r2, r1
 8002376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6999      	ldr	r1, [r3, #24]
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	691a      	ldr	r2, [r3, #16]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	619a      	str	r2, [r3, #24]
      break;
 800238a:	e066      	b.n	800245a <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68ba      	ldr	r2, [r7, #8]
 8002392:	0011      	movs	r1, r2
 8002394:	0018      	movs	r0, r3
 8002396:	f000 fa5f 	bl	8002858 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	699a      	ldr	r2, [r3, #24]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2180      	movs	r1, #128	; 0x80
 80023a6:	0109      	lsls	r1, r1, #4
 80023a8:	430a      	orrs	r2, r1
 80023aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	699a      	ldr	r2, [r3, #24]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	492d      	ldr	r1, [pc, #180]	; (800246c <HAL_TIM_PWM_ConfigChannel+0x15c>)
 80023b8:	400a      	ands	r2, r1
 80023ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6999      	ldr	r1, [r3, #24]
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	021a      	lsls	r2, r3, #8
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	619a      	str	r2, [r3, #24]
      break;
 80023d0:	e043      	b.n	800245a <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	0011      	movs	r1, r2
 80023da:	0018      	movs	r0, r3
 80023dc:	f000 fac0 	bl	8002960 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	69da      	ldr	r2, [r3, #28]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2108      	movs	r1, #8
 80023ec:	430a      	orrs	r2, r1
 80023ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	69da      	ldr	r2, [r3, #28]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2104      	movs	r1, #4
 80023fc:	438a      	bics	r2, r1
 80023fe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	69d9      	ldr	r1, [r3, #28]
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	691a      	ldr	r2, [r3, #16]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	430a      	orrs	r2, r1
 8002410:	61da      	str	r2, [r3, #28]
      break;
 8002412:	e022      	b.n	800245a <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68ba      	ldr	r2, [r7, #8]
 800241a:	0011      	movs	r1, r2
 800241c:	0018      	movs	r0, r3
 800241e:	f000 fb25 	bl	8002a6c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	69da      	ldr	r2, [r3, #28]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2180      	movs	r1, #128	; 0x80
 800242e:	0109      	lsls	r1, r1, #4
 8002430:	430a      	orrs	r2, r1
 8002432:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	69da      	ldr	r2, [r3, #28]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	490b      	ldr	r1, [pc, #44]	; (800246c <HAL_TIM_PWM_ConfigChannel+0x15c>)
 8002440:	400a      	ands	r2, r1
 8002442:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	69d9      	ldr	r1, [r3, #28]
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	021a      	lsls	r2, r3, #8
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	61da      	str	r2, [r3, #28]
      break;
 8002458:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	223c      	movs	r2, #60	; 0x3c
 800245e:	2100      	movs	r1, #0
 8002460:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	0018      	movs	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	b004      	add	sp, #16
 800246a:	bd80      	pop	{r7, pc}
 800246c:	fffffbff 	.word	0xfffffbff

08002470 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002478:	46c0      	nop			; (mov r8, r8)
 800247a:	46bd      	mov	sp, r7
 800247c:	b002      	add	sp, #8
 800247e:	bd80      	pop	{r7, pc}

08002480 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002488:	46c0      	nop			; (mov r8, r8)
 800248a:	46bd      	mov	sp, r7
 800248c:	b002      	add	sp, #8
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002498:	46c0      	nop			; (mov r8, r8)
 800249a:	46bd      	mov	sp, r7
 800249c:	b002      	add	sp, #8
 800249e:	bd80      	pop	{r7, pc}

080024a0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d107      	bne.n	80024c8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2201      	movs	r2, #1
 80024bc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	223e      	movs	r2, #62	; 0x3e
 80024c2:	2101      	movs	r1, #1
 80024c4:	5499      	strb	r1, [r3, r2]
 80024c6:	e02a      	b.n	800251e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d107      	bne.n	80024e2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2202      	movs	r2, #2
 80024d6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	223f      	movs	r2, #63	; 0x3f
 80024dc:	2101      	movs	r1, #1
 80024de:	5499      	strb	r1, [r3, r2]
 80024e0:	e01d      	b.n	800251e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d107      	bne.n	80024fc <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2204      	movs	r2, #4
 80024f0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2240      	movs	r2, #64	; 0x40
 80024f6:	2101      	movs	r1, #1
 80024f8:	5499      	strb	r1, [r3, r2]
 80024fa:	e010      	b.n	800251e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	429a      	cmp	r2, r3
 8002504:	d107      	bne.n	8002516 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2208      	movs	r2, #8
 800250a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2241      	movs	r2, #65	; 0x41
 8002510:	2101      	movs	r1, #1
 8002512:	5499      	strb	r1, [r3, r2]
 8002514:	e003      	b.n	800251e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	223d      	movs	r2, #61	; 0x3d
 800251a:	2101      	movs	r1, #1
 800251c:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	0018      	movs	r0, r3
 8002522:	f7ff ffb5 	bl	8002490 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	771a      	strb	r2, [r3, #28]
}
 800252c:	46c0      	nop			; (mov r8, r8)
 800252e:	46bd      	mov	sp, r7
 8002530:	b004      	add	sp, #16
 8002532:	bd80      	pop	{r7, pc}

08002534 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	429a      	cmp	r2, r3
 800254a:	d10b      	bne.n	8002564 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2201      	movs	r2, #1
 8002550:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d136      	bne.n	80025c8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	223e      	movs	r2, #62	; 0x3e
 800255e:	2101      	movs	r1, #1
 8002560:	5499      	strb	r1, [r3, r2]
 8002562:	e031      	b.n	80025c8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	429a      	cmp	r2, r3
 800256c:	d10b      	bne.n	8002586 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2202      	movs	r2, #2
 8002572:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d125      	bne.n	80025c8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	223f      	movs	r2, #63	; 0x3f
 8002580:	2101      	movs	r1, #1
 8002582:	5499      	strb	r1, [r3, r2]
 8002584:	e020      	b.n	80025c8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	429a      	cmp	r2, r3
 800258e:	d10b      	bne.n	80025a8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2204      	movs	r2, #4
 8002594:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d114      	bne.n	80025c8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2240      	movs	r2, #64	; 0x40
 80025a2:	2101      	movs	r1, #1
 80025a4:	5499      	strb	r1, [r3, r2]
 80025a6:	e00f      	b.n	80025c8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d10a      	bne.n	80025c8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2208      	movs	r2, #8
 80025b6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d103      	bne.n	80025c8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2241      	movs	r2, #65	; 0x41
 80025c4:	2101      	movs	r1, #1
 80025c6:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	0018      	movs	r0, r3
 80025cc:	f7ff ff50 	bl	8002470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	771a      	strb	r2, [r3, #28]
}
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	46bd      	mov	sp, r7
 80025da:	b004      	add	sp, #16
 80025dc:	bd80      	pop	{r7, pc}

080025de <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b084      	sub	sp, #16
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d103      	bne.n	80025fe <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2201      	movs	r2, #1
 80025fa:	771a      	strb	r2, [r3, #28]
 80025fc:	e019      	b.n	8002632 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	429a      	cmp	r2, r3
 8002606:	d103      	bne.n	8002610 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2202      	movs	r2, #2
 800260c:	771a      	strb	r2, [r3, #28]
 800260e:	e010      	b.n	8002632 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	429a      	cmp	r2, r3
 8002618:	d103      	bne.n	8002622 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2204      	movs	r2, #4
 800261e:	771a      	strb	r2, [r3, #28]
 8002620:	e007      	b.n	8002632 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	429a      	cmp	r2, r3
 800262a:	d102      	bne.n	8002632 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2208      	movs	r2, #8
 8002630:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	0018      	movs	r0, r3
 8002636:	f7ff ff23 	bl	8002480 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	771a      	strb	r2, [r3, #28]
}
 8002640:	46c0      	nop			; (mov r8, r8)
 8002642:	46bd      	mov	sp, r7
 8002644:	b004      	add	sp, #16
 8002646:	bd80      	pop	{r7, pc}

08002648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a34      	ldr	r2, [pc, #208]	; (800272c <TIM_Base_SetConfig+0xe4>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d008      	beq.n	8002672 <TIM_Base_SetConfig+0x2a>
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	2380      	movs	r3, #128	; 0x80
 8002664:	05db      	lsls	r3, r3, #23
 8002666:	429a      	cmp	r2, r3
 8002668:	d003      	beq.n	8002672 <TIM_Base_SetConfig+0x2a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a30      	ldr	r2, [pc, #192]	; (8002730 <TIM_Base_SetConfig+0xe8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d108      	bne.n	8002684 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2270      	movs	r2, #112	; 0x70
 8002676:	4393      	bics	r3, r2
 8002678:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	4313      	orrs	r3, r2
 8002682:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a29      	ldr	r2, [pc, #164]	; (800272c <TIM_Base_SetConfig+0xe4>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d018      	beq.n	80026be <TIM_Base_SetConfig+0x76>
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	2380      	movs	r3, #128	; 0x80
 8002690:	05db      	lsls	r3, r3, #23
 8002692:	429a      	cmp	r2, r3
 8002694:	d013      	beq.n	80026be <TIM_Base_SetConfig+0x76>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a25      	ldr	r2, [pc, #148]	; (8002730 <TIM_Base_SetConfig+0xe8>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d00f      	beq.n	80026be <TIM_Base_SetConfig+0x76>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a24      	ldr	r2, [pc, #144]	; (8002734 <TIM_Base_SetConfig+0xec>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d00b      	beq.n	80026be <TIM_Base_SetConfig+0x76>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a23      	ldr	r2, [pc, #140]	; (8002738 <TIM_Base_SetConfig+0xf0>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d007      	beq.n	80026be <TIM_Base_SetConfig+0x76>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a22      	ldr	r2, [pc, #136]	; (800273c <TIM_Base_SetConfig+0xf4>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d003      	beq.n	80026be <TIM_Base_SetConfig+0x76>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a21      	ldr	r2, [pc, #132]	; (8002740 <TIM_Base_SetConfig+0xf8>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d108      	bne.n	80026d0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	4a20      	ldr	r2, [pc, #128]	; (8002744 <TIM_Base_SetConfig+0xfc>)
 80026c2:	4013      	ands	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2280      	movs	r2, #128	; 0x80
 80026d4:	4393      	bics	r3, r2
 80026d6:	001a      	movs	r2, r3
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	4313      	orrs	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a0c      	ldr	r2, [pc, #48]	; (800272c <TIM_Base_SetConfig+0xe4>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d00b      	beq.n	8002716 <TIM_Base_SetConfig+0xce>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a0d      	ldr	r2, [pc, #52]	; (8002738 <TIM_Base_SetConfig+0xf0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d007      	beq.n	8002716 <TIM_Base_SetConfig+0xce>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a0c      	ldr	r2, [pc, #48]	; (800273c <TIM_Base_SetConfig+0xf4>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d003      	beq.n	8002716 <TIM_Base_SetConfig+0xce>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a0b      	ldr	r2, [pc, #44]	; (8002740 <TIM_Base_SetConfig+0xf8>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d103      	bne.n	800271e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	691a      	ldr	r2, [r3, #16]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	615a      	str	r2, [r3, #20]
}
 8002724:	46c0      	nop			; (mov r8, r8)
 8002726:	46bd      	mov	sp, r7
 8002728:	b004      	add	sp, #16
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40012c00 	.word	0x40012c00
 8002730:	40000400 	.word	0x40000400
 8002734:	40002000 	.word	0x40002000
 8002738:	40014000 	.word	0x40014000
 800273c:	40014400 	.word	0x40014400
 8002740:	40014800 	.word	0x40014800
 8002744:	fffffcff 	.word	0xfffffcff

08002748 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	2201      	movs	r2, #1
 8002758:	4393      	bics	r3, r2
 800275a:	001a      	movs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2270      	movs	r2, #112	; 0x70
 8002776:	4393      	bics	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2203      	movs	r2, #3
 800277e:	4393      	bics	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	4313      	orrs	r3, r2
 800278a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	2202      	movs	r2, #2
 8002790:	4393      	bics	r3, r2
 8002792:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	4313      	orrs	r3, r2
 800279c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a27      	ldr	r2, [pc, #156]	; (8002840 <TIM_OC1_SetConfig+0xf8>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d00b      	beq.n	80027be <TIM_OC1_SetConfig+0x76>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a26      	ldr	r2, [pc, #152]	; (8002844 <TIM_OC1_SetConfig+0xfc>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d007      	beq.n	80027be <TIM_OC1_SetConfig+0x76>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a25      	ldr	r2, [pc, #148]	; (8002848 <TIM_OC1_SetConfig+0x100>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d003      	beq.n	80027be <TIM_OC1_SetConfig+0x76>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a24      	ldr	r2, [pc, #144]	; (800284c <TIM_OC1_SetConfig+0x104>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d10c      	bne.n	80027d8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	2208      	movs	r2, #8
 80027c2:	4393      	bics	r3, r2
 80027c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	2204      	movs	r2, #4
 80027d4:	4393      	bics	r3, r2
 80027d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a19      	ldr	r2, [pc, #100]	; (8002840 <TIM_OC1_SetConfig+0xf8>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d00b      	beq.n	80027f8 <TIM_OC1_SetConfig+0xb0>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a18      	ldr	r2, [pc, #96]	; (8002844 <TIM_OC1_SetConfig+0xfc>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d007      	beq.n	80027f8 <TIM_OC1_SetConfig+0xb0>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a17      	ldr	r2, [pc, #92]	; (8002848 <TIM_OC1_SetConfig+0x100>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d003      	beq.n	80027f8 <TIM_OC1_SetConfig+0xb0>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a16      	ldr	r2, [pc, #88]	; (800284c <TIM_OC1_SetConfig+0x104>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d111      	bne.n	800281c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	4a15      	ldr	r2, [pc, #84]	; (8002850 <TIM_OC1_SetConfig+0x108>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	4a14      	ldr	r2, [pc, #80]	; (8002854 <TIM_OC1_SetConfig+0x10c>)
 8002804:	4013      	ands	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	4313      	orrs	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	4313      	orrs	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	621a      	str	r2, [r3, #32]
}
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	46bd      	mov	sp, r7
 800283a:	b006      	add	sp, #24
 800283c:	bd80      	pop	{r7, pc}
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	40012c00 	.word	0x40012c00
 8002844:	40014000 	.word	0x40014000
 8002848:	40014400 	.word	0x40014400
 800284c:	40014800 	.word	0x40014800
 8002850:	fffffeff 	.word	0xfffffeff
 8002854:	fffffdff 	.word	0xfffffdff

08002858 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	2210      	movs	r2, #16
 8002868:	4393      	bics	r3, r2
 800286a:	001a      	movs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	4a2e      	ldr	r2, [pc, #184]	; (8002940 <TIM_OC2_SetConfig+0xe8>)
 8002886:	4013      	ands	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	4a2d      	ldr	r2, [pc, #180]	; (8002944 <TIM_OC2_SetConfig+0xec>)
 800288e:	4013      	ands	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	021b      	lsls	r3, r3, #8
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	4313      	orrs	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2220      	movs	r2, #32
 80028a2:	4393      	bics	r3, r2
 80028a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a24      	ldr	r2, [pc, #144]	; (8002948 <TIM_OC2_SetConfig+0xf0>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d10d      	bne.n	80028d6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	2280      	movs	r2, #128	; 0x80
 80028be:	4393      	bics	r3, r2
 80028c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2240      	movs	r2, #64	; 0x40
 80028d2:	4393      	bics	r3, r2
 80028d4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a1b      	ldr	r2, [pc, #108]	; (8002948 <TIM_OC2_SetConfig+0xf0>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d00b      	beq.n	80028f6 <TIM_OC2_SetConfig+0x9e>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a1a      	ldr	r2, [pc, #104]	; (800294c <TIM_OC2_SetConfig+0xf4>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d007      	beq.n	80028f6 <TIM_OC2_SetConfig+0x9e>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a19      	ldr	r2, [pc, #100]	; (8002950 <TIM_OC2_SetConfig+0xf8>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d003      	beq.n	80028f6 <TIM_OC2_SetConfig+0x9e>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a18      	ldr	r2, [pc, #96]	; (8002954 <TIM_OC2_SetConfig+0xfc>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d113      	bne.n	800291e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	4a17      	ldr	r2, [pc, #92]	; (8002958 <TIM_OC2_SetConfig+0x100>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	4a16      	ldr	r2, [pc, #88]	; (800295c <TIM_OC2_SetConfig+0x104>)
 8002902:	4013      	ands	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4313      	orrs	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	4313      	orrs	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	621a      	str	r2, [r3, #32]
}
 8002938:	46c0      	nop			; (mov r8, r8)
 800293a:	46bd      	mov	sp, r7
 800293c:	b006      	add	sp, #24
 800293e:	bd80      	pop	{r7, pc}
 8002940:	ffff8fff 	.word	0xffff8fff
 8002944:	fffffcff 	.word	0xfffffcff
 8002948:	40012c00 	.word	0x40012c00
 800294c:	40014000 	.word	0x40014000
 8002950:	40014400 	.word	0x40014400
 8002954:	40014800 	.word	0x40014800
 8002958:	fffffbff 	.word	0xfffffbff
 800295c:	fffff7ff 	.word	0xfffff7ff

08002960 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	4a35      	ldr	r2, [pc, #212]	; (8002a44 <TIM_OC3_SetConfig+0xe4>)
 8002970:	401a      	ands	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2270      	movs	r2, #112	; 0x70
 800298c:	4393      	bics	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2203      	movs	r2, #3
 8002994:	4393      	bics	r3, r2
 8002996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	4313      	orrs	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	4a28      	ldr	r2, [pc, #160]	; (8002a48 <TIM_OC3_SetConfig+0xe8>)
 80029a6:	4013      	ands	r3, r2
 80029a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	021b      	lsls	r3, r3, #8
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a24      	ldr	r2, [pc, #144]	; (8002a4c <TIM_OC3_SetConfig+0xec>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d10d      	bne.n	80029da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	4a23      	ldr	r2, [pc, #140]	; (8002a50 <TIM_OC3_SetConfig+0xf0>)
 80029c2:	4013      	ands	r3, r2
 80029c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	021b      	lsls	r3, r3, #8
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	4a1f      	ldr	r2, [pc, #124]	; (8002a54 <TIM_OC3_SetConfig+0xf4>)
 80029d6:	4013      	ands	r3, r2
 80029d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a1b      	ldr	r2, [pc, #108]	; (8002a4c <TIM_OC3_SetConfig+0xec>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d00b      	beq.n	80029fa <TIM_OC3_SetConfig+0x9a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a1c      	ldr	r2, [pc, #112]	; (8002a58 <TIM_OC3_SetConfig+0xf8>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d007      	beq.n	80029fa <TIM_OC3_SetConfig+0x9a>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a1b      	ldr	r2, [pc, #108]	; (8002a5c <TIM_OC3_SetConfig+0xfc>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d003      	beq.n	80029fa <TIM_OC3_SetConfig+0x9a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a1a      	ldr	r2, [pc, #104]	; (8002a60 <TIM_OC3_SetConfig+0x100>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d113      	bne.n	8002a22 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	4a19      	ldr	r2, [pc, #100]	; (8002a64 <TIM_OC3_SetConfig+0x104>)
 80029fe:	4013      	ands	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	4a18      	ldr	r2, [pc, #96]	; (8002a68 <TIM_OC3_SetConfig+0x108>)
 8002a06:	4013      	ands	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	621a      	str	r2, [r3, #32]
}
 8002a3c:	46c0      	nop			; (mov r8, r8)
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b006      	add	sp, #24
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	fffffeff 	.word	0xfffffeff
 8002a48:	fffffdff 	.word	0xfffffdff
 8002a4c:	40012c00 	.word	0x40012c00
 8002a50:	fffff7ff 	.word	0xfffff7ff
 8002a54:	fffffbff 	.word	0xfffffbff
 8002a58:	40014000 	.word	0x40014000
 8002a5c:	40014400 	.word	0x40014400
 8002a60:	40014800 	.word	0x40014800
 8002a64:	ffffefff 	.word	0xffffefff
 8002a68:	ffffdfff 	.word	0xffffdfff

08002a6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	4a28      	ldr	r2, [pc, #160]	; (8002b1c <TIM_OC4_SetConfig+0xb0>)
 8002a7c:	401a      	ands	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4a22      	ldr	r2, [pc, #136]	; (8002b20 <TIM_OC4_SetConfig+0xb4>)
 8002a98:	4013      	ands	r3, r2
 8002a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4a21      	ldr	r2, [pc, #132]	; (8002b24 <TIM_OC4_SetConfig+0xb8>)
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	021b      	lsls	r3, r3, #8
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	4a1d      	ldr	r2, [pc, #116]	; (8002b28 <TIM_OC4_SetConfig+0xbc>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	031b      	lsls	r3, r3, #12
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a19      	ldr	r2, [pc, #100]	; (8002b2c <TIM_OC4_SetConfig+0xc0>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d00b      	beq.n	8002ae4 <TIM_OC4_SetConfig+0x78>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a18      	ldr	r2, [pc, #96]	; (8002b30 <TIM_OC4_SetConfig+0xc4>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d007      	beq.n	8002ae4 <TIM_OC4_SetConfig+0x78>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a17      	ldr	r2, [pc, #92]	; (8002b34 <TIM_OC4_SetConfig+0xc8>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d003      	beq.n	8002ae4 <TIM_OC4_SetConfig+0x78>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a16      	ldr	r2, [pc, #88]	; (8002b38 <TIM_OC4_SetConfig+0xcc>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d109      	bne.n	8002af8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	4a15      	ldr	r2, [pc, #84]	; (8002b3c <TIM_OC4_SetConfig+0xd0>)
 8002ae8:	4013      	ands	r3, r2
 8002aea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	019b      	lsls	r3, r3, #6
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	621a      	str	r2, [r3, #32]
}
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	46bd      	mov	sp, r7
 8002b16:	b006      	add	sp, #24
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	ffffefff 	.word	0xffffefff
 8002b20:	ffff8fff 	.word	0xffff8fff
 8002b24:	fffffcff 	.word	0xfffffcff
 8002b28:	ffffdfff 	.word	0xffffdfff
 8002b2c:	40012c00 	.word	0x40012c00
 8002b30:	40014000 	.word	0x40014000
 8002b34:	40014400 	.word	0x40014400
 8002b38:	40014800 	.word	0x40014800
 8002b3c:	ffffbfff 	.word	0xffffbfff

08002b40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	221f      	movs	r2, #31
 8002b50:	4013      	ands	r3, r2
 8002b52:	2201      	movs	r2, #1
 8002b54:	409a      	lsls	r2, r3
 8002b56:	0013      	movs	r3, r2
 8002b58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	43d2      	mvns	r2, r2
 8002b62:	401a      	ands	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6a1a      	ldr	r2, [r3, #32]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	211f      	movs	r1, #31
 8002b70:	400b      	ands	r3, r1
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	4099      	lsls	r1, r3
 8002b76:	000b      	movs	r3, r1
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	621a      	str	r2, [r3, #32]
}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	46bd      	mov	sp, r7
 8002b82:	b006      	add	sp, #24
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	223c      	movs	r2, #60	; 0x3c
 8002b96:	5c9b      	ldrb	r3, [r3, r2]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d101      	bne.n	8002ba0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	e047      	b.n	8002c30 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	223c      	movs	r2, #60	; 0x3c
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	223d      	movs	r2, #61	; 0x3d
 8002bac:	2102      	movs	r1, #2
 8002bae:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2270      	movs	r2, #112	; 0x70
 8002bc4:	4393      	bics	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a16      	ldr	r2, [pc, #88]	; (8002c38 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d00f      	beq.n	8002c04 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	2380      	movs	r3, #128	; 0x80
 8002bea:	05db      	lsls	r3, r3, #23
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d009      	beq.n	8002c04 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a11      	ldr	r2, [pc, #68]	; (8002c3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d004      	beq.n	8002c04 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a10      	ldr	r2, [pc, #64]	; (8002c40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d10c      	bne.n	8002c1e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2280      	movs	r2, #128	; 0x80
 8002c08:	4393      	bics	r3, r2
 8002c0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	223d      	movs	r2, #61	; 0x3d
 8002c22:	2101      	movs	r1, #1
 8002c24:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	223c      	movs	r2, #60	; 0x3c
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	0018      	movs	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	b004      	add	sp, #16
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40012c00 	.word	0x40012c00
 8002c3c:	40000400 	.word	0x40000400
 8002c40:	40014000 	.word	0x40014000

08002c44 <__libc_init_array>:
 8002c44:	b570      	push	{r4, r5, r6, lr}
 8002c46:	2600      	movs	r6, #0
 8002c48:	4d0c      	ldr	r5, [pc, #48]	; (8002c7c <__libc_init_array+0x38>)
 8002c4a:	4c0d      	ldr	r4, [pc, #52]	; (8002c80 <__libc_init_array+0x3c>)
 8002c4c:	1b64      	subs	r4, r4, r5
 8002c4e:	10a4      	asrs	r4, r4, #2
 8002c50:	42a6      	cmp	r6, r4
 8002c52:	d109      	bne.n	8002c68 <__libc_init_array+0x24>
 8002c54:	2600      	movs	r6, #0
 8002c56:	f000 f821 	bl	8002c9c <_init>
 8002c5a:	4d0a      	ldr	r5, [pc, #40]	; (8002c84 <__libc_init_array+0x40>)
 8002c5c:	4c0a      	ldr	r4, [pc, #40]	; (8002c88 <__libc_init_array+0x44>)
 8002c5e:	1b64      	subs	r4, r4, r5
 8002c60:	10a4      	asrs	r4, r4, #2
 8002c62:	42a6      	cmp	r6, r4
 8002c64:	d105      	bne.n	8002c72 <__libc_init_array+0x2e>
 8002c66:	bd70      	pop	{r4, r5, r6, pc}
 8002c68:	00b3      	lsls	r3, r6, #2
 8002c6a:	58eb      	ldr	r3, [r5, r3]
 8002c6c:	4798      	blx	r3
 8002c6e:	3601      	adds	r6, #1
 8002c70:	e7ee      	b.n	8002c50 <__libc_init_array+0xc>
 8002c72:	00b3      	lsls	r3, r6, #2
 8002c74:	58eb      	ldr	r3, [r5, r3]
 8002c76:	4798      	blx	r3
 8002c78:	3601      	adds	r6, #1
 8002c7a:	e7f2      	b.n	8002c62 <__libc_init_array+0x1e>
 8002c7c:	08002ce4 	.word	0x08002ce4
 8002c80:	08002ce4 	.word	0x08002ce4
 8002c84:	08002ce4 	.word	0x08002ce4
 8002c88:	08002ce8 	.word	0x08002ce8

08002c8c <memset>:
 8002c8c:	0003      	movs	r3, r0
 8002c8e:	1812      	adds	r2, r2, r0
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d100      	bne.n	8002c96 <memset+0xa>
 8002c94:	4770      	bx	lr
 8002c96:	7019      	strb	r1, [r3, #0]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	e7f9      	b.n	8002c90 <memset+0x4>

08002c9c <_init>:
 8002c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ca2:	bc08      	pop	{r3}
 8002ca4:	469e      	mov	lr, r3
 8002ca6:	4770      	bx	lr

08002ca8 <_fini>:
 8002ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cae:	bc08      	pop	{r3}
 8002cb0:	469e      	mov	lr, r3
 8002cb2:	4770      	bx	lr
