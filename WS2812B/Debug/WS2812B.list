
WS2812B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cb4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002d74  08002d74  00012d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002da4  08002da4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002da4  08002da4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002da4  08002da4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002da4  08002da4  00012da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002da8  08002da8  00012da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002dac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000900  2000000c  08002db8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000090c  08002db8  0002090c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008bc9  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000173d  00000000  00000000  00028bfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009b8  00000000  00000000  0002a340  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008f0  00000000  00000000  0002acf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000186b9  00000000  00000000  0002b5e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000865d  00000000  00000000  00043ca1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f94c  00000000  00000000  0004c2fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dbc4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000225c  00000000  00000000  000dbcc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002d5c 	.word	0x08002d5c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002d5c 	.word	0x08002d5c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
  * @brief  The application entry point.
  * @retval int
  */
WS_INIT_(my,10,&htim3,TIM_CHANNEL_1)
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fc26 	bl	8000a74 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f830 	bl	800028c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8f8 	bl	8000420 <MX_GPIO_Init>
  MX_DMA_Init();
 8000230:	f000 f8d8 	bl	80003e4 <MX_DMA_Init>
  MX_TIM3_Init();
 8000234:	f000 f876 	bl	8000324 <MX_TIM3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  WS2812_Clear_buf(&myWS);
 8000238:	4b13      	ldr	r3, [pc, #76]	; (8000288 <main+0x68>)
 800023a:	0018      	movs	r0, r3
 800023c:	f000 fb91 	bl	8000962 <WS2812_Clear_buf>
	  WS2812_setColor_All_Pixel(&myWS,0,0,255);
 8000240:	4811      	ldr	r0, [pc, #68]	; (8000288 <main+0x68>)
 8000242:	23ff      	movs	r3, #255	; 0xff
 8000244:	2200      	movs	r2, #0
 8000246:	2100      	movs	r1, #0
 8000248:	f000 fa70 	bl	800072c <WS2812_setColor_All_Pixel>
	  WS2812_Update(&myWS);
 800024c:	4b0e      	ldr	r3, [pc, #56]	; (8000288 <main+0x68>)
 800024e:	0018      	movs	r0, r3
 8000250:	f000 fa45 	bl	80006de <WS2812_Update>
	  HAL_Delay(300);
 8000254:	2396      	movs	r3, #150	; 0x96
 8000256:	005b      	lsls	r3, r3, #1
 8000258:	0018      	movs	r0, r3
 800025a:	f000 fc6f 	bl	8000b3c <HAL_Delay>

	  WS2812_Clear_buf(&myWS);
 800025e:	4b0a      	ldr	r3, [pc, #40]	; (8000288 <main+0x68>)
 8000260:	0018      	movs	r0, r3
 8000262:	f000 fb7e 	bl	8000962 <WS2812_Clear_buf>
	  WS2812_setColor_All_Pixel(&myWS,0,255,0);
 8000266:	4808      	ldr	r0, [pc, #32]	; (8000288 <main+0x68>)
 8000268:	2300      	movs	r3, #0
 800026a:	22ff      	movs	r2, #255	; 0xff
 800026c:	2100      	movs	r1, #0
 800026e:	f000 fa5d 	bl	800072c <WS2812_setColor_All_Pixel>
	  WS2812_Update(&myWS);
 8000272:	4b05      	ldr	r3, [pc, #20]	; (8000288 <main+0x68>)
 8000274:	0018      	movs	r0, r3
 8000276:	f000 fa32 	bl	80006de <WS2812_Update>
	  HAL_Delay(300);
 800027a:	2396      	movs	r3, #150	; 0x96
 800027c:	005b      	lsls	r3, r3, #1
 800027e:	0018      	movs	r0, r3
 8000280:	f000 fc5c 	bl	8000b3c <HAL_Delay>
	  WS2812_Clear_buf(&myWS);
 8000284:	e7d8      	b.n	8000238 <main+0x18>
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	200000b4 	.word	0x200000b4

0800028c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028c:	b590      	push	{r4, r7, lr}
 800028e:	b093      	sub	sp, #76	; 0x4c
 8000290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000292:	2414      	movs	r4, #20
 8000294:	193b      	adds	r3, r7, r4
 8000296:	0018      	movs	r0, r3
 8000298:	2334      	movs	r3, #52	; 0x34
 800029a:	001a      	movs	r2, r3
 800029c:	2100      	movs	r1, #0
 800029e:	f002 fd55 	bl	8002d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	0018      	movs	r0, r3
 80002a6:	2310      	movs	r3, #16
 80002a8:	001a      	movs	r2, r3
 80002aa:	2100      	movs	r1, #0
 80002ac:	f002 fd4e 	bl	8002d4c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b0:	0021      	movs	r1, r4
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	2202      	movs	r2, #2
 80002b6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2201      	movs	r2, #1
 80002bc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	2210      	movs	r2, #16
 80002c2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	2202      	movs	r2, #2
 80002c8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2280      	movs	r2, #128	; 0x80
 80002ce:	0212      	lsls	r2, r2, #8
 80002d0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2280      	movs	r2, #128	; 0x80
 80002d6:	0352      	lsls	r2, r2, #13
 80002d8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	2200      	movs	r2, #0
 80002de:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	0018      	movs	r0, r3
 80002e4:	f001 f8de 	bl	80014a4 <HAL_RCC_OscConfig>
 80002e8:	1e03      	subs	r3, r0, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80002ec:	f000 f8fe 	bl	80004ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	2207      	movs	r2, #7
 80002f4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	2202      	movs	r2, #2
 80002fa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	2200      	movs	r2, #0
 8000300:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2200      	movs	r2, #0
 8000306:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	2101      	movs	r1, #1
 800030c:	0018      	movs	r0, r3
 800030e:	f001 fc4f 	bl	8001bb0 <HAL_RCC_ClockConfig>
 8000312:	1e03      	subs	r3, r0, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000316:	f000 f8e9 	bl	80004ec <Error_Handler>
  }
}
 800031a:	46c0      	nop			; (mov r8, r8)
 800031c:	46bd      	mov	sp, r7
 800031e:	b013      	add	sp, #76	; 0x4c
 8000320:	bd90      	pop	{r4, r7, pc}
	...

08000324 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b08a      	sub	sp, #40	; 0x28
 8000328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800032a:	2320      	movs	r3, #32
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	0018      	movs	r0, r3
 8000330:	2308      	movs	r3, #8
 8000332:	001a      	movs	r2, r3
 8000334:	2100      	movs	r1, #0
 8000336:	f002 fd09 	bl	8002d4c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	0018      	movs	r0, r3
 800033e:	231c      	movs	r3, #28
 8000340:	001a      	movs	r2, r3
 8000342:	2100      	movs	r1, #0
 8000344:	f002 fd02 	bl	8002d4c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000348:	4b24      	ldr	r3, [pc, #144]	; (80003dc <MX_TIM3_Init+0xb8>)
 800034a:	4a25      	ldr	r2, [pc, #148]	; (80003e0 <MX_TIM3_Init+0xbc>)
 800034c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800034e:	4b23      	ldr	r3, [pc, #140]	; (80003dc <MX_TIM3_Init+0xb8>)
 8000350:	2200      	movs	r2, #0
 8000352:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <MX_TIM3_Init+0xb8>)
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59;
 800035a:	4b20      	ldr	r3, [pc, #128]	; (80003dc <MX_TIM3_Init+0xb8>)
 800035c:	223b      	movs	r2, #59	; 0x3b
 800035e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <MX_TIM3_Init+0xb8>)
 8000362:	2200      	movs	r2, #0
 8000364:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000366:	4b1d      	ldr	r3, [pc, #116]	; (80003dc <MX_TIM3_Init+0xb8>)
 8000368:	2200      	movs	r2, #0
 800036a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <MX_TIM3_Init+0xb8>)
 800036e:	0018      	movs	r0, r3
 8000370:	f001 fd78 	bl	8001e64 <HAL_TIM_PWM_Init>
 8000374:	1e03      	subs	r3, r0, #0
 8000376:	d001      	beq.n	800037c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000378:	f000 f8b8 	bl	80004ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800037c:	2120      	movs	r1, #32
 800037e:	187b      	adds	r3, r7, r1
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000384:	187b      	adds	r3, r7, r1
 8000386:	2200      	movs	r2, #0
 8000388:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800038a:	187a      	adds	r2, r7, r1
 800038c:	4b13      	ldr	r3, [pc, #76]	; (80003dc <MX_TIM3_Init+0xb8>)
 800038e:	0011      	movs	r1, r2
 8000390:	0018      	movs	r0, r3
 8000392:	f002 fc59 	bl	8002c48 <HAL_TIMEx_MasterConfigSynchronization>
 8000396:	1e03      	subs	r3, r0, #0
 8000398:	d001      	beq.n	800039e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800039a:	f000 f8a7 	bl	80004ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	2260      	movs	r2, #96	; 0x60
 80003a2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	2200      	movs	r2, #0
 80003a8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	2200      	movs	r2, #0
 80003ae:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	2200      	movs	r2, #0
 80003b4:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003b6:	1d39      	adds	r1, r7, #4
 80003b8:	4b08      	ldr	r3, [pc, #32]	; (80003dc <MX_TIM3_Init+0xb8>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	0018      	movs	r0, r3
 80003be:	f002 f807 	bl	80023d0 <HAL_TIM_PWM_ConfigChannel>
 80003c2:	1e03      	subs	r3, r0, #0
 80003c4:	d001      	beq.n	80003ca <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80003c6:	f000 f891 	bl	80004ec <Error_Handler>
  /* USER CODE BEGIN TIM3_Init 2 */
  /* Peripheral DMA init*/


  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <MX_TIM3_Init+0xb8>)
 80003cc:	0018      	movs	r0, r3
 80003ce:	f000 f905 	bl	80005dc <HAL_TIM_MspPostInit>

}
 80003d2:	46c0      	nop			; (mov r8, r8)
 80003d4:	46bd      	mov	sp, r7
 80003d6:	b00a      	add	sp, #40	; 0x28
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	46c0      	nop			; (mov r8, r8)
 80003dc:	20000028 	.word	0x20000028
 80003e0:	40000400 	.word	0x40000400

080003e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003ea:	4b0c      	ldr	r3, [pc, #48]	; (800041c <MX_DMA_Init+0x38>)
 80003ec:	695a      	ldr	r2, [r3, #20]
 80003ee:	4b0b      	ldr	r3, [pc, #44]	; (800041c <MX_DMA_Init+0x38>)
 80003f0:	2101      	movs	r1, #1
 80003f2:	430a      	orrs	r2, r1
 80003f4:	615a      	str	r2, [r3, #20]
 80003f6:	4b09      	ldr	r3, [pc, #36]	; (800041c <MX_DMA_Init+0x38>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	2201      	movs	r2, #1
 80003fc:	4013      	ands	r3, r2
 80003fe:	607b      	str	r3, [r7, #4]
 8000400:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8000402:	2200      	movs	r2, #0
 8000404:	2100      	movs	r1, #0
 8000406:	200b      	movs	r0, #11
 8000408:	f000 fc66 	bl	8000cd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800040c:	200b      	movs	r0, #11
 800040e:	f000 fc78 	bl	8000d02 <HAL_NVIC_EnableIRQ>

}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	46bd      	mov	sp, r7
 8000416:	b002      	add	sp, #8
 8000418:	bd80      	pop	{r7, pc}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	40021000 	.word	0x40021000

08000420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000420:	b590      	push	{r4, r7, lr}
 8000422:	b089      	sub	sp, #36	; 0x24
 8000424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000426:	240c      	movs	r4, #12
 8000428:	193b      	adds	r3, r7, r4
 800042a:	0018      	movs	r0, r3
 800042c:	2314      	movs	r3, #20
 800042e:	001a      	movs	r2, r3
 8000430:	2100      	movs	r1, #0
 8000432:	f002 fc8b 	bl	8002d4c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000436:	4b2a      	ldr	r3, [pc, #168]	; (80004e0 <MX_GPIO_Init+0xc0>)
 8000438:	695a      	ldr	r2, [r3, #20]
 800043a:	4b29      	ldr	r3, [pc, #164]	; (80004e0 <MX_GPIO_Init+0xc0>)
 800043c:	2180      	movs	r1, #128	; 0x80
 800043e:	0289      	lsls	r1, r1, #10
 8000440:	430a      	orrs	r2, r1
 8000442:	615a      	str	r2, [r3, #20]
 8000444:	4b26      	ldr	r3, [pc, #152]	; (80004e0 <MX_GPIO_Init+0xc0>)
 8000446:	695a      	ldr	r2, [r3, #20]
 8000448:	2380      	movs	r3, #128	; 0x80
 800044a:	029b      	lsls	r3, r3, #10
 800044c:	4013      	ands	r3, r2
 800044e:	60bb      	str	r3, [r7, #8]
 8000450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000452:	4b23      	ldr	r3, [pc, #140]	; (80004e0 <MX_GPIO_Init+0xc0>)
 8000454:	695a      	ldr	r2, [r3, #20]
 8000456:	4b22      	ldr	r3, [pc, #136]	; (80004e0 <MX_GPIO_Init+0xc0>)
 8000458:	2180      	movs	r1, #128	; 0x80
 800045a:	02c9      	lsls	r1, r1, #11
 800045c:	430a      	orrs	r2, r1
 800045e:	615a      	str	r2, [r3, #20]
 8000460:	4b1f      	ldr	r3, [pc, #124]	; (80004e0 <MX_GPIO_Init+0xc0>)
 8000462:	695a      	ldr	r2, [r3, #20]
 8000464:	2380      	movs	r3, #128	; 0x80
 8000466:	02db      	lsls	r3, r3, #11
 8000468:	4013      	ands	r3, r2
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800046e:	2380      	movs	r3, #128	; 0x80
 8000470:	01db      	lsls	r3, r3, #7
 8000472:	481c      	ldr	r0, [pc, #112]	; (80004e4 <MX_GPIO_Init+0xc4>)
 8000474:	2200      	movs	r2, #0
 8000476:	0019      	movs	r1, r3
 8000478:	f000 ffb6 	bl	80013e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800047c:	193b      	adds	r3, r7, r4
 800047e:	2280      	movs	r2, #128	; 0x80
 8000480:	01d2      	lsls	r2, r2, #7
 8000482:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000484:	193b      	adds	r3, r7, r4
 8000486:	2201      	movs	r2, #1
 8000488:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048a:	193b      	adds	r3, r7, r4
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000490:	193b      	adds	r3, r7, r4
 8000492:	2200      	movs	r2, #0
 8000494:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000496:	193b      	adds	r3, r7, r4
 8000498:	4a12      	ldr	r2, [pc, #72]	; (80004e4 <MX_GPIO_Init+0xc4>)
 800049a:	0019      	movs	r1, r3
 800049c:	0010      	movs	r0, r2
 800049e:	f000 fe2b 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80004a2:	0021      	movs	r1, r4
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	2280      	movs	r2, #128	; 0x80
 80004a8:	0112      	lsls	r2, r2, #4
 80004aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004ac:	187b      	adds	r3, r7, r1
 80004ae:	4a0e      	ldr	r2, [pc, #56]	; (80004e8 <MX_GPIO_Init+0xc8>)
 80004b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2201      	movs	r2, #1
 80004b6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b8:	187a      	adds	r2, r7, r1
 80004ba:	2390      	movs	r3, #144	; 0x90
 80004bc:	05db      	lsls	r3, r3, #23
 80004be:	0011      	movs	r1, r2
 80004c0:	0018      	movs	r0, r3
 80004c2:	f000 fe19 	bl	80010f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80004c6:	2200      	movs	r2, #0
 80004c8:	2100      	movs	r1, #0
 80004ca:	2007      	movs	r0, #7
 80004cc:	f000 fc04 	bl	8000cd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80004d0:	2007      	movs	r0, #7
 80004d2:	f000 fc16 	bl	8000d02 <HAL_NVIC_EnableIRQ>

}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	46bd      	mov	sp, r7
 80004da:	b009      	add	sp, #36	; 0x24
 80004dc:	bd90      	pop	{r4, r7, pc}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	40021000 	.word	0x40021000
 80004e4:	48000400 	.word	0x48000400
 80004e8:	10210000 	.word	0x10210000

080004ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f2:	e7fe      	b.n	80004f2 <Error_Handler+0x6>

080004f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004fa:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <HAL_MspInit+0x44>)
 80004fc:	699a      	ldr	r2, [r3, #24]
 80004fe:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <HAL_MspInit+0x44>)
 8000500:	2101      	movs	r1, #1
 8000502:	430a      	orrs	r2, r1
 8000504:	619a      	str	r2, [r3, #24]
 8000506:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <HAL_MspInit+0x44>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	2201      	movs	r2, #1
 800050c:	4013      	ands	r3, r2
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <HAL_MspInit+0x44>)
 8000514:	69da      	ldr	r2, [r3, #28]
 8000516:	4b08      	ldr	r3, [pc, #32]	; (8000538 <HAL_MspInit+0x44>)
 8000518:	2180      	movs	r1, #128	; 0x80
 800051a:	0549      	lsls	r1, r1, #21
 800051c:	430a      	orrs	r2, r1
 800051e:	61da      	str	r2, [r3, #28]
 8000520:	4b05      	ldr	r3, [pc, #20]	; (8000538 <HAL_MspInit+0x44>)
 8000522:	69da      	ldr	r2, [r3, #28]
 8000524:	2380      	movs	r3, #128	; 0x80
 8000526:	055b      	lsls	r3, r3, #21
 8000528:	4013      	ands	r3, r2
 800052a:	603b      	str	r3, [r7, #0]
 800052c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	46bd      	mov	sp, r7
 8000532:	b002      	add	sp, #8
 8000534:	bd80      	pop	{r7, pc}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	40021000 	.word	0x40021000

0800053c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a20      	ldr	r2, [pc, #128]	; (80005cc <HAL_TIM_PWM_MspInit+0x90>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d139      	bne.n	80005c2 <HAL_TIM_PWM_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800054e:	4b20      	ldr	r3, [pc, #128]	; (80005d0 <HAL_TIM_PWM_MspInit+0x94>)
 8000550:	69da      	ldr	r2, [r3, #28]
 8000552:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <HAL_TIM_PWM_MspInit+0x94>)
 8000554:	2102      	movs	r1, #2
 8000556:	430a      	orrs	r2, r1
 8000558:	61da      	str	r2, [r3, #28]
 800055a:	4b1d      	ldr	r3, [pc, #116]	; (80005d0 <HAL_TIM_PWM_MspInit+0x94>)
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	2202      	movs	r2, #2
 8000560:	4013      	ands	r3, r2
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel4;
 8000566:	4b1b      	ldr	r3, [pc, #108]	; (80005d4 <HAL_TIM_PWM_MspInit+0x98>)
 8000568:	4a1b      	ldr	r2, [pc, #108]	; (80005d8 <HAL_TIM_PWM_MspInit+0x9c>)
 800056a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800056c:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <HAL_TIM_PWM_MspInit+0x98>)
 800056e:	2210      	movs	r2, #16
 8000570:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8000572:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <HAL_TIM_PWM_MspInit+0x98>)
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8000578:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <HAL_TIM_PWM_MspInit+0x98>)
 800057a:	2280      	movs	r2, #128	; 0x80
 800057c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800057e:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <HAL_TIM_PWM_MspInit+0x98>)
 8000580:	2280      	movs	r2, #128	; 0x80
 8000582:	0092      	lsls	r2, r2, #2
 8000584:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000586:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <HAL_TIM_PWM_MspInit+0x98>)
 8000588:	2280      	movs	r2, #128	; 0x80
 800058a:	0112      	lsls	r2, r2, #4
 800058c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 800058e:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <HAL_TIM_PWM_MspInit+0x98>)
 8000590:	2200      	movs	r2, #0
 8000592:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8000594:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <HAL_TIM_PWM_MspInit+0x98>)
 8000596:	2200      	movs	r2, #0
 8000598:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 800059a:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <HAL_TIM_PWM_MspInit+0x98>)
 800059c:	0018      	movs	r0, r3
 800059e:	f000 fbcd 	bl	8000d3c <HAL_DMA_Init>
 80005a2:	1e03      	subs	r3, r0, #0
 80005a4:	d001      	beq.n	80005aa <HAL_TIM_PWM_MspInit+0x6e>
    {
      Error_Handler();
 80005a6:	f7ff ffa1 	bl	80004ec <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4a09      	ldr	r2, [pc, #36]	; (80005d4 <HAL_TIM_PWM_MspInit+0x98>)
 80005ae:	625a      	str	r2, [r3, #36]	; 0x24
 80005b0:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <HAL_TIM_PWM_MspInit+0x98>)
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4a06      	ldr	r2, [pc, #24]	; (80005d4 <HAL_TIM_PWM_MspInit+0x98>)
 80005ba:	639a      	str	r2, [r3, #56]	; 0x38
 80005bc:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <HAL_TIM_PWM_MspInit+0x98>)
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	46bd      	mov	sp, r7
 80005c6:	b004      	add	sp, #16
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	40000400 	.word	0x40000400
 80005d0:	40021000 	.word	0x40021000
 80005d4:	20000070 	.word	0x20000070
 80005d8:	40020044 	.word	0x40020044

080005dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e4:	230c      	movs	r3, #12
 80005e6:	18fb      	adds	r3, r7, r3
 80005e8:	0018      	movs	r0, r3
 80005ea:	2314      	movs	r3, #20
 80005ec:	001a      	movs	r2, r3
 80005ee:	2100      	movs	r1, #0
 80005f0:	f002 fbac 	bl	8002d4c <memset>
  if(htim->Instance==TIM3)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a15      	ldr	r2, [pc, #84]	; (8000650 <HAL_TIM_MspPostInit+0x74>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d124      	bne.n	8000648 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	4b15      	ldr	r3, [pc, #84]	; (8000654 <HAL_TIM_MspPostInit+0x78>)
 8000600:	695a      	ldr	r2, [r3, #20]
 8000602:	4b14      	ldr	r3, [pc, #80]	; (8000654 <HAL_TIM_MspPostInit+0x78>)
 8000604:	2180      	movs	r1, #128	; 0x80
 8000606:	0289      	lsls	r1, r1, #10
 8000608:	430a      	orrs	r2, r1
 800060a:	615a      	str	r2, [r3, #20]
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <HAL_TIM_MspPostInit+0x78>)
 800060e:	695a      	ldr	r2, [r3, #20]
 8000610:	2380      	movs	r3, #128	; 0x80
 8000612:	029b      	lsls	r3, r3, #10
 8000614:	4013      	ands	r3, r2
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800061a:	210c      	movs	r1, #12
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2240      	movs	r2, #64	; 0x40
 8000620:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2202      	movs	r2, #2
 8000626:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2201      	movs	r2, #1
 8000638:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063a:	187a      	adds	r2, r7, r1
 800063c:	2390      	movs	r3, #144	; 0x90
 800063e:	05db      	lsls	r3, r3, #23
 8000640:	0011      	movs	r1, r2
 8000642:	0018      	movs	r0, r3
 8000644:	f000 fd58 	bl	80010f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000648:	46c0      	nop			; (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	b008      	add	sp, #32
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40000400 	.word	0x40000400
 8000654:	40021000 	.word	0x40021000

08000658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800065c:	e7fe      	b.n	800065c <NMI_Handler+0x4>

0800065e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000662:	e7fe      	b.n	8000662 <HardFault_Handler+0x4>

08000664 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000668:	46c0      	nop			; (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800066e:	b580      	push	{r7, lr}
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800067c:	f000 fa42 	bl	8000b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000680:	46c0      	nop			; (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800068c:	2380      	movs	r3, #128	; 0x80
 800068e:	011b      	lsls	r3, r3, #4
 8000690:	0018      	movs	r0, r3
 8000692:	f000 fee1 	bl	8001458 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */
  HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_14);
 8000696:	2380      	movs	r3, #128	; 0x80
 8000698:	01db      	lsls	r3, r3, #7
 800069a:	4a04      	ldr	r2, [pc, #16]	; (80006ac <EXTI4_15_IRQHandler+0x24>)
 800069c:	0019      	movs	r1, r3
 800069e:	0010      	movs	r0, r2
 80006a0:	f000 febf 	bl	8001422 <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80006a4:	46c0      	nop			; (mov r8, r8)
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	48000400 	.word	0x48000400

080006b0 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, 5, 6 and 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 80006b4:	4b05      	ldr	r3, [pc, #20]	; (80006cc <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 80006b6:	2100      	movs	r1, #0
 80006b8:	0018      	movs	r0, r3
 80006ba:	f001 fdc1 	bl	8002240 <HAL_TIM_PWM_Stop_DMA>
  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80006be:	4b04      	ldr	r3, [pc, #16]	; (80006d0 <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 80006c0:	0018      	movs	r0, r3
 80006c2:	f000 fc2f 	bl	8000f24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000028 	.word	0x20000028
 80006d0:	20000070 	.word	0x20000070

080006d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}

080006de <WS2812_Update>:
		(WS->buf[RESET_DELAY+WS->quantity_led*24+2]) = 0;

}
//=======================================================================================================================
HAL_StatusTypeDef WS2812_Update(WS2812 *WS)  //обновить ленту
{
 80006de:	b590      	push	{r4, r7, lr}
 80006e0:	b083      	sub	sp, #12
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
	return HAL_TIM_PWM_Start_DMA (WS->pointer_tim, WS->tim_chanel, (uint32_t*)&WS->buf[0], (RESET_DELAY+(WS->quantity_led*24))*2+3);
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	239a      	movs	r3, #154	; 0x9a
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	58d3      	ldr	r3, [r2, r3]
 80006ee:	001c      	movs	r4, r3
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	239c      	movs	r3, #156	; 0x9c
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	58d1      	ldr	r1, [r2, r3]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	6818      	ldr	r0, [r3, #0]
 80006fc:	687a      	ldr	r2, [r7, #4]
 80006fe:	2398      	movs	r3, #152	; 0x98
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	5ad3      	ldrh	r3, [r2, r3]
 8000704:	001a      	movs	r2, r3
 8000706:	0013      	movs	r3, r2
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	189b      	adds	r3, r3, r2
 800070c:	00db      	lsls	r3, r3, #3
 800070e:	3332      	adds	r3, #50	; 0x32
 8000710:	b29b      	uxth	r3, r3
 8000712:	18db      	adds	r3, r3, r3
 8000714:	b29b      	uxth	r3, r3
 8000716:	3303      	adds	r3, #3
 8000718:	b29b      	uxth	r3, r3
 800071a:	0002      	movs	r2, r0
 800071c:	0020      	movs	r0, r4
 800071e:	f001 fbf1 	bl	8001f04 <HAL_TIM_PWM_Start_DMA>
 8000722:	0003      	movs	r3, r0
}
 8000724:	0018      	movs	r0, r3
 8000726:	46bd      	mov	sp, r7
 8000728:	b003      	add	sp, #12
 800072a:	bd90      	pop	{r4, r7, pc}

0800072c <WS2812_setColor_All_Pixel>:


}
//=======================================================================================================================
void WS2812_setColor_All_Pixel(WS2812 *WS, uint16_t R, uint16_t G, uint16_t B) //установить все светодиоды в указанный цвет
{
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b089      	sub	sp, #36	; 0x24
 8000730:	af02      	add	r7, sp, #8
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	000c      	movs	r4, r1
 8000736:	0010      	movs	r0, r2
 8000738:	0019      	movs	r1, r3
 800073a:	230a      	movs	r3, #10
 800073c:	18fb      	adds	r3, r7, r3
 800073e:	1c22      	adds	r2, r4, #0
 8000740:	801a      	strh	r2, [r3, #0]
 8000742:	2308      	movs	r3, #8
 8000744:	18fb      	adds	r3, r7, r3
 8000746:	1c02      	adds	r2, r0, #0
 8000748:	801a      	strh	r2, [r3, #0]
 800074a:	1dbb      	adds	r3, r7, #6
 800074c:	1c0a      	adds	r2, r1, #0
 800074e:	801a      	strh	r2, [r3, #0]
	//check_value_colors(&R,&G,&B);
	for (int i = 0; i < WS->quantity_led; i++)
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
 8000754:	e011      	b.n	800077a <WS2812_setColor_All_Pixel+0x4e>
	{
		WS2812_setColor_Pixel(WS,i, R, G, B);
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	b299      	uxth	r1, r3
 800075a:	2308      	movs	r3, #8
 800075c:	18fb      	adds	r3, r7, r3
 800075e:	881c      	ldrh	r4, [r3, #0]
 8000760:	230a      	movs	r3, #10
 8000762:	18fb      	adds	r3, r7, r3
 8000764:	881a      	ldrh	r2, [r3, #0]
 8000766:	68f8      	ldr	r0, [r7, #12]
 8000768:	1dbb      	adds	r3, r7, #6
 800076a:	881b      	ldrh	r3, [r3, #0]
 800076c:	9300      	str	r3, [sp, #0]
 800076e:	0023      	movs	r3, r4
 8000770:	f000 f80f 	bl	8000792 <WS2812_setColor_Pixel>
	for (int i = 0; i < WS->quantity_led; i++)
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	3301      	adds	r3, #1
 8000778:	617b      	str	r3, [r7, #20]
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	2398      	movs	r3, #152	; 0x98
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	5ad3      	ldrh	r3, [r2, r3]
 8000782:	001a      	movs	r2, r3
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	4293      	cmp	r3, r2
 8000788:	dbe5      	blt.n	8000756 <WS2812_setColor_All_Pixel+0x2a>
	}
}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	46bd      	mov	sp, r7
 800078e:	b007      	add	sp, #28
 8000790:	bd90      	pop	{r4, r7, pc}

08000792 <WS2812_setColor_Pixel>:

//=======================================================================================================================
void WS2812_setColor_Pixel(WS2812 *WS, uint16_t pixel, uint16_t R, uint16_t G, uint16_t B) //установить светодиод под указанным номером в указанный цвет
{
 8000792:	b5b0      	push	{r4, r5, r7, lr}
 8000794:	b088      	sub	sp, #32
 8000796:	af00      	add	r7, sp, #0
 8000798:	60f8      	str	r0, [r7, #12]
 800079a:	000c      	movs	r4, r1
 800079c:	0010      	movs	r0, r2
 800079e:	0019      	movs	r1, r3
 80007a0:	250a      	movs	r5, #10
 80007a2:	197b      	adds	r3, r7, r5
 80007a4:	1c22      	adds	r2, r4, #0
 80007a6:	801a      	strh	r2, [r3, #0]
 80007a8:	2408      	movs	r4, #8
 80007aa:	193b      	adds	r3, r7, r4
 80007ac:	1c02      	adds	r2, r0, #0
 80007ae:	801a      	strh	r2, [r3, #0]
 80007b0:	1dbb      	adds	r3, r7, #6
 80007b2:	1c0a      	adds	r2, r1, #0
 80007b4:	801a      	strh	r2, [r3, #0]
	check_value_position(WS,&pixel);
 80007b6:	197a      	adds	r2, r7, r5
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	0011      	movs	r1, r2
 80007bc:	0018      	movs	r0, r3
 80007be:	f000 f913 	bl	80009e8 <check_value_position>
	check_value_colors(WS,&R,&G,&B);
 80007c2:	2330      	movs	r3, #48	; 0x30
 80007c4:	18fb      	adds	r3, r7, r3
 80007c6:	1dba      	adds	r2, r7, #6
 80007c8:	1939      	adds	r1, r7, r4
 80007ca:	68f8      	ldr	r0, [r7, #12]
 80007cc:	f000 f8eb 	bl	80009a6 <check_value_colors>

	//GGGGGGGG RRRRRRRR BBBBBBBB //  8+8+8
	//RED -----------------------------------------------------
		for(int i=0; i<8; i++)
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
 80007d4:	e034      	b.n	8000840 <WS2812_setColor_Pixel+0xae>
		{
			if (bit_set(R,(7-i)) == 1)
 80007d6:	2308      	movs	r3, #8
 80007d8:	18fb      	adds	r3, r7, r3
 80007da:	881b      	ldrh	r3, [r3, #0]
 80007dc:	0018      	movs	r0, r3
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	2207      	movs	r2, #7
 80007e2:	1ad3      	subs	r3, r2, r3
 80007e4:	0019      	movs	r1, r3
 80007e6:	f000 f8a7 	bl	8000938 <bit_set>
 80007ea:	0003      	movs	r3, r0
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d112      	bne.n	8000816 <WS2812_setColor_Pixel+0x84>
			{
				WS->buf[RESET_DELAY + pixel*24 + 8 + i] = log_1;
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	230a      	movs	r3, #10
 80007f6:	18fb      	adds	r3, r7, r3
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	0019      	movs	r1, r3
 80007fc:	000b      	movs	r3, r1
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	185b      	adds	r3, r3, r1
 8000802:	00db      	lsls	r3, r3, #3
 8000804:	333a      	adds	r3, #58	; 0x3a
 8000806:	0019      	movs	r1, r3
 8000808:	69fb      	ldr	r3, [r7, #28]
 800080a:	18cb      	adds	r3, r1, r3
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	18d3      	adds	r3, r2, r3
 8000810:	2229      	movs	r2, #41	; 0x29
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	e011      	b.n	800083a <WS2812_setColor_Pixel+0xa8>
			}
			else
			{
				WS->buf[RESET_DELAY + pixel*24 + 8 + i] = log_0;
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	230a      	movs	r3, #10
 800081c:	18fb      	adds	r3, r7, r3
 800081e:	881b      	ldrh	r3, [r3, #0]
 8000820:	0019      	movs	r1, r3
 8000822:	000b      	movs	r3, r1
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	185b      	adds	r3, r3, r1
 8000828:	00db      	lsls	r3, r3, #3
 800082a:	333a      	adds	r3, #58	; 0x3a
 800082c:	0019      	movs	r1, r3
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	18cb      	adds	r3, r1, r3
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	18d3      	adds	r3, r2, r3
 8000836:	2211      	movs	r2, #17
 8000838:	601a      	str	r2, [r3, #0]
		for(int i=0; i<8; i++)
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	3301      	adds	r3, #1
 800083e:	61fb      	str	r3, [r7, #28]
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	2b07      	cmp	r3, #7
 8000844:	ddc7      	ble.n	80007d6 <WS2812_setColor_Pixel+0x44>
			}

		}
	//GREEN -----------------------------------------------------
		for(int i=0; i<8; i++)
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
 800084a:	e033      	b.n	80008b4 <WS2812_setColor_Pixel+0x122>
		{
			if (bit_set(G,(7-i)) == 1)
 800084c:	1dbb      	adds	r3, r7, #6
 800084e:	881b      	ldrh	r3, [r3, #0]
 8000850:	0018      	movs	r0, r3
 8000852:	69bb      	ldr	r3, [r7, #24]
 8000854:	2207      	movs	r2, #7
 8000856:	1ad3      	subs	r3, r2, r3
 8000858:	0019      	movs	r1, r3
 800085a:	f000 f86d 	bl	8000938 <bit_set>
 800085e:	0003      	movs	r3, r0
 8000860:	2b01      	cmp	r3, #1
 8000862:	d112      	bne.n	800088a <WS2812_setColor_Pixel+0xf8>
			{
				WS->buf[RESET_DELAY + pixel*24 + 0 + i] = log_1;
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	230a      	movs	r3, #10
 800086a:	18fb      	adds	r3, r7, r3
 800086c:	881b      	ldrh	r3, [r3, #0]
 800086e:	0019      	movs	r1, r3
 8000870:	000b      	movs	r3, r1
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	185b      	adds	r3, r3, r1
 8000876:	00db      	lsls	r3, r3, #3
 8000878:	3332      	adds	r3, #50	; 0x32
 800087a:	0019      	movs	r1, r3
 800087c:	69bb      	ldr	r3, [r7, #24]
 800087e:	18cb      	adds	r3, r1, r3
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	18d3      	adds	r3, r2, r3
 8000884:	2229      	movs	r2, #41	; 0x29
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	e011      	b.n	80008ae <WS2812_setColor_Pixel+0x11c>
			}
			else
			{
				WS->buf[RESET_DELAY + pixel*24 + 0 + i] = log_0;
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	230a      	movs	r3, #10
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	881b      	ldrh	r3, [r3, #0]
 8000894:	0019      	movs	r1, r3
 8000896:	000b      	movs	r3, r1
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	185b      	adds	r3, r3, r1
 800089c:	00db      	lsls	r3, r3, #3
 800089e:	3332      	adds	r3, #50	; 0x32
 80008a0:	0019      	movs	r1, r3
 80008a2:	69bb      	ldr	r3, [r7, #24]
 80008a4:	18cb      	adds	r3, r1, r3
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	18d3      	adds	r3, r2, r3
 80008aa:	2211      	movs	r2, #17
 80008ac:	601a      	str	r2, [r3, #0]
		for(int i=0; i<8; i++)
 80008ae:	69bb      	ldr	r3, [r7, #24]
 80008b0:	3301      	adds	r3, #1
 80008b2:	61bb      	str	r3, [r7, #24]
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	2b07      	cmp	r3, #7
 80008b8:	ddc8      	ble.n	800084c <WS2812_setColor_Pixel+0xba>
			}

		}
	//BLUE -----------------------------------------------------
		for(int i=0; i<8; i++)
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
 80008be:	e034      	b.n	800092a <WS2812_setColor_Pixel+0x198>
		{
			if (bit_set(B,(7-i)) == 1)
 80008c0:	2330      	movs	r3, #48	; 0x30
 80008c2:	18fb      	adds	r3, r7, r3
 80008c4:	881b      	ldrh	r3, [r3, #0]
 80008c6:	0018      	movs	r0, r3
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	2207      	movs	r2, #7
 80008cc:	1ad3      	subs	r3, r2, r3
 80008ce:	0019      	movs	r1, r3
 80008d0:	f000 f832 	bl	8000938 <bit_set>
 80008d4:	0003      	movs	r3, r0
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d112      	bne.n	8000900 <WS2812_setColor_Pixel+0x16e>
			{
				WS->buf[RESET_DELAY + pixel*24 + 16 + i] = log_1;
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	230a      	movs	r3, #10
 80008e0:	18fb      	adds	r3, r7, r3
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	0019      	movs	r1, r3
 80008e6:	000b      	movs	r3, r1
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	185b      	adds	r3, r3, r1
 80008ec:	00db      	lsls	r3, r3, #3
 80008ee:	3342      	adds	r3, #66	; 0x42
 80008f0:	0019      	movs	r1, r3
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	18cb      	adds	r3, r1, r3
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	18d3      	adds	r3, r2, r3
 80008fa:	2229      	movs	r2, #41	; 0x29
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	e011      	b.n	8000924 <WS2812_setColor_Pixel+0x192>
			}
			else
			{
				WS->buf[RESET_DELAY + pixel*24 + 16 + i] = log_0;
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	230a      	movs	r3, #10
 8000906:	18fb      	adds	r3, r7, r3
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	0019      	movs	r1, r3
 800090c:	000b      	movs	r3, r1
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	185b      	adds	r3, r3, r1
 8000912:	00db      	lsls	r3, r3, #3
 8000914:	3342      	adds	r3, #66	; 0x42
 8000916:	0019      	movs	r1, r3
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	18cb      	adds	r3, r1, r3
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	18d3      	adds	r3, r2, r3
 8000920:	2211      	movs	r2, #17
 8000922:	601a      	str	r2, [r3, #0]
		for(int i=0; i<8; i++)
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	3301      	adds	r3, #1
 8000928:	617b      	str	r3, [r7, #20]
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	2b07      	cmp	r3, #7
 800092e:	ddc7      	ble.n	80008c0 <WS2812_setColor_Pixel+0x12e>
			}

		}

}
 8000930:	46c0      	nop			; (mov r8, r8)
 8000932:	46bd      	mov	sp, r7
 8000934:	b008      	add	sp, #32
 8000936:	bdb0      	pop	{r4, r5, r7, pc}

08000938 <bit_set>:
//=======================================================================================================================
int bit_set(int pixel_value, int pos)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
	int value = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
    if (((pixel_value >> pos)&0x01) == 1 ) value = 1;
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	411a      	asrs	r2, r3
 800094c:	0013      	movs	r3, r2
 800094e:	2201      	movs	r2, #1
 8000950:	4013      	ands	r3, r2
 8000952:	d001      	beq.n	8000958 <bit_set+0x20>
 8000954:	2301      	movs	r3, #1
 8000956:	60fb      	str	r3, [r7, #12]
	return value;
 8000958:	68fb      	ldr	r3, [r7, #12]
}
 800095a:	0018      	movs	r0, r3
 800095c:	46bd      	mov	sp, r7
 800095e:	b004      	add	sp, #16
 8000960:	bd80      	pop	{r7, pc}

08000962 <WS2812_Clear_buf>:
//=======================================================================================================================

//=======================================================================================================================
void WS2812_Clear_buf(WS2812 *WS)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b084      	sub	sp, #16
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
	for (int i = RESET_DELAY; i<WS->quantity_led*24+RESET_DELAY; i++)
 800096a:	2332      	movs	r3, #50	; 0x32
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	e009      	b.n	8000984 <WS2812_Clear_buf+0x22>
	  	{
		WS->buf[i] = log_0;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	18d3      	adds	r3, r2, r3
 800097a:	2211      	movs	r2, #17
 800097c:	601a      	str	r2, [r3, #0]
	for (int i = RESET_DELAY; i<WS->quantity_led*24+RESET_DELAY; i++)
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	3301      	adds	r3, #1
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	2398      	movs	r3, #152	; 0x98
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	5ad3      	ldrh	r3, [r2, r3]
 800098c:	001a      	movs	r2, r3
 800098e:	0013      	movs	r3, r2
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	189b      	adds	r3, r3, r2
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	3332      	adds	r3, #50	; 0x32
 8000998:	68fa      	ldr	r2, [r7, #12]
 800099a:	429a      	cmp	r2, r3
 800099c:	dbe8      	blt.n	8000970 <WS2812_Clear_buf+0xe>
	    }

}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b004      	add	sp, #16
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <check_value_colors>:
//=======================================================================================================================
void check_value_colors(uint16_t *R, uint16_t *G, uint16_t *B)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b084      	sub	sp, #16
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	60f8      	str	r0, [r7, #12]
 80009ae:	60b9      	str	r1, [r7, #8]
 80009b0:	607a      	str	r2, [r7, #4]
	if (*R>255) *R=255;
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	2bff      	cmp	r3, #255	; 0xff
 80009b8:	d903      	bls.n	80009c2 <check_value_colors+0x1c>
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	22ff      	movs	r2, #255	; 0xff
 80009be:	801a      	strh	r2, [r3, #0]
	else if (*R<0) *R=0;
		else if (*G>255) *G=255;
		else if (*G<0) *G=0;
			else if (*B>255) *B=255;
			else if (*B<0) *B=0;
}
 80009c0:	e00e      	b.n	80009e0 <check_value_colors+0x3a>
		else if (*G>255) *G=255;
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	2bff      	cmp	r3, #255	; 0xff
 80009c8:	d903      	bls.n	80009d2 <check_value_colors+0x2c>
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	22ff      	movs	r2, #255	; 0xff
 80009ce:	801a      	strh	r2, [r3, #0]
}
 80009d0:	e006      	b.n	80009e0 <check_value_colors+0x3a>
			else if (*B>255) *B=255;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	881b      	ldrh	r3, [r3, #0]
 80009d6:	2bff      	cmp	r3, #255	; 0xff
 80009d8:	d902      	bls.n	80009e0 <check_value_colors+0x3a>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	22ff      	movs	r2, #255	; 0xff
 80009de:	801a      	strh	r2, [r3, #0]
}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	b004      	add	sp, #16
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <check_value_position>:
void check_value_position(WS2812 *WS, uint16_t *pixel)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
	if (*pixel > WS->quantity_led-1) *pixel = WS->quantity_led-1; else if (*pixel<0) *pixel = 0;
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	881b      	ldrh	r3, [r3, #0]
 80009f6:	0019      	movs	r1, r3
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	2398      	movs	r3, #152	; 0x98
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	5ad3      	ldrh	r3, [r2, r3]
 8000a00:	3b01      	subs	r3, #1
 8000a02:	4299      	cmp	r1, r3
 8000a04:	dd07      	ble.n	8000a16 <check_value_position+0x2e>
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	2398      	movs	r3, #152	; 0x98
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	5ad3      	ldrh	r3, [r2, r3]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	801a      	strh	r2, [r3, #0]
}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	b002      	add	sp, #8
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a20:	480d      	ldr	r0, [pc, #52]	; (8000a58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a22:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a24:	480d      	ldr	r0, [pc, #52]	; (8000a5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a26:	490e      	ldr	r1, [pc, #56]	; (8000a60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a28:	4a0e      	ldr	r2, [pc, #56]	; (8000a64 <LoopForever+0xe>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a2c:	e002      	b.n	8000a34 <LoopCopyDataInit>

08000a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a32:	3304      	adds	r3, #4

08000a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a38:	d3f9      	bcc.n	8000a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3a:	4a0b      	ldr	r2, [pc, #44]	; (8000a68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a3c:	4c0b      	ldr	r4, [pc, #44]	; (8000a6c <LoopForever+0x16>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a40:	e001      	b.n	8000a46 <LoopFillZerobss>

08000a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a44:	3204      	adds	r2, #4

08000a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a48:	d3fb      	bcc.n	8000a42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a4a:	f7ff fe43 	bl	80006d4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a4e:	f002 f959 	bl	8002d04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a52:	f7ff fbe5 	bl	8000220 <main>

08000a56 <LoopForever>:

LoopForever:
    b LoopForever
 8000a56:	e7fe      	b.n	8000a56 <LoopForever>
  ldr   r0, =_estack
 8000a58:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a60:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a64:	08002dac 	.word	0x08002dac
  ldr r2, =_sbss
 8000a68:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a6c:	2000090c 	.word	0x2000090c

08000a70 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a70:	e7fe      	b.n	8000a70 <ADC1_COMP_IRQHandler>
	...

08000a74 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a78:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <HAL_Init+0x24>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_Init+0x24>)
 8000a7e:	2110      	movs	r1, #16
 8000a80:	430a      	orrs	r2, r1
 8000a82:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a84:	2000      	movs	r0, #0
 8000a86:	f000 f809 	bl	8000a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a8a:	f7ff fd33 	bl	80004f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a8e:	2300      	movs	r3, #0
}
 8000a90:	0018      	movs	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	40022000 	.word	0x40022000

08000a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a9c:	b590      	push	{r4, r7, lr}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa4:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <HAL_InitTick+0x5c>)
 8000aa6:	681c      	ldr	r4, [r3, #0]
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <HAL_InitTick+0x60>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	0019      	movs	r1, r3
 8000aae:	23fa      	movs	r3, #250	; 0xfa
 8000ab0:	0098      	lsls	r0, r3, #2
 8000ab2:	f7ff fb29 	bl	8000108 <__udivsi3>
 8000ab6:	0003      	movs	r3, r0
 8000ab8:	0019      	movs	r1, r3
 8000aba:	0020      	movs	r0, r4
 8000abc:	f7ff fb24 	bl	8000108 <__udivsi3>
 8000ac0:	0003      	movs	r3, r0
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f000 f92d 	bl	8000d22 <HAL_SYSTICK_Config>
 8000ac8:	1e03      	subs	r3, r0, #0
 8000aca:	d001      	beq.n	8000ad0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000acc:	2301      	movs	r3, #1
 8000ace:	e00f      	b.n	8000af0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b03      	cmp	r3, #3
 8000ad4:	d80b      	bhi.n	8000aee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad6:	6879      	ldr	r1, [r7, #4]
 8000ad8:	2301      	movs	r3, #1
 8000ada:	425b      	negs	r3, r3
 8000adc:	2200      	movs	r2, #0
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f000 f8fa 	bl	8000cd8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_InitTick+0x64>)
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000aea:	2300      	movs	r3, #0
 8000aec:	e000      	b.n	8000af0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
}
 8000af0:	0018      	movs	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	b003      	add	sp, #12
 8000af6:	bd90      	pop	{r4, r7, pc}
 8000af8:	20000000 	.word	0x20000000
 8000afc:	20000008 	.word	0x20000008
 8000b00:	20000004 	.word	0x20000004

08000b04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <HAL_IncTick+0x1c>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	001a      	movs	r2, r3
 8000b0e:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <HAL_IncTick+0x20>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	18d2      	adds	r2, r2, r3
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <HAL_IncTick+0x20>)
 8000b16:	601a      	str	r2, [r3, #0]
}
 8000b18:	46c0      	nop			; (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	20000008 	.word	0x20000008
 8000b24:	20000908 	.word	0x20000908

08000b28 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b2c:	4b02      	ldr	r3, [pc, #8]	; (8000b38 <HAL_GetTick+0x10>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
}
 8000b30:	0018      	movs	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	20000908 	.word	0x20000908

08000b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b44:	f7ff fff0 	bl	8000b28 <HAL_GetTick>
 8000b48:	0003      	movs	r3, r0
 8000b4a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	3301      	adds	r3, #1
 8000b54:	d005      	beq.n	8000b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <HAL_Delay+0x40>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	001a      	movs	r2, r3
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	189b      	adds	r3, r3, r2
 8000b60:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	f7ff ffe0 	bl	8000b28 <HAL_GetTick>
 8000b68:	0002      	movs	r2, r0
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d8f7      	bhi.n	8000b64 <HAL_Delay+0x28>
  {
  }
}
 8000b74:	46c0      	nop			; (mov r8, r8)
 8000b76:	46bd      	mov	sp, r7
 8000b78:	b004      	add	sp, #16
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000008 	.word	0x20000008

08000b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	0002      	movs	r2, r0
 8000b88:	1dfb      	adds	r3, r7, #7
 8000b8a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b8c:	1dfb      	adds	r3, r7, #7
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b7f      	cmp	r3, #127	; 0x7f
 8000b92:	d809      	bhi.n	8000ba8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b94:	1dfb      	adds	r3, r7, #7
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	001a      	movs	r2, r3
 8000b9a:	231f      	movs	r3, #31
 8000b9c:	401a      	ands	r2, r3
 8000b9e:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <__NVIC_EnableIRQ+0x30>)
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	4091      	lsls	r1, r2
 8000ba4:	000a      	movs	r2, r1
 8000ba6:	601a      	str	r2, [r3, #0]
  }
}
 8000ba8:	46c0      	nop			; (mov r8, r8)
 8000baa:	46bd      	mov	sp, r7
 8000bac:	b002      	add	sp, #8
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	e000e100 	.word	0xe000e100

08000bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb4:	b590      	push	{r4, r7, lr}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	0002      	movs	r2, r0
 8000bbc:	6039      	str	r1, [r7, #0]
 8000bbe:	1dfb      	adds	r3, r7, #7
 8000bc0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bc2:	1dfb      	adds	r3, r7, #7
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b7f      	cmp	r3, #127	; 0x7f
 8000bc8:	d828      	bhi.n	8000c1c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bca:	4a2f      	ldr	r2, [pc, #188]	; (8000c88 <__NVIC_SetPriority+0xd4>)
 8000bcc:	1dfb      	adds	r3, r7, #7
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	b25b      	sxtb	r3, r3
 8000bd2:	089b      	lsrs	r3, r3, #2
 8000bd4:	33c0      	adds	r3, #192	; 0xc0
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	589b      	ldr	r3, [r3, r2]
 8000bda:	1dfa      	adds	r2, r7, #7
 8000bdc:	7812      	ldrb	r2, [r2, #0]
 8000bde:	0011      	movs	r1, r2
 8000be0:	2203      	movs	r2, #3
 8000be2:	400a      	ands	r2, r1
 8000be4:	00d2      	lsls	r2, r2, #3
 8000be6:	21ff      	movs	r1, #255	; 0xff
 8000be8:	4091      	lsls	r1, r2
 8000bea:	000a      	movs	r2, r1
 8000bec:	43d2      	mvns	r2, r2
 8000bee:	401a      	ands	r2, r3
 8000bf0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	019b      	lsls	r3, r3, #6
 8000bf6:	22ff      	movs	r2, #255	; 0xff
 8000bf8:	401a      	ands	r2, r3
 8000bfa:	1dfb      	adds	r3, r7, #7
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	0018      	movs	r0, r3
 8000c00:	2303      	movs	r3, #3
 8000c02:	4003      	ands	r3, r0
 8000c04:	00db      	lsls	r3, r3, #3
 8000c06:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c08:	481f      	ldr	r0, [pc, #124]	; (8000c88 <__NVIC_SetPriority+0xd4>)
 8000c0a:	1dfb      	adds	r3, r7, #7
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	b25b      	sxtb	r3, r3
 8000c10:	089b      	lsrs	r3, r3, #2
 8000c12:	430a      	orrs	r2, r1
 8000c14:	33c0      	adds	r3, #192	; 0xc0
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c1a:	e031      	b.n	8000c80 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c1c:	4a1b      	ldr	r2, [pc, #108]	; (8000c8c <__NVIC_SetPriority+0xd8>)
 8000c1e:	1dfb      	adds	r3, r7, #7
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	0019      	movs	r1, r3
 8000c24:	230f      	movs	r3, #15
 8000c26:	400b      	ands	r3, r1
 8000c28:	3b08      	subs	r3, #8
 8000c2a:	089b      	lsrs	r3, r3, #2
 8000c2c:	3306      	adds	r3, #6
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	18d3      	adds	r3, r2, r3
 8000c32:	3304      	adds	r3, #4
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	1dfa      	adds	r2, r7, #7
 8000c38:	7812      	ldrb	r2, [r2, #0]
 8000c3a:	0011      	movs	r1, r2
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	400a      	ands	r2, r1
 8000c40:	00d2      	lsls	r2, r2, #3
 8000c42:	21ff      	movs	r1, #255	; 0xff
 8000c44:	4091      	lsls	r1, r2
 8000c46:	000a      	movs	r2, r1
 8000c48:	43d2      	mvns	r2, r2
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	019b      	lsls	r3, r3, #6
 8000c52:	22ff      	movs	r2, #255	; 0xff
 8000c54:	401a      	ands	r2, r3
 8000c56:	1dfb      	adds	r3, r7, #7
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	4003      	ands	r3, r0
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c64:	4809      	ldr	r0, [pc, #36]	; (8000c8c <__NVIC_SetPriority+0xd8>)
 8000c66:	1dfb      	adds	r3, r7, #7
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	001c      	movs	r4, r3
 8000c6c:	230f      	movs	r3, #15
 8000c6e:	4023      	ands	r3, r4
 8000c70:	3b08      	subs	r3, #8
 8000c72:	089b      	lsrs	r3, r3, #2
 8000c74:	430a      	orrs	r2, r1
 8000c76:	3306      	adds	r3, #6
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	18c3      	adds	r3, r0, r3
 8000c7c:	3304      	adds	r3, #4
 8000c7e:	601a      	str	r2, [r3, #0]
}
 8000c80:	46c0      	nop			; (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b003      	add	sp, #12
 8000c86:	bd90      	pop	{r4, r7, pc}
 8000c88:	e000e100 	.word	0xe000e100
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	4a0c      	ldr	r2, [pc, #48]	; (8000cd0 <SysTick_Config+0x40>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d901      	bls.n	8000ca6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e010      	b.n	8000cc8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <SysTick_Config+0x44>)
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	3a01      	subs	r2, #1
 8000cac:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cae:	2301      	movs	r3, #1
 8000cb0:	425b      	negs	r3, r3
 8000cb2:	2103      	movs	r1, #3
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f7ff ff7d 	bl	8000bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <SysTick_Config+0x44>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <SysTick_Config+0x44>)
 8000cc2:	2207      	movs	r2, #7
 8000cc4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc6:	2300      	movs	r3, #0
}
 8000cc8:	0018      	movs	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	b002      	add	sp, #8
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	00ffffff 	.word	0x00ffffff
 8000cd4:	e000e010 	.word	0xe000e010

08000cd8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
 8000ce2:	210f      	movs	r1, #15
 8000ce4:	187b      	adds	r3, r7, r1
 8000ce6:	1c02      	adds	r2, r0, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	187b      	adds	r3, r7, r1
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	b25b      	sxtb	r3, r3
 8000cf2:	0011      	movs	r1, r2
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f7ff ff5d 	bl	8000bb4 <__NVIC_SetPriority>
}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	b004      	add	sp, #16
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	0002      	movs	r2, r0
 8000d0a:	1dfb      	adds	r3, r7, #7
 8000d0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d0e:	1dfb      	adds	r3, r7, #7
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	b25b      	sxtb	r3, r3
 8000d14:	0018      	movs	r0, r3
 8000d16:	f7ff ff33 	bl	8000b80 <__NVIC_EnableIRQ>
}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	b002      	add	sp, #8
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f7ff ffaf 	bl	8000c90 <SysTick_Config>
 8000d32:	0003      	movs	r3, r0
}
 8000d34:	0018      	movs	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b002      	add	sp, #8
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d101      	bne.n	8000d52 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e036      	b.n	8000dc0 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2221      	movs	r2, #33	; 0x21
 8000d56:	2102      	movs	r1, #2
 8000d58:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	4a18      	ldr	r2, [pc, #96]	; (8000dc8 <HAL_DMA_Init+0x8c>)
 8000d66:	4013      	ands	r3, r2
 8000d68:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000d72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	695b      	ldr	r3, [r3, #20]
 8000d84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	69db      	ldr	r3, [r3, #28]
 8000d90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	68fa      	ldr	r2, [r7, #12]
 8000d9e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	0018      	movs	r0, r3
 8000da4:	f000 f98c 	bl	80010c0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2200      	movs	r2, #0
 8000dac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2221      	movs	r2, #33	; 0x21
 8000db2:	2101      	movs	r1, #1
 8000db4:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2220      	movs	r2, #32
 8000dba:	2100      	movs	r1, #0
 8000dbc:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000dbe:	2300      	movs	r3, #0
}  
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	b004      	add	sp, #16
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	ffffc00f 	.word	0xffffc00f

08000dcc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
 8000dd8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000dda:	2317      	movs	r3, #23
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	2200      	movs	r2, #0
 8000de0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	2220      	movs	r2, #32
 8000de6:	5c9b      	ldrb	r3, [r3, r2]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d101      	bne.n	8000df0 <HAL_DMA_Start_IT+0x24>
 8000dec:	2302      	movs	r3, #2
 8000dee:	e04f      	b.n	8000e90 <HAL_DMA_Start_IT+0xc4>
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	2220      	movs	r2, #32
 8000df4:	2101      	movs	r1, #1
 8000df6:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2221      	movs	r2, #33	; 0x21
 8000dfc:	5c9b      	ldrb	r3, [r3, r2]
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d13a      	bne.n	8000e7a <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2221      	movs	r2, #33	; 0x21
 8000e08:	2102      	movs	r1, #2
 8000e0a:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	438a      	bics	r2, r1
 8000e20:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	68b9      	ldr	r1, [r7, #8]
 8000e28:	68f8      	ldr	r0, [r7, #12]
 8000e2a:	f000 f91d 	bl	8001068 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d008      	beq.n	8000e48 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	210e      	movs	r1, #14
 8000e42:	430a      	orrs	r2, r1
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	e00f      	b.n	8000e68 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	210a      	movs	r1, #10
 8000e54:	430a      	orrs	r2, r1
 8000e56:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2104      	movs	r1, #4
 8000e64:	438a      	bics	r2, r1
 8000e66:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2101      	movs	r1, #1
 8000e74:	430a      	orrs	r2, r1
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	e007      	b.n	8000e8a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	2220      	movs	r2, #32
 8000e7e:	2100      	movs	r1, #0
 8000e80:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000e82:	2317      	movs	r3, #23
 8000e84:	18fb      	adds	r3, r7, r3
 8000e86:	2202      	movs	r2, #2
 8000e88:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8000e8a:	2317      	movs	r3, #23
 8000e8c:	18fb      	adds	r3, r7, r3
 8000e8e:	781b      	ldrb	r3, [r3, #0]
} 
 8000e90:	0018      	movs	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	b006      	add	sp, #24
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ea0:	230f      	movs	r3, #15
 8000ea2:	18fb      	adds	r3, r7, r3
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2221      	movs	r2, #33	; 0x21
 8000eac:	5c9b      	ldrb	r3, [r3, r2]
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d007      	beq.n	8000ec4 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2204      	movs	r2, #4
 8000eb8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000eba:	230f      	movs	r3, #15
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	701a      	strb	r2, [r3, #0]
 8000ec2:	e028      	b.n	8000f16 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	210e      	movs	r1, #14
 8000ed0:	438a      	bics	r2, r1
 8000ed2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2101      	movs	r1, #1
 8000ee0:	438a      	bics	r2, r1
 8000ee2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eec:	2101      	movs	r1, #1
 8000eee:	4091      	lsls	r1, r2
 8000ef0:	000a      	movs	r2, r1
 8000ef2:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2221      	movs	r2, #33	; 0x21
 8000ef8:	2101      	movs	r1, #1
 8000efa:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2220      	movs	r2, #32
 8000f00:	2100      	movs	r1, #0
 8000f02:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d004      	beq.n	8000f16 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	0010      	movs	r0, r2
 8000f14:	4798      	blx	r3
    } 
  }
  return status;
 8000f16:	230f      	movs	r3, #15
 8000f18:	18fb      	adds	r3, r7, r3
 8000f1a:	781b      	ldrb	r3, [r3, #0]
}
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	b004      	add	sp, #16
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f40:	2204      	movs	r2, #4
 8000f42:	409a      	lsls	r2, r3
 8000f44:	0013      	movs	r3, r2
 8000f46:	68fa      	ldr	r2, [r7, #12]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	d024      	beq.n	8000f96 <HAL_DMA_IRQHandler+0x72>
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	2204      	movs	r2, #4
 8000f50:	4013      	ands	r3, r2
 8000f52:	d020      	beq.n	8000f96 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2220      	movs	r2, #32
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	d107      	bne.n	8000f70 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2104      	movs	r1, #4
 8000f6c:	438a      	bics	r2, r1
 8000f6e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f78:	2104      	movs	r1, #4
 8000f7a:	4091      	lsls	r1, r2
 8000f7c:	000a      	movs	r2, r1
 8000f7e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d100      	bne.n	8000f8a <HAL_DMA_IRQHandler+0x66>
 8000f88:	e06a      	b.n	8001060 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	0010      	movs	r0, r2
 8000f92:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000f94:	e064      	b.n	8001060 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	409a      	lsls	r2, r3
 8000f9e:	0013      	movs	r3, r2
 8000fa0:	68fa      	ldr	r2, [r7, #12]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	d02b      	beq.n	8000ffe <HAL_DMA_IRQHandler+0xda>
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	2202      	movs	r2, #2
 8000faa:	4013      	ands	r3, r2
 8000fac:	d027      	beq.n	8000ffe <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2220      	movs	r2, #32
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	d10b      	bne.n	8000fd2 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	210a      	movs	r1, #10
 8000fc6:	438a      	bics	r2, r1
 8000fc8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2221      	movs	r2, #33	; 0x21
 8000fce:	2101      	movs	r1, #1
 8000fd0:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fda:	2102      	movs	r1, #2
 8000fdc:	4091      	lsls	r1, r2
 8000fde:	000a      	movs	r2, r1
 8000fe0:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2220      	movs	r2, #32
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d036      	beq.n	8001060 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	0010      	movs	r0, r2
 8000ffa:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000ffc:	e030      	b.n	8001060 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	2208      	movs	r2, #8
 8001004:	409a      	lsls	r2, r3
 8001006:	0013      	movs	r3, r2
 8001008:	68fa      	ldr	r2, [r7, #12]
 800100a:	4013      	ands	r3, r2
 800100c:	d028      	beq.n	8001060 <HAL_DMA_IRQHandler+0x13c>
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	2208      	movs	r2, #8
 8001012:	4013      	ands	r3, r2
 8001014:	d024      	beq.n	8001060 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	210e      	movs	r1, #14
 8001022:	438a      	bics	r2, r1
 8001024:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800102e:	2101      	movs	r1, #1
 8001030:	4091      	lsls	r1, r2
 8001032:	000a      	movs	r2, r1
 8001034:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2201      	movs	r2, #1
 800103a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2221      	movs	r2, #33	; 0x21
 8001040:	2101      	movs	r1, #1
 8001042:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2220      	movs	r2, #32
 8001048:	2100      	movs	r1, #0
 800104a:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001050:	2b00      	cmp	r3, #0
 8001052:	d005      	beq.n	8001060 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	0010      	movs	r0, r2
 800105c:	4798      	blx	r3
    }
   }
}  
 800105e:	e7ff      	b.n	8001060 <HAL_DMA_IRQHandler+0x13c>
 8001060:	46c0      	nop			; (mov r8, r8)
 8001062:	46bd      	mov	sp, r7
 8001064:	b004      	add	sp, #16
 8001066:	bd80      	pop	{r7, pc}

08001068 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
 8001074:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800107e:	2101      	movs	r1, #1
 8001080:	4091      	lsls	r1, r2
 8001082:	000a      	movs	r2, r1
 8001084:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	2b10      	cmp	r3, #16
 8001094:	d108      	bne.n	80010a8 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80010a6:	e007      	b.n	80010b8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	68ba      	ldr	r2, [r7, #8]
 80010ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	60da      	str	r2, [r3, #12]
}
 80010b8:	46c0      	nop			; (mov r8, r8)
 80010ba:	46bd      	mov	sp, r7
 80010bc:	b004      	add	sp, #16
 80010be:	bd80      	pop	{r7, pc}

080010c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a08      	ldr	r2, [pc, #32]	; (80010f0 <DMA_CalcBaseAndBitshift+0x30>)
 80010ce:	4694      	mov	ip, r2
 80010d0:	4463      	add	r3, ip
 80010d2:	2114      	movs	r1, #20
 80010d4:	0018      	movs	r0, r3
 80010d6:	f7ff f817 	bl	8000108 <__udivsi3>
 80010da:	0003      	movs	r3, r0
 80010dc:	009a      	lsls	r2, r3, #2
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a03      	ldr	r2, [pc, #12]	; (80010f4 <DMA_CalcBaseAndBitshift+0x34>)
 80010e6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80010e8:	46c0      	nop			; (mov r8, r8)
 80010ea:	46bd      	mov	sp, r7
 80010ec:	b002      	add	sp, #8
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	bffdfff8 	.word	0xbffdfff8
 80010f4:	40020000 	.word	0x40020000

080010f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001106:	e155      	b.n	80013b4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2101      	movs	r1, #1
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	4091      	lsls	r1, r2
 8001112:	000a      	movs	r2, r1
 8001114:	4013      	ands	r3, r2
 8001116:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d100      	bne.n	8001120 <HAL_GPIO_Init+0x28>
 800111e:	e146      	b.n	80013ae <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d00b      	beq.n	8001140 <HAL_GPIO_Init+0x48>
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	2b02      	cmp	r3, #2
 800112e:	d007      	beq.n	8001140 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001134:	2b11      	cmp	r3, #17
 8001136:	d003      	beq.n	8001140 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b12      	cmp	r3, #18
 800113e:	d130      	bne.n	80011a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	2203      	movs	r2, #3
 800114c:	409a      	lsls	r2, r3
 800114e:	0013      	movs	r3, r2
 8001150:	43da      	mvns	r2, r3
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	68da      	ldr	r2, [r3, #12]
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	409a      	lsls	r2, r3
 8001162:	0013      	movs	r3, r2
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4313      	orrs	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001176:	2201      	movs	r2, #1
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	409a      	lsls	r2, r3
 800117c:	0013      	movs	r3, r2
 800117e:	43da      	mvns	r2, r3
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	4013      	ands	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	091b      	lsrs	r3, r3, #4
 800118c:	2201      	movs	r2, #1
 800118e:	401a      	ands	r2, r3
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	409a      	lsls	r2, r3
 8001194:	0013      	movs	r3, r2
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	2203      	movs	r2, #3
 80011ae:	409a      	lsls	r2, r3
 80011b0:	0013      	movs	r3, r2
 80011b2:	43da      	mvns	r2, r3
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	4013      	ands	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	689a      	ldr	r2, [r3, #8]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	409a      	lsls	r2, r3
 80011c4:	0013      	movs	r3, r2
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_Init+0xea>
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b12      	cmp	r3, #18
 80011e0:	d123      	bne.n	800122a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	08da      	lsrs	r2, r3, #3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3208      	adds	r2, #8
 80011ea:	0092      	lsls	r2, r2, #2
 80011ec:	58d3      	ldr	r3, [r2, r3]
 80011ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	2207      	movs	r2, #7
 80011f4:	4013      	ands	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	220f      	movs	r2, #15
 80011fa:	409a      	lsls	r2, r3
 80011fc:	0013      	movs	r3, r2
 80011fe:	43da      	mvns	r2, r3
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	4013      	ands	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	691a      	ldr	r2, [r3, #16]
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	2107      	movs	r1, #7
 800120e:	400b      	ands	r3, r1
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	409a      	lsls	r2, r3
 8001214:	0013      	movs	r3, r2
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4313      	orrs	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	08da      	lsrs	r2, r3, #3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3208      	adds	r2, #8
 8001224:	0092      	lsls	r2, r2, #2
 8001226:	6939      	ldr	r1, [r7, #16]
 8001228:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	2203      	movs	r2, #3
 8001236:	409a      	lsls	r2, r3
 8001238:	0013      	movs	r3, r2
 800123a:	43da      	mvns	r2, r3
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	4013      	ands	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2203      	movs	r2, #3
 8001248:	401a      	ands	r2, r3
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	409a      	lsls	r2, r3
 8001250:	0013      	movs	r3, r2
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4313      	orrs	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685a      	ldr	r2, [r3, #4]
 8001262:	2380      	movs	r3, #128	; 0x80
 8001264:	055b      	lsls	r3, r3, #21
 8001266:	4013      	ands	r3, r2
 8001268:	d100      	bne.n	800126c <HAL_GPIO_Init+0x174>
 800126a:	e0a0      	b.n	80013ae <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126c:	4b57      	ldr	r3, [pc, #348]	; (80013cc <HAL_GPIO_Init+0x2d4>)
 800126e:	699a      	ldr	r2, [r3, #24]
 8001270:	4b56      	ldr	r3, [pc, #344]	; (80013cc <HAL_GPIO_Init+0x2d4>)
 8001272:	2101      	movs	r1, #1
 8001274:	430a      	orrs	r2, r1
 8001276:	619a      	str	r2, [r3, #24]
 8001278:	4b54      	ldr	r3, [pc, #336]	; (80013cc <HAL_GPIO_Init+0x2d4>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	2201      	movs	r2, #1
 800127e:	4013      	ands	r3, r2
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001284:	4a52      	ldr	r2, [pc, #328]	; (80013d0 <HAL_GPIO_Init+0x2d8>)
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	089b      	lsrs	r3, r3, #2
 800128a:	3302      	adds	r3, #2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	589b      	ldr	r3, [r3, r2]
 8001290:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	2203      	movs	r2, #3
 8001296:	4013      	ands	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	220f      	movs	r2, #15
 800129c:	409a      	lsls	r2, r3
 800129e:	0013      	movs	r3, r2
 80012a0:	43da      	mvns	r2, r3
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	2390      	movs	r3, #144	; 0x90
 80012ac:	05db      	lsls	r3, r3, #23
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d019      	beq.n	80012e6 <HAL_GPIO_Init+0x1ee>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a47      	ldr	r2, [pc, #284]	; (80013d4 <HAL_GPIO_Init+0x2dc>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d013      	beq.n	80012e2 <HAL_GPIO_Init+0x1ea>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a46      	ldr	r2, [pc, #280]	; (80013d8 <HAL_GPIO_Init+0x2e0>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d00d      	beq.n	80012de <HAL_GPIO_Init+0x1e6>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a45      	ldr	r2, [pc, #276]	; (80013dc <HAL_GPIO_Init+0x2e4>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d007      	beq.n	80012da <HAL_GPIO_Init+0x1e2>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a44      	ldr	r2, [pc, #272]	; (80013e0 <HAL_GPIO_Init+0x2e8>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d101      	bne.n	80012d6 <HAL_GPIO_Init+0x1de>
 80012d2:	2304      	movs	r3, #4
 80012d4:	e008      	b.n	80012e8 <HAL_GPIO_Init+0x1f0>
 80012d6:	2305      	movs	r3, #5
 80012d8:	e006      	b.n	80012e8 <HAL_GPIO_Init+0x1f0>
 80012da:	2303      	movs	r3, #3
 80012dc:	e004      	b.n	80012e8 <HAL_GPIO_Init+0x1f0>
 80012de:	2302      	movs	r3, #2
 80012e0:	e002      	b.n	80012e8 <HAL_GPIO_Init+0x1f0>
 80012e2:	2301      	movs	r3, #1
 80012e4:	e000      	b.n	80012e8 <HAL_GPIO_Init+0x1f0>
 80012e6:	2300      	movs	r3, #0
 80012e8:	697a      	ldr	r2, [r7, #20]
 80012ea:	2103      	movs	r1, #3
 80012ec:	400a      	ands	r2, r1
 80012ee:	0092      	lsls	r2, r2, #2
 80012f0:	4093      	lsls	r3, r2
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012f8:	4935      	ldr	r1, [pc, #212]	; (80013d0 <HAL_GPIO_Init+0x2d8>)
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	089b      	lsrs	r3, r3, #2
 80012fe:	3302      	adds	r3, #2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001306:	4b37      	ldr	r3, [pc, #220]	; (80013e4 <HAL_GPIO_Init+0x2ec>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	43da      	mvns	r2, r3
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4013      	ands	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685a      	ldr	r2, [r3, #4]
 800131a:	2380      	movs	r3, #128	; 0x80
 800131c:	025b      	lsls	r3, r3, #9
 800131e:	4013      	ands	r3, r2
 8001320:	d003      	beq.n	800132a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4313      	orrs	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800132a:	4b2e      	ldr	r3, [pc, #184]	; (80013e4 <HAL_GPIO_Init+0x2ec>)
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001330:	4b2c      	ldr	r3, [pc, #176]	; (80013e4 <HAL_GPIO_Init+0x2ec>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	43da      	mvns	r2, r3
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	4013      	ands	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	029b      	lsls	r3, r3, #10
 8001348:	4013      	ands	r3, r2
 800134a:	d003      	beq.n	8001354 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	4313      	orrs	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001354:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <HAL_GPIO_Init+0x2ec>)
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800135a:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <HAL_GPIO_Init+0x2ec>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	43da      	mvns	r2, r3
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4013      	ands	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	2380      	movs	r3, #128	; 0x80
 8001370:	035b      	lsls	r3, r3, #13
 8001372:	4013      	ands	r3, r2
 8001374:	d003      	beq.n	800137e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4313      	orrs	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800137e:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <HAL_GPIO_Init+0x2ec>)
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001384:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <HAL_GPIO_Init+0x2ec>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	43da      	mvns	r2, r3
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	2380      	movs	r3, #128	; 0x80
 800139a:	039b      	lsls	r3, r3, #14
 800139c:	4013      	ands	r3, r2
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013a8:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <HAL_GPIO_Init+0x2ec>)
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	3301      	adds	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	40da      	lsrs	r2, r3
 80013bc:	1e13      	subs	r3, r2, #0
 80013be:	d000      	beq.n	80013c2 <HAL_GPIO_Init+0x2ca>
 80013c0:	e6a2      	b.n	8001108 <HAL_GPIO_Init+0x10>
  } 
}
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	46bd      	mov	sp, r7
 80013c6:	b006      	add	sp, #24
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40010000 	.word	0x40010000
 80013d4:	48000400 	.word	0x48000400
 80013d8:	48000800 	.word	0x48000800
 80013dc:	48000c00 	.word	0x48000c00
 80013e0:	48001000 	.word	0x48001000
 80013e4:	40010400 	.word	0x40010400

080013e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	0008      	movs	r0, r1
 80013f2:	0011      	movs	r1, r2
 80013f4:	1cbb      	adds	r3, r7, #2
 80013f6:	1c02      	adds	r2, r0, #0
 80013f8:	801a      	strh	r2, [r3, #0]
 80013fa:	1c7b      	adds	r3, r7, #1
 80013fc:	1c0a      	adds	r2, r1, #0
 80013fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001400:	1c7b      	adds	r3, r7, #1
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d004      	beq.n	8001412 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001408:	1cbb      	adds	r3, r7, #2
 800140a:	881a      	ldrh	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001410:	e003      	b.n	800141a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001412:	1cbb      	adds	r3, r7, #2
 8001414:	881a      	ldrh	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	629a      	str	r2, [r3, #40]	; 0x28
}
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	46bd      	mov	sp, r7
 800141e:	b002      	add	sp, #8
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b084      	sub	sp, #16
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	000a      	movs	r2, r1
 800142c:	1cbb      	adds	r3, r7, #2
 800142e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001436:	1cbb      	adds	r3, r7, #2
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	4013      	ands	r3, r2
 800143e:	041a      	lsls	r2, r3, #16
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	43db      	mvns	r3, r3
 8001444:	1cb9      	adds	r1, r7, #2
 8001446:	8809      	ldrh	r1, [r1, #0]
 8001448:	400b      	ands	r3, r1
 800144a:	431a      	orrs	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	619a      	str	r2, [r3, #24]
}
 8001450:	46c0      	nop			; (mov r8, r8)
 8001452:	46bd      	mov	sp, r7
 8001454:	b004      	add	sp, #16
 8001456:	bd80      	pop	{r7, pc}

08001458 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	0002      	movs	r2, r0
 8001460:	1dbb      	adds	r3, r7, #6
 8001462:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001464:	4b09      	ldr	r3, [pc, #36]	; (800148c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001466:	695b      	ldr	r3, [r3, #20]
 8001468:	1dba      	adds	r2, r7, #6
 800146a:	8812      	ldrh	r2, [r2, #0]
 800146c:	4013      	ands	r3, r2
 800146e:	d008      	beq.n	8001482 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001472:	1dba      	adds	r2, r7, #6
 8001474:	8812      	ldrh	r2, [r2, #0]
 8001476:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001478:	1dbb      	adds	r3, r7, #6
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	0018      	movs	r0, r3
 800147e:	f000 f807 	bl	8001490 <HAL_GPIO_EXTI_Callback>
  }
}
 8001482:	46c0      	nop			; (mov r8, r8)
 8001484:	46bd      	mov	sp, r7
 8001486:	b002      	add	sp, #8
 8001488:	bd80      	pop	{r7, pc}
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	40010400 	.word	0x40010400

08001490 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	0002      	movs	r2, r0
 8001498:	1dbb      	adds	r3, r7, #6
 800149a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 800149c:	46c0      	nop			; (mov r8, r8)
 800149e:	46bd      	mov	sp, r7
 80014a0:	b002      	add	sp, #8
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d102      	bne.n	80014b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	f000 fb76 	bl	8001ba4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2201      	movs	r2, #1
 80014be:	4013      	ands	r3, r2
 80014c0:	d100      	bne.n	80014c4 <HAL_RCC_OscConfig+0x20>
 80014c2:	e08e      	b.n	80015e2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014c4:	4bc5      	ldr	r3, [pc, #788]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	220c      	movs	r2, #12
 80014ca:	4013      	ands	r3, r2
 80014cc:	2b04      	cmp	r3, #4
 80014ce:	d00e      	beq.n	80014ee <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014d0:	4bc2      	ldr	r3, [pc, #776]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	220c      	movs	r2, #12
 80014d6:	4013      	ands	r3, r2
 80014d8:	2b08      	cmp	r3, #8
 80014da:	d117      	bne.n	800150c <HAL_RCC_OscConfig+0x68>
 80014dc:	4bbf      	ldr	r3, [pc, #764]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	23c0      	movs	r3, #192	; 0xc0
 80014e2:	025b      	lsls	r3, r3, #9
 80014e4:	401a      	ands	r2, r3
 80014e6:	2380      	movs	r3, #128	; 0x80
 80014e8:	025b      	lsls	r3, r3, #9
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d10e      	bne.n	800150c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ee:	4bbb      	ldr	r3, [pc, #748]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	2380      	movs	r3, #128	; 0x80
 80014f4:	029b      	lsls	r3, r3, #10
 80014f6:	4013      	ands	r3, r2
 80014f8:	d100      	bne.n	80014fc <HAL_RCC_OscConfig+0x58>
 80014fa:	e071      	b.n	80015e0 <HAL_RCC_OscConfig+0x13c>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d000      	beq.n	8001506 <HAL_RCC_OscConfig+0x62>
 8001504:	e06c      	b.n	80015e0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	f000 fb4c 	bl	8001ba4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d107      	bne.n	8001524 <HAL_RCC_OscConfig+0x80>
 8001514:	4bb1      	ldr	r3, [pc, #708]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4bb0      	ldr	r3, [pc, #704]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 800151a:	2180      	movs	r1, #128	; 0x80
 800151c:	0249      	lsls	r1, r1, #9
 800151e:	430a      	orrs	r2, r1
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	e02f      	b.n	8001584 <HAL_RCC_OscConfig+0xe0>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d10c      	bne.n	8001546 <HAL_RCC_OscConfig+0xa2>
 800152c:	4bab      	ldr	r3, [pc, #684]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4baa      	ldr	r3, [pc, #680]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 8001532:	49ab      	ldr	r1, [pc, #684]	; (80017e0 <HAL_RCC_OscConfig+0x33c>)
 8001534:	400a      	ands	r2, r1
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	4ba8      	ldr	r3, [pc, #672]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4ba7      	ldr	r3, [pc, #668]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 800153e:	49a9      	ldr	r1, [pc, #676]	; (80017e4 <HAL_RCC_OscConfig+0x340>)
 8001540:	400a      	ands	r2, r1
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	e01e      	b.n	8001584 <HAL_RCC_OscConfig+0xe0>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2b05      	cmp	r3, #5
 800154c:	d10e      	bne.n	800156c <HAL_RCC_OscConfig+0xc8>
 800154e:	4ba3      	ldr	r3, [pc, #652]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	4ba2      	ldr	r3, [pc, #648]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 8001554:	2180      	movs	r1, #128	; 0x80
 8001556:	02c9      	lsls	r1, r1, #11
 8001558:	430a      	orrs	r2, r1
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	4b9f      	ldr	r3, [pc, #636]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b9e      	ldr	r3, [pc, #632]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 8001562:	2180      	movs	r1, #128	; 0x80
 8001564:	0249      	lsls	r1, r1, #9
 8001566:	430a      	orrs	r2, r1
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	e00b      	b.n	8001584 <HAL_RCC_OscConfig+0xe0>
 800156c:	4b9b      	ldr	r3, [pc, #620]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4b9a      	ldr	r3, [pc, #616]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 8001572:	499b      	ldr	r1, [pc, #620]	; (80017e0 <HAL_RCC_OscConfig+0x33c>)
 8001574:	400a      	ands	r2, r1
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	4b98      	ldr	r3, [pc, #608]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b97      	ldr	r3, [pc, #604]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 800157e:	4999      	ldr	r1, [pc, #612]	; (80017e4 <HAL_RCC_OscConfig+0x340>)
 8001580:	400a      	ands	r2, r1
 8001582:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d014      	beq.n	80015b6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158c:	f7ff facc 	bl	8000b28 <HAL_GetTick>
 8001590:	0003      	movs	r3, r0
 8001592:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001596:	f7ff fac7 	bl	8000b28 <HAL_GetTick>
 800159a:	0002      	movs	r2, r0
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b64      	cmp	r3, #100	; 0x64
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e2fd      	b.n	8001ba4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a8:	4b8c      	ldr	r3, [pc, #560]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	029b      	lsls	r3, r3, #10
 80015b0:	4013      	ands	r3, r2
 80015b2:	d0f0      	beq.n	8001596 <HAL_RCC_OscConfig+0xf2>
 80015b4:	e015      	b.n	80015e2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b6:	f7ff fab7 	bl	8000b28 <HAL_GetTick>
 80015ba:	0003      	movs	r3, r0
 80015bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015c0:	f7ff fab2 	bl	8000b28 <HAL_GetTick>
 80015c4:	0002      	movs	r2, r0
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b64      	cmp	r3, #100	; 0x64
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e2e8      	b.n	8001ba4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015d2:	4b82      	ldr	r3, [pc, #520]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	2380      	movs	r3, #128	; 0x80
 80015d8:	029b      	lsls	r3, r3, #10
 80015da:	4013      	ands	r3, r2
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0x11c>
 80015de:	e000      	b.n	80015e2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2202      	movs	r2, #2
 80015e8:	4013      	ands	r3, r2
 80015ea:	d100      	bne.n	80015ee <HAL_RCC_OscConfig+0x14a>
 80015ec:	e06c      	b.n	80016c8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80015ee:	4b7b      	ldr	r3, [pc, #492]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	220c      	movs	r2, #12
 80015f4:	4013      	ands	r3, r2
 80015f6:	d00e      	beq.n	8001616 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80015f8:	4b78      	ldr	r3, [pc, #480]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	220c      	movs	r2, #12
 80015fe:	4013      	ands	r3, r2
 8001600:	2b08      	cmp	r3, #8
 8001602:	d11f      	bne.n	8001644 <HAL_RCC_OscConfig+0x1a0>
 8001604:	4b75      	ldr	r3, [pc, #468]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	23c0      	movs	r3, #192	; 0xc0
 800160a:	025b      	lsls	r3, r3, #9
 800160c:	401a      	ands	r2, r3
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	021b      	lsls	r3, r3, #8
 8001612:	429a      	cmp	r2, r3
 8001614:	d116      	bne.n	8001644 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001616:	4b71      	ldr	r3, [pc, #452]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2202      	movs	r2, #2
 800161c:	4013      	ands	r3, r2
 800161e:	d005      	beq.n	800162c <HAL_RCC_OscConfig+0x188>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d001      	beq.n	800162c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e2bb      	b.n	8001ba4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800162c:	4b6b      	ldr	r3, [pc, #428]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	22f8      	movs	r2, #248	; 0xf8
 8001632:	4393      	bics	r3, r2
 8001634:	0019      	movs	r1, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	00da      	lsls	r2, r3, #3
 800163c:	4b67      	ldr	r3, [pc, #412]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 800163e:	430a      	orrs	r2, r1
 8001640:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001642:	e041      	b.n	80016c8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d024      	beq.n	8001696 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800164c:	4b63      	ldr	r3, [pc, #396]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4b62      	ldr	r3, [pc, #392]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 8001652:	2101      	movs	r1, #1
 8001654:	430a      	orrs	r2, r1
 8001656:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001658:	f7ff fa66 	bl	8000b28 <HAL_GetTick>
 800165c:	0003      	movs	r3, r0
 800165e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001662:	f7ff fa61 	bl	8000b28 <HAL_GetTick>
 8001666:	0002      	movs	r2, r0
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e297      	b.n	8001ba4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001674:	4b59      	ldr	r3, [pc, #356]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2202      	movs	r2, #2
 800167a:	4013      	ands	r3, r2
 800167c:	d0f1      	beq.n	8001662 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167e:	4b57      	ldr	r3, [pc, #348]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	22f8      	movs	r2, #248	; 0xf8
 8001684:	4393      	bics	r3, r2
 8001686:	0019      	movs	r1, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	00da      	lsls	r2, r3, #3
 800168e:	4b53      	ldr	r3, [pc, #332]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 8001690:	430a      	orrs	r2, r1
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	e018      	b.n	80016c8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001696:	4b51      	ldr	r3, [pc, #324]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	4b50      	ldr	r3, [pc, #320]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 800169c:	2101      	movs	r1, #1
 800169e:	438a      	bics	r2, r1
 80016a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a2:	f7ff fa41 	bl	8000b28 <HAL_GetTick>
 80016a6:	0003      	movs	r3, r0
 80016a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ac:	f7ff fa3c 	bl	8000b28 <HAL_GetTick>
 80016b0:	0002      	movs	r2, r0
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e272      	b.n	8001ba4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016be:	4b47      	ldr	r3, [pc, #284]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2202      	movs	r2, #2
 80016c4:	4013      	ands	r3, r2
 80016c6:	d1f1      	bne.n	80016ac <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2208      	movs	r2, #8
 80016ce:	4013      	ands	r3, r2
 80016d0:	d036      	beq.n	8001740 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d019      	beq.n	800170e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016da:	4b40      	ldr	r3, [pc, #256]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 80016dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016de:	4b3f      	ldr	r3, [pc, #252]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 80016e0:	2101      	movs	r1, #1
 80016e2:	430a      	orrs	r2, r1
 80016e4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e6:	f7ff fa1f 	bl	8000b28 <HAL_GetTick>
 80016ea:	0003      	movs	r3, r0
 80016ec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016f0:	f7ff fa1a 	bl	8000b28 <HAL_GetTick>
 80016f4:	0002      	movs	r2, r0
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e250      	b.n	8001ba4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001702:	4b36      	ldr	r3, [pc, #216]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 8001704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001706:	2202      	movs	r2, #2
 8001708:	4013      	ands	r3, r2
 800170a:	d0f1      	beq.n	80016f0 <HAL_RCC_OscConfig+0x24c>
 800170c:	e018      	b.n	8001740 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800170e:	4b33      	ldr	r3, [pc, #204]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 8001710:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001712:	4b32      	ldr	r3, [pc, #200]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 8001714:	2101      	movs	r1, #1
 8001716:	438a      	bics	r2, r1
 8001718:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800171a:	f7ff fa05 	bl	8000b28 <HAL_GetTick>
 800171e:	0003      	movs	r3, r0
 8001720:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001724:	f7ff fa00 	bl	8000b28 <HAL_GetTick>
 8001728:	0002      	movs	r2, r0
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e236      	b.n	8001ba4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001736:	4b29      	ldr	r3, [pc, #164]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 8001738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173a:	2202      	movs	r2, #2
 800173c:	4013      	ands	r3, r2
 800173e:	d1f1      	bne.n	8001724 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2204      	movs	r2, #4
 8001746:	4013      	ands	r3, r2
 8001748:	d100      	bne.n	800174c <HAL_RCC_OscConfig+0x2a8>
 800174a:	e0b5      	b.n	80018b8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800174c:	231f      	movs	r3, #31
 800174e:	18fb      	adds	r3, r7, r3
 8001750:	2200      	movs	r2, #0
 8001752:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001754:	4b21      	ldr	r3, [pc, #132]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 8001756:	69da      	ldr	r2, [r3, #28]
 8001758:	2380      	movs	r3, #128	; 0x80
 800175a:	055b      	lsls	r3, r3, #21
 800175c:	4013      	ands	r3, r2
 800175e:	d111      	bne.n	8001784 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001760:	4b1e      	ldr	r3, [pc, #120]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 8001762:	69da      	ldr	r2, [r3, #28]
 8001764:	4b1d      	ldr	r3, [pc, #116]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 8001766:	2180      	movs	r1, #128	; 0x80
 8001768:	0549      	lsls	r1, r1, #21
 800176a:	430a      	orrs	r2, r1
 800176c:	61da      	str	r2, [r3, #28]
 800176e:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 8001770:	69da      	ldr	r2, [r3, #28]
 8001772:	2380      	movs	r3, #128	; 0x80
 8001774:	055b      	lsls	r3, r3, #21
 8001776:	4013      	ands	r3, r2
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800177c:	231f      	movs	r3, #31
 800177e:	18fb      	adds	r3, r7, r3
 8001780:	2201      	movs	r2, #1
 8001782:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001784:	4b18      	ldr	r3, [pc, #96]	; (80017e8 <HAL_RCC_OscConfig+0x344>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	2380      	movs	r3, #128	; 0x80
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	4013      	ands	r3, r2
 800178e:	d11a      	bne.n	80017c6 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001790:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <HAL_RCC_OscConfig+0x344>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <HAL_RCC_OscConfig+0x344>)
 8001796:	2180      	movs	r1, #128	; 0x80
 8001798:	0049      	lsls	r1, r1, #1
 800179a:	430a      	orrs	r2, r1
 800179c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800179e:	f7ff f9c3 	bl	8000b28 <HAL_GetTick>
 80017a2:	0003      	movs	r3, r0
 80017a4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017a8:	f7ff f9be 	bl	8000b28 <HAL_GetTick>
 80017ac:	0002      	movs	r2, r0
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b64      	cmp	r3, #100	; 0x64
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e1f4      	b.n	8001ba4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ba:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <HAL_RCC_OscConfig+0x344>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	2380      	movs	r3, #128	; 0x80
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	4013      	ands	r3, r2
 80017c4:	d0f0      	beq.n	80017a8 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d10e      	bne.n	80017ec <HAL_RCC_OscConfig+0x348>
 80017ce:	4b03      	ldr	r3, [pc, #12]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 80017d0:	6a1a      	ldr	r2, [r3, #32]
 80017d2:	4b02      	ldr	r3, [pc, #8]	; (80017dc <HAL_RCC_OscConfig+0x338>)
 80017d4:	2101      	movs	r1, #1
 80017d6:	430a      	orrs	r2, r1
 80017d8:	621a      	str	r2, [r3, #32]
 80017da:	e035      	b.n	8001848 <HAL_RCC_OscConfig+0x3a4>
 80017dc:	40021000 	.word	0x40021000
 80017e0:	fffeffff 	.word	0xfffeffff
 80017e4:	fffbffff 	.word	0xfffbffff
 80017e8:	40007000 	.word	0x40007000
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d10c      	bne.n	800180e <HAL_RCC_OscConfig+0x36a>
 80017f4:	4bca      	ldr	r3, [pc, #808]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 80017f6:	6a1a      	ldr	r2, [r3, #32]
 80017f8:	4bc9      	ldr	r3, [pc, #804]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 80017fa:	2101      	movs	r1, #1
 80017fc:	438a      	bics	r2, r1
 80017fe:	621a      	str	r2, [r3, #32]
 8001800:	4bc7      	ldr	r3, [pc, #796]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 8001802:	6a1a      	ldr	r2, [r3, #32]
 8001804:	4bc6      	ldr	r3, [pc, #792]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 8001806:	2104      	movs	r1, #4
 8001808:	438a      	bics	r2, r1
 800180a:	621a      	str	r2, [r3, #32]
 800180c:	e01c      	b.n	8001848 <HAL_RCC_OscConfig+0x3a4>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	2b05      	cmp	r3, #5
 8001814:	d10c      	bne.n	8001830 <HAL_RCC_OscConfig+0x38c>
 8001816:	4bc2      	ldr	r3, [pc, #776]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 8001818:	6a1a      	ldr	r2, [r3, #32]
 800181a:	4bc1      	ldr	r3, [pc, #772]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 800181c:	2104      	movs	r1, #4
 800181e:	430a      	orrs	r2, r1
 8001820:	621a      	str	r2, [r3, #32]
 8001822:	4bbf      	ldr	r3, [pc, #764]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 8001824:	6a1a      	ldr	r2, [r3, #32]
 8001826:	4bbe      	ldr	r3, [pc, #760]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 8001828:	2101      	movs	r1, #1
 800182a:	430a      	orrs	r2, r1
 800182c:	621a      	str	r2, [r3, #32]
 800182e:	e00b      	b.n	8001848 <HAL_RCC_OscConfig+0x3a4>
 8001830:	4bbb      	ldr	r3, [pc, #748]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 8001832:	6a1a      	ldr	r2, [r3, #32]
 8001834:	4bba      	ldr	r3, [pc, #744]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 8001836:	2101      	movs	r1, #1
 8001838:	438a      	bics	r2, r1
 800183a:	621a      	str	r2, [r3, #32]
 800183c:	4bb8      	ldr	r3, [pc, #736]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 800183e:	6a1a      	ldr	r2, [r3, #32]
 8001840:	4bb7      	ldr	r3, [pc, #732]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 8001842:	2104      	movs	r1, #4
 8001844:	438a      	bics	r2, r1
 8001846:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d014      	beq.n	800187a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001850:	f7ff f96a 	bl	8000b28 <HAL_GetTick>
 8001854:	0003      	movs	r3, r0
 8001856:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001858:	e009      	b.n	800186e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800185a:	f7ff f965 	bl	8000b28 <HAL_GetTick>
 800185e:	0002      	movs	r2, r0
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	4aaf      	ldr	r2, [pc, #700]	; (8001b24 <HAL_RCC_OscConfig+0x680>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e19a      	b.n	8001ba4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800186e:	4bac      	ldr	r3, [pc, #688]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	2202      	movs	r2, #2
 8001874:	4013      	ands	r3, r2
 8001876:	d0f0      	beq.n	800185a <HAL_RCC_OscConfig+0x3b6>
 8001878:	e013      	b.n	80018a2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187a:	f7ff f955 	bl	8000b28 <HAL_GetTick>
 800187e:	0003      	movs	r3, r0
 8001880:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001882:	e009      	b.n	8001898 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001884:	f7ff f950 	bl	8000b28 <HAL_GetTick>
 8001888:	0002      	movs	r2, r0
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	4aa5      	ldr	r2, [pc, #660]	; (8001b24 <HAL_RCC_OscConfig+0x680>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e185      	b.n	8001ba4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001898:	4ba1      	ldr	r3, [pc, #644]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	2202      	movs	r2, #2
 800189e:	4013      	ands	r3, r2
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018a2:	231f      	movs	r3, #31
 80018a4:	18fb      	adds	r3, r7, r3
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d105      	bne.n	80018b8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ac:	4b9c      	ldr	r3, [pc, #624]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 80018ae:	69da      	ldr	r2, [r3, #28]
 80018b0:	4b9b      	ldr	r3, [pc, #620]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 80018b2:	499d      	ldr	r1, [pc, #628]	; (8001b28 <HAL_RCC_OscConfig+0x684>)
 80018b4:	400a      	ands	r2, r1
 80018b6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2210      	movs	r2, #16
 80018be:	4013      	ands	r3, r2
 80018c0:	d063      	beq.n	800198a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d12a      	bne.n	8001920 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80018ca:	4b95      	ldr	r3, [pc, #596]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 80018cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ce:	4b94      	ldr	r3, [pc, #592]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 80018d0:	2104      	movs	r1, #4
 80018d2:	430a      	orrs	r2, r1
 80018d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80018d6:	4b92      	ldr	r3, [pc, #584]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 80018d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018da:	4b91      	ldr	r3, [pc, #580]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 80018dc:	2101      	movs	r1, #1
 80018de:	430a      	orrs	r2, r1
 80018e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e2:	f7ff f921 	bl	8000b28 <HAL_GetTick>
 80018e6:	0003      	movs	r3, r0
 80018e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018ec:	f7ff f91c 	bl	8000b28 <HAL_GetTick>
 80018f0:	0002      	movs	r2, r0
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e152      	b.n	8001ba4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80018fe:	4b88      	ldr	r3, [pc, #544]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 8001900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001902:	2202      	movs	r2, #2
 8001904:	4013      	ands	r3, r2
 8001906:	d0f1      	beq.n	80018ec <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001908:	4b85      	ldr	r3, [pc, #532]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 800190a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800190c:	22f8      	movs	r2, #248	; 0xf8
 800190e:	4393      	bics	r3, r2
 8001910:	0019      	movs	r1, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	00da      	lsls	r2, r3, #3
 8001918:	4b81      	ldr	r3, [pc, #516]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 800191a:	430a      	orrs	r2, r1
 800191c:	635a      	str	r2, [r3, #52]	; 0x34
 800191e:	e034      	b.n	800198a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	3305      	adds	r3, #5
 8001926:	d111      	bne.n	800194c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001928:	4b7d      	ldr	r3, [pc, #500]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 800192a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800192c:	4b7c      	ldr	r3, [pc, #496]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 800192e:	2104      	movs	r1, #4
 8001930:	438a      	bics	r2, r1
 8001932:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001934:	4b7a      	ldr	r3, [pc, #488]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 8001936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001938:	22f8      	movs	r2, #248	; 0xf8
 800193a:	4393      	bics	r3, r2
 800193c:	0019      	movs	r1, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	00da      	lsls	r2, r3, #3
 8001944:	4b76      	ldr	r3, [pc, #472]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 8001946:	430a      	orrs	r2, r1
 8001948:	635a      	str	r2, [r3, #52]	; 0x34
 800194a:	e01e      	b.n	800198a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800194c:	4b74      	ldr	r3, [pc, #464]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 800194e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001950:	4b73      	ldr	r3, [pc, #460]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 8001952:	2104      	movs	r1, #4
 8001954:	430a      	orrs	r2, r1
 8001956:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001958:	4b71      	ldr	r3, [pc, #452]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 800195a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800195c:	4b70      	ldr	r3, [pc, #448]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 800195e:	2101      	movs	r1, #1
 8001960:	438a      	bics	r2, r1
 8001962:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001964:	f7ff f8e0 	bl	8000b28 <HAL_GetTick>
 8001968:	0003      	movs	r3, r0
 800196a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800196e:	f7ff f8db 	bl	8000b28 <HAL_GetTick>
 8001972:	0002      	movs	r2, r0
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e111      	b.n	8001ba4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001980:	4b67      	ldr	r3, [pc, #412]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 8001982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001984:	2202      	movs	r2, #2
 8001986:	4013      	ands	r3, r2
 8001988:	d1f1      	bne.n	800196e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2220      	movs	r2, #32
 8001990:	4013      	ands	r3, r2
 8001992:	d05c      	beq.n	8001a4e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001994:	4b62      	ldr	r3, [pc, #392]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	220c      	movs	r2, #12
 800199a:	4013      	ands	r3, r2
 800199c:	2b0c      	cmp	r3, #12
 800199e:	d00e      	beq.n	80019be <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80019a0:	4b5f      	ldr	r3, [pc, #380]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	220c      	movs	r2, #12
 80019a6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	d114      	bne.n	80019d6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80019ac:	4b5c      	ldr	r3, [pc, #368]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	23c0      	movs	r3, #192	; 0xc0
 80019b2:	025b      	lsls	r3, r3, #9
 80019b4:	401a      	ands	r2, r3
 80019b6:	23c0      	movs	r3, #192	; 0xc0
 80019b8:	025b      	lsls	r3, r3, #9
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d10b      	bne.n	80019d6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80019be:	4b58      	ldr	r3, [pc, #352]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 80019c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019c2:	2380      	movs	r3, #128	; 0x80
 80019c4:	025b      	lsls	r3, r3, #9
 80019c6:	4013      	ands	r3, r2
 80019c8:	d040      	beq.n	8001a4c <HAL_RCC_OscConfig+0x5a8>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d03c      	beq.n	8001a4c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e0e6      	b.n	8001ba4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d01b      	beq.n	8001a16 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80019de:	4b50      	ldr	r3, [pc, #320]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 80019e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019e2:	4b4f      	ldr	r3, [pc, #316]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 80019e4:	2180      	movs	r1, #128	; 0x80
 80019e6:	0249      	lsls	r1, r1, #9
 80019e8:	430a      	orrs	r2, r1
 80019ea:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ec:	f7ff f89c 	bl	8000b28 <HAL_GetTick>
 80019f0:	0003      	movs	r3, r0
 80019f2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019f6:	f7ff f897 	bl	8000b28 <HAL_GetTick>
 80019fa:	0002      	movs	r2, r0
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e0cd      	b.n	8001ba4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001a08:	4b45      	ldr	r3, [pc, #276]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 8001a0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	025b      	lsls	r3, r3, #9
 8001a10:	4013      	ands	r3, r2
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x552>
 8001a14:	e01b      	b.n	8001a4e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001a16:	4b42      	ldr	r3, [pc, #264]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 8001a18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a1a:	4b41      	ldr	r3, [pc, #260]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 8001a1c:	4943      	ldr	r1, [pc, #268]	; (8001b2c <HAL_RCC_OscConfig+0x688>)
 8001a1e:	400a      	ands	r2, r1
 8001a20:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a22:	f7ff f881 	bl	8000b28 <HAL_GetTick>
 8001a26:	0003      	movs	r3, r0
 8001a28:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a2c:	f7ff f87c 	bl	8000b28 <HAL_GetTick>
 8001a30:	0002      	movs	r2, r0
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e0b2      	b.n	8001ba4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001a3e:	4b38      	ldr	r3, [pc, #224]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 8001a40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a42:	2380      	movs	r3, #128	; 0x80
 8001a44:	025b      	lsls	r3, r3, #9
 8001a46:	4013      	ands	r3, r2
 8001a48:	d1f0      	bne.n	8001a2c <HAL_RCC_OscConfig+0x588>
 8001a4a:	e000      	b.n	8001a4e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001a4c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d100      	bne.n	8001a58 <HAL_RCC_OscConfig+0x5b4>
 8001a56:	e0a4      	b.n	8001ba2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a58:	4b31      	ldr	r3, [pc, #196]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	220c      	movs	r2, #12
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d100      	bne.n	8001a66 <HAL_RCC_OscConfig+0x5c2>
 8001a64:	e078      	b.n	8001b58 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d14c      	bne.n	8001b08 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a6e:	4b2c      	ldr	r3, [pc, #176]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	4b2b      	ldr	r3, [pc, #172]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 8001a74:	492e      	ldr	r1, [pc, #184]	; (8001b30 <HAL_RCC_OscConfig+0x68c>)
 8001a76:	400a      	ands	r2, r1
 8001a78:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7a:	f7ff f855 	bl	8000b28 <HAL_GetTick>
 8001a7e:	0003      	movs	r3, r0
 8001a80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a84:	f7ff f850 	bl	8000b28 <HAL_GetTick>
 8001a88:	0002      	movs	r2, r0
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e086      	b.n	8001ba4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a96:	4b22      	ldr	r3, [pc, #136]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	2380      	movs	r3, #128	; 0x80
 8001a9c:	049b      	lsls	r3, r3, #18
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d1f0      	bne.n	8001a84 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aa2:	4b1f      	ldr	r3, [pc, #124]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 8001aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa6:	220f      	movs	r2, #15
 8001aa8:	4393      	bics	r3, r2
 8001aaa:	0019      	movs	r1, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ab6:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	4a1e      	ldr	r2, [pc, #120]	; (8001b34 <HAL_RCC_OscConfig+0x690>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	0019      	movs	r1, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 8001acc:	430a      	orrs	r2, r1
 8001ace:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ad0:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 8001ad6:	2180      	movs	r1, #128	; 0x80
 8001ad8:	0449      	lsls	r1, r1, #17
 8001ada:	430a      	orrs	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ade:	f7ff f823 	bl	8000b28 <HAL_GetTick>
 8001ae2:	0003      	movs	r3, r0
 8001ae4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae8:	f7ff f81e 	bl	8000b28 <HAL_GetTick>
 8001aec:	0002      	movs	r2, r0
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e054      	b.n	8001ba4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	2380      	movs	r3, #128	; 0x80
 8001b00:	049b      	lsls	r3, r3, #18
 8001b02:	4013      	ands	r3, r2
 8001b04:	d0f0      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x644>
 8001b06:	e04c      	b.n	8001ba2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <HAL_RCC_OscConfig+0x67c>)
 8001b0e:	4908      	ldr	r1, [pc, #32]	; (8001b30 <HAL_RCC_OscConfig+0x68c>)
 8001b10:	400a      	ands	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b14:	f7ff f808 	bl	8000b28 <HAL_GetTick>
 8001b18:	0003      	movs	r3, r0
 8001b1a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b1c:	e015      	b.n	8001b4a <HAL_RCC_OscConfig+0x6a6>
 8001b1e:	46c0      	nop			; (mov r8, r8)
 8001b20:	40021000 	.word	0x40021000
 8001b24:	00001388 	.word	0x00001388
 8001b28:	efffffff 	.word	0xefffffff
 8001b2c:	fffeffff 	.word	0xfffeffff
 8001b30:	feffffff 	.word	0xfeffffff
 8001b34:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b38:	f7fe fff6 	bl	8000b28 <HAL_GetTick>
 8001b3c:	0002      	movs	r2, r0
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e02c      	b.n	8001ba4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4a:	4b18      	ldr	r3, [pc, #96]	; (8001bac <HAL_RCC_OscConfig+0x708>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	2380      	movs	r3, #128	; 0x80
 8001b50:	049b      	lsls	r3, r3, #18
 8001b52:	4013      	ands	r3, r2
 8001b54:	d1f0      	bne.n	8001b38 <HAL_RCC_OscConfig+0x694>
 8001b56:	e024      	b.n	8001ba2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e01f      	b.n	8001ba4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001b64:	4b11      	ldr	r3, [pc, #68]	; (8001bac <HAL_RCC_OscConfig+0x708>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <HAL_RCC_OscConfig+0x708>)
 8001b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	23c0      	movs	r3, #192	; 0xc0
 8001b74:	025b      	lsls	r3, r3, #9
 8001b76:	401a      	ands	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d10e      	bne.n	8001b9e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	220f      	movs	r2, #15
 8001b84:	401a      	ands	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d107      	bne.n	8001b9e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	23f0      	movs	r3, #240	; 0xf0
 8001b92:	039b      	lsls	r3, r3, #14
 8001b94:	401a      	ands	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d001      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	b008      	add	sp, #32
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40021000 	.word	0x40021000

08001bb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e0bf      	b.n	8001d44 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc4:	4b61      	ldr	r3, [pc, #388]	; (8001d4c <HAL_RCC_ClockConfig+0x19c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	4013      	ands	r3, r2
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d911      	bls.n	8001bf6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd2:	4b5e      	ldr	r3, [pc, #376]	; (8001d4c <HAL_RCC_ClockConfig+0x19c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	4393      	bics	r3, r2
 8001bda:	0019      	movs	r1, r3
 8001bdc:	4b5b      	ldr	r3, [pc, #364]	; (8001d4c <HAL_RCC_ClockConfig+0x19c>)
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be4:	4b59      	ldr	r3, [pc, #356]	; (8001d4c <HAL_RCC_ClockConfig+0x19c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2201      	movs	r2, #1
 8001bea:	4013      	ands	r3, r2
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d001      	beq.n	8001bf6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e0a6      	b.n	8001d44 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d015      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2204      	movs	r2, #4
 8001c06:	4013      	ands	r3, r2
 8001c08:	d006      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c0a:	4b51      	ldr	r3, [pc, #324]	; (8001d50 <HAL_RCC_ClockConfig+0x1a0>)
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	4b50      	ldr	r3, [pc, #320]	; (8001d50 <HAL_RCC_ClockConfig+0x1a0>)
 8001c10:	21e0      	movs	r1, #224	; 0xe0
 8001c12:	00c9      	lsls	r1, r1, #3
 8001c14:	430a      	orrs	r2, r1
 8001c16:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c18:	4b4d      	ldr	r3, [pc, #308]	; (8001d50 <HAL_RCC_ClockConfig+0x1a0>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	22f0      	movs	r2, #240	; 0xf0
 8001c1e:	4393      	bics	r3, r2
 8001c20:	0019      	movs	r1, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	4b4a      	ldr	r3, [pc, #296]	; (8001d50 <HAL_RCC_ClockConfig+0x1a0>)
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2201      	movs	r2, #1
 8001c32:	4013      	ands	r3, r2
 8001c34:	d04c      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d107      	bne.n	8001c4e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3e:	4b44      	ldr	r3, [pc, #272]	; (8001d50 <HAL_RCC_ClockConfig+0x1a0>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	2380      	movs	r3, #128	; 0x80
 8001c44:	029b      	lsls	r3, r3, #10
 8001c46:	4013      	ands	r3, r2
 8001c48:	d120      	bne.n	8001c8c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e07a      	b.n	8001d44 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d107      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c56:	4b3e      	ldr	r3, [pc, #248]	; (8001d50 <HAL_RCC_ClockConfig+0x1a0>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	2380      	movs	r3, #128	; 0x80
 8001c5c:	049b      	lsls	r3, r3, #18
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d114      	bne.n	8001c8c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e06e      	b.n	8001d44 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b03      	cmp	r3, #3
 8001c6c:	d107      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001c6e:	4b38      	ldr	r3, [pc, #224]	; (8001d50 <HAL_RCC_ClockConfig+0x1a0>)
 8001c70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c72:	2380      	movs	r3, #128	; 0x80
 8001c74:	025b      	lsls	r3, r3, #9
 8001c76:	4013      	ands	r3, r2
 8001c78:	d108      	bne.n	8001c8c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e062      	b.n	8001d44 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7e:	4b34      	ldr	r3, [pc, #208]	; (8001d50 <HAL_RCC_ClockConfig+0x1a0>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2202      	movs	r2, #2
 8001c84:	4013      	ands	r3, r2
 8001c86:	d101      	bne.n	8001c8c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e05b      	b.n	8001d44 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c8c:	4b30      	ldr	r3, [pc, #192]	; (8001d50 <HAL_RCC_ClockConfig+0x1a0>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2203      	movs	r2, #3
 8001c92:	4393      	bics	r3, r2
 8001c94:	0019      	movs	r1, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	4b2d      	ldr	r3, [pc, #180]	; (8001d50 <HAL_RCC_ClockConfig+0x1a0>)
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ca0:	f7fe ff42 	bl	8000b28 <HAL_GetTick>
 8001ca4:	0003      	movs	r3, r0
 8001ca6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca8:	e009      	b.n	8001cbe <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001caa:	f7fe ff3d 	bl	8000b28 <HAL_GetTick>
 8001cae:	0002      	movs	r2, r0
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	4a27      	ldr	r2, [pc, #156]	; (8001d54 <HAL_RCC_ClockConfig+0x1a4>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e042      	b.n	8001d44 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cbe:	4b24      	ldr	r3, [pc, #144]	; (8001d50 <HAL_RCC_ClockConfig+0x1a0>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	220c      	movs	r2, #12
 8001cc4:	401a      	ands	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d1ec      	bne.n	8001caa <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd0:	4b1e      	ldr	r3, [pc, #120]	; (8001d4c <HAL_RCC_ClockConfig+0x19c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d211      	bcs.n	8001d02 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cde:	4b1b      	ldr	r3, [pc, #108]	; (8001d4c <HAL_RCC_ClockConfig+0x19c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	4393      	bics	r3, r2
 8001ce6:	0019      	movs	r1, r3
 8001ce8:	4b18      	ldr	r3, [pc, #96]	; (8001d4c <HAL_RCC_ClockConfig+0x19c>)
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	430a      	orrs	r2, r1
 8001cee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf0:	4b16      	ldr	r3, [pc, #88]	; (8001d4c <HAL_RCC_ClockConfig+0x19c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d001      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e020      	b.n	8001d44 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2204      	movs	r2, #4
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d009      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d0c:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <HAL_RCC_ClockConfig+0x1a0>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	4a11      	ldr	r2, [pc, #68]	; (8001d58 <HAL_RCC_ClockConfig+0x1a8>)
 8001d12:	4013      	ands	r3, r2
 8001d14:	0019      	movs	r1, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68da      	ldr	r2, [r3, #12]
 8001d1a:	4b0d      	ldr	r3, [pc, #52]	; (8001d50 <HAL_RCC_ClockConfig+0x1a0>)
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d20:	f000 f820 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8001d24:	0001      	movs	r1, r0
 8001d26:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <HAL_RCC_ClockConfig+0x1a0>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	091b      	lsrs	r3, r3, #4
 8001d2c:	220f      	movs	r2, #15
 8001d2e:	4013      	ands	r3, r2
 8001d30:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <HAL_RCC_ClockConfig+0x1ac>)
 8001d32:	5cd3      	ldrb	r3, [r2, r3]
 8001d34:	000a      	movs	r2, r1
 8001d36:	40da      	lsrs	r2, r3
 8001d38:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <HAL_RCC_ClockConfig+0x1b0>)
 8001d3a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	f7fe fead 	bl	8000a9c <HAL_InitTick>
  
  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	0018      	movs	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	b004      	add	sp, #16
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40022000 	.word	0x40022000
 8001d50:	40021000 	.word	0x40021000
 8001d54:	00001388 	.word	0x00001388
 8001d58:	fffff8ff 	.word	0xfffff8ff
 8001d5c:	08002d94 	.word	0x08002d94
 8001d60:	20000000 	.word	0x20000000

08001d64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d64:	b590      	push	{r4, r7, lr}
 8001d66:	b08f      	sub	sp, #60	; 0x3c
 8001d68:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001d6a:	2314      	movs	r3, #20
 8001d6c:	18fb      	adds	r3, r7, r3
 8001d6e:	4a37      	ldr	r2, [pc, #220]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xe8>)
 8001d70:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d72:	c313      	stmia	r3!, {r0, r1, r4}
 8001d74:	6812      	ldr	r2, [r2, #0]
 8001d76:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	4a35      	ldr	r2, [pc, #212]	; (8001e50 <HAL_RCC_GetSysClockFreq+0xec>)
 8001d7c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d7e:	c313      	stmia	r3!, {r0, r1, r4}
 8001d80:	6812      	ldr	r2, [r2, #0]
 8001d82:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d88:	2300      	movs	r3, #0
 8001d8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	637b      	str	r3, [r7, #52]	; 0x34
 8001d90:	2300      	movs	r3, #0
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001d98:	4b2e      	ldr	r3, [pc, #184]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da0:	220c      	movs	r2, #12
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	d006      	beq.n	8001db6 <HAL_RCC_GetSysClockFreq+0x52>
 8001da8:	2b0c      	cmp	r3, #12
 8001daa:	d043      	beq.n	8001e34 <HAL_RCC_GetSysClockFreq+0xd0>
 8001dac:	2b04      	cmp	r3, #4
 8001dae:	d144      	bne.n	8001e3a <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001db0:	4b29      	ldr	r3, [pc, #164]	; (8001e58 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001db2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001db4:	e044      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db8:	0c9b      	lsrs	r3, r3, #18
 8001dba:	220f      	movs	r2, #15
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	2214      	movs	r2, #20
 8001dc0:	18ba      	adds	r2, r7, r2
 8001dc2:	5cd3      	ldrb	r3, [r2, r3]
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001dc6:	4b23      	ldr	r3, [pc, #140]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dca:	220f      	movs	r2, #15
 8001dcc:	4013      	ands	r3, r2
 8001dce:	1d3a      	adds	r2, r7, #4
 8001dd0:	5cd3      	ldrb	r3, [r2, r3]
 8001dd2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001dd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dd6:	23c0      	movs	r3, #192	; 0xc0
 8001dd8:	025b      	lsls	r3, r3, #9
 8001dda:	401a      	ands	r2, r3
 8001ddc:	2380      	movs	r3, #128	; 0x80
 8001dde:	025b      	lsls	r3, r3, #9
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d109      	bne.n	8001df8 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001de4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001de6:	481c      	ldr	r0, [pc, #112]	; (8001e58 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001de8:	f7fe f98e 	bl	8000108 <__udivsi3>
 8001dec:	0003      	movs	r3, r0
 8001dee:	001a      	movs	r2, r3
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	4353      	muls	r3, r2
 8001df4:	637b      	str	r3, [r7, #52]	; 0x34
 8001df6:	e01a      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001df8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dfa:	23c0      	movs	r3, #192	; 0xc0
 8001dfc:	025b      	lsls	r3, r3, #9
 8001dfe:	401a      	ands	r2, r3
 8001e00:	23c0      	movs	r3, #192	; 0xc0
 8001e02:	025b      	lsls	r3, r3, #9
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d109      	bne.n	8001e1c <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e0a:	4814      	ldr	r0, [pc, #80]	; (8001e5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e0c:	f7fe f97c 	bl	8000108 <__udivsi3>
 8001e10:	0003      	movs	r3, r0
 8001e12:	001a      	movs	r2, r3
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e16:	4353      	muls	r3, r2
 8001e18:	637b      	str	r3, [r7, #52]	; 0x34
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e1e:	4810      	ldr	r0, [pc, #64]	; (8001e60 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e20:	f7fe f972 	bl	8000108 <__udivsi3>
 8001e24:	0003      	movs	r3, r0
 8001e26:	001a      	movs	r2, r3
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	4353      	muls	r3, r2
 8001e2c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e30:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e32:	e005      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001e34:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e36:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e38:	e002      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e3a:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e3c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e3e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001e42:	0018      	movs	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	b00f      	add	sp, #60	; 0x3c
 8001e48:	bd90      	pop	{r4, r7, pc}
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	08002d74 	.word	0x08002d74
 8001e50:	08002d84 	.word	0x08002d84
 8001e54:	40021000 	.word	0x40021000
 8001e58:	00f42400 	.word	0x00f42400
 8001e5c:	02dc6c00 	.word	0x02dc6c00
 8001e60:	007a1200 	.word	0x007a1200

08001e64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e042      	b.n	8001efc <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	223d      	movs	r2, #61	; 0x3d
 8001e7a:	5c9b      	ldrb	r3, [r3, r2]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d107      	bne.n	8001e92 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	223c      	movs	r2, #60	; 0x3c
 8001e86:	2100      	movs	r1, #0
 8001e88:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	f7fe fb55 	bl	800053c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	223d      	movs	r2, #61	; 0x3d
 8001e96:	2102      	movs	r1, #2
 8001e98:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	0019      	movs	r1, r3
 8001ea4:	0010      	movs	r0, r2
 8001ea6:	f000 fc2f 	bl	8002708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2246      	movs	r2, #70	; 0x46
 8001eae:	2101      	movs	r1, #1
 8001eb0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	223e      	movs	r2, #62	; 0x3e
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	5499      	strb	r1, [r3, r2]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	223f      	movs	r2, #63	; 0x3f
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	5499      	strb	r1, [r3, r2]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2240      	movs	r2, #64	; 0x40
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	5499      	strb	r1, [r3, r2]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2241      	movs	r2, #65	; 0x41
 8001ece:	2101      	movs	r1, #1
 8001ed0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2242      	movs	r2, #66	; 0x42
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	5499      	strb	r1, [r3, r2]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2243      	movs	r2, #67	; 0x43
 8001ede:	2101      	movs	r1, #1
 8001ee0:	5499      	strb	r1, [r3, r2]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2244      	movs	r2, #68	; 0x44
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	5499      	strb	r1, [r3, r2]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2245      	movs	r2, #69	; 0x45
 8001eee:	2101      	movs	r1, #1
 8001ef0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	223d      	movs	r2, #61	; 0x3d
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	0018      	movs	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	b002      	add	sp, #8
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
 8001f10:	001a      	movs	r2, r3
 8001f12:	1cbb      	adds	r3, r7, #2
 8001f14:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d108      	bne.n	8001f2e <HAL_TIM_PWM_Start_DMA+0x2a>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	223e      	movs	r2, #62	; 0x3e
 8001f20:	5c9b      	ldrb	r3, [r3, r2]
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	3b02      	subs	r3, #2
 8001f26:	425a      	negs	r2, r3
 8001f28:	4153      	adcs	r3, r2
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	e01f      	b.n	8001f6e <HAL_TIM_PWM_Start_DMA+0x6a>
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	d108      	bne.n	8001f46 <HAL_TIM_PWM_Start_DMA+0x42>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	223f      	movs	r2, #63	; 0x3f
 8001f38:	5c9b      	ldrb	r3, [r3, r2]
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	3b02      	subs	r3, #2
 8001f3e:	425a      	negs	r2, r3
 8001f40:	4153      	adcs	r3, r2
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	e013      	b.n	8001f6e <HAL_TIM_PWM_Start_DMA+0x6a>
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d108      	bne.n	8001f5e <HAL_TIM_PWM_Start_DMA+0x5a>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2240      	movs	r2, #64	; 0x40
 8001f50:	5c9b      	ldrb	r3, [r3, r2]
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	3b02      	subs	r3, #2
 8001f56:	425a      	negs	r2, r3
 8001f58:	4153      	adcs	r3, r2
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	e007      	b.n	8001f6e <HAL_TIM_PWM_Start_DMA+0x6a>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2241      	movs	r2, #65	; 0x41
 8001f62:	5c9b      	ldrb	r3, [r3, r2]
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	3b02      	subs	r3, #2
 8001f68:	425a      	negs	r2, r3
 8001f6a:	4153      	adcs	r3, r2
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_TIM_PWM_Start_DMA+0x72>
  {
    return HAL_BUSY;
 8001f72:	2302      	movs	r3, #2
 8001f74:	e14f      	b.n	8002216 <HAL_TIM_PWM_Start_DMA+0x312>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d108      	bne.n	8001f8e <HAL_TIM_PWM_Start_DMA+0x8a>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	223e      	movs	r2, #62	; 0x3e
 8001f80:	5c9b      	ldrb	r3, [r3, r2]
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	3b01      	subs	r3, #1
 8001f86:	425a      	negs	r2, r3
 8001f88:	4153      	adcs	r3, r2
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	e01f      	b.n	8001fce <HAL_TIM_PWM_Start_DMA+0xca>
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	2b04      	cmp	r3, #4
 8001f92:	d108      	bne.n	8001fa6 <HAL_TIM_PWM_Start_DMA+0xa2>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	223f      	movs	r2, #63	; 0x3f
 8001f98:	5c9b      	ldrb	r3, [r3, r2]
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	425a      	negs	r2, r3
 8001fa0:	4153      	adcs	r3, r2
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	e013      	b.n	8001fce <HAL_TIM_PWM_Start_DMA+0xca>
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	d108      	bne.n	8001fbe <HAL_TIM_PWM_Start_DMA+0xba>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2240      	movs	r2, #64	; 0x40
 8001fb0:	5c9b      	ldrb	r3, [r3, r2]
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	425a      	negs	r2, r3
 8001fb8:	4153      	adcs	r3, r2
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	e007      	b.n	8001fce <HAL_TIM_PWM_Start_DMA+0xca>
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2241      	movs	r2, #65	; 0x41
 8001fc2:	5c9b      	ldrb	r3, [r3, r2]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	425a      	negs	r2, r3
 8001fca:	4153      	adcs	r3, r2
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d025      	beq.n	800201e <HAL_TIM_PWM_Start_DMA+0x11a>
  {
    if ((pData == NULL) && (Length > 0U))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d105      	bne.n	8001fe4 <HAL_TIM_PWM_Start_DMA+0xe0>
 8001fd8:	1cbb      	adds	r3, r7, #2
 8001fda:	881b      	ldrh	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <HAL_TIM_PWM_Start_DMA+0xe0>
    {
      return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e118      	b.n	8002216 <HAL_TIM_PWM_Start_DMA+0x312>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d104      	bne.n	8001ff4 <HAL_TIM_PWM_Start_DMA+0xf0>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	223e      	movs	r2, #62	; 0x3e
 8001fee:	2102      	movs	r1, #2
 8001ff0:	5499      	strb	r1, [r3, r2]
 8001ff2:	e016      	b.n	8002022 <HAL_TIM_PWM_Start_DMA+0x11e>
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	d104      	bne.n	8002004 <HAL_TIM_PWM_Start_DMA+0x100>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	223f      	movs	r2, #63	; 0x3f
 8001ffe:	2102      	movs	r1, #2
 8002000:	5499      	strb	r1, [r3, r2]
 8002002:	e00e      	b.n	8002022 <HAL_TIM_PWM_Start_DMA+0x11e>
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2b08      	cmp	r3, #8
 8002008:	d104      	bne.n	8002014 <HAL_TIM_PWM_Start_DMA+0x110>
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2240      	movs	r2, #64	; 0x40
 800200e:	2102      	movs	r1, #2
 8002010:	5499      	strb	r1, [r3, r2]
 8002012:	e006      	b.n	8002022 <HAL_TIM_PWM_Start_DMA+0x11e>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2241      	movs	r2, #65	; 0x41
 8002018:	2102      	movs	r1, #2
 800201a:	5499      	strb	r1, [r3, r2]
 800201c:	e001      	b.n	8002022 <HAL_TIM_PWM_Start_DMA+0x11e>
    }
  }
  else
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e0f9      	b.n	8002216 <HAL_TIM_PWM_Start_DMA+0x312>
  }

  switch (Channel)
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	2b04      	cmp	r3, #4
 8002026:	d02e      	beq.n	8002086 <HAL_TIM_PWM_Start_DMA+0x182>
 8002028:	d802      	bhi.n	8002030 <HAL_TIM_PWM_Start_DMA+0x12c>
 800202a:	2b00      	cmp	r3, #0
 800202c:	d006      	beq.n	800203c <HAL_TIM_PWM_Start_DMA+0x138>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
      break;
    }

    default:
      break;
 800202e:	e099      	b.n	8002164 <HAL_TIM_PWM_Start_DMA+0x260>
  switch (Channel)
 8002030:	2b08      	cmp	r3, #8
 8002032:	d04d      	beq.n	80020d0 <HAL_TIM_PWM_Start_DMA+0x1cc>
 8002034:	2b0c      	cmp	r3, #12
 8002036:	d100      	bne.n	800203a <HAL_TIM_PWM_Start_DMA+0x136>
 8002038:	e06f      	b.n	800211a <HAL_TIM_PWM_Start_DMA+0x216>
      break;
 800203a:	e093      	b.n	8002164 <HAL_TIM_PWM_Start_DMA+0x260>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	4a77      	ldr	r2, [pc, #476]	; (8002220 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8002042:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	4a76      	ldr	r2, [pc, #472]	; (8002224 <HAL_TIM_PWM_Start_DMA+0x320>)
 800204a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002050:	4a75      	ldr	r2, [pc, #468]	; (8002228 <HAL_TIM_PWM_Start_DMA+0x324>)
 8002052:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	3334      	adds	r3, #52	; 0x34
 8002060:	001a      	movs	r2, r3
 8002062:	1cbb      	adds	r3, r7, #2
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	f7fe feb1 	bl	8000dcc <HAL_DMA_Start_IT>
 800206a:	1e03      	subs	r3, r0, #0
 800206c:	d001      	beq.n	8002072 <HAL_TIM_PWM_Start_DMA+0x16e>
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e0d1      	b.n	8002216 <HAL_TIM_PWM_Start_DMA+0x312>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2180      	movs	r1, #128	; 0x80
 800207e:	0089      	lsls	r1, r1, #2
 8002080:	430a      	orrs	r2, r1
 8002082:	60da      	str	r2, [r3, #12]
      break;
 8002084:	e06e      	b.n	8002164 <HAL_TIM_PWM_Start_DMA+0x260>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208a:	4a65      	ldr	r2, [pc, #404]	; (8002220 <HAL_TIM_PWM_Start_DMA+0x31c>)
 800208c:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002092:	4a64      	ldr	r2, [pc, #400]	; (8002224 <HAL_TIM_PWM_Start_DMA+0x320>)
 8002094:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209a:	4a63      	ldr	r2, [pc, #396]	; (8002228 <HAL_TIM_PWM_Start_DMA+0x324>)
 800209c:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	3338      	adds	r3, #56	; 0x38
 80020aa:	001a      	movs	r2, r3
 80020ac:	1cbb      	adds	r3, r7, #2
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	f7fe fe8c 	bl	8000dcc <HAL_DMA_Start_IT>
 80020b4:	1e03      	subs	r3, r0, #0
 80020b6:	d001      	beq.n	80020bc <HAL_TIM_PWM_Start_DMA+0x1b8>
        return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e0ac      	b.n	8002216 <HAL_TIM_PWM_Start_DMA+0x312>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68da      	ldr	r2, [r3, #12]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2180      	movs	r1, #128	; 0x80
 80020c8:	00c9      	lsls	r1, r1, #3
 80020ca:	430a      	orrs	r2, r1
 80020cc:	60da      	str	r2, [r3, #12]
      break;
 80020ce:	e049      	b.n	8002164 <HAL_TIM_PWM_Start_DMA+0x260>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d4:	4a52      	ldr	r2, [pc, #328]	; (8002220 <HAL_TIM_PWM_Start_DMA+0x31c>)
 80020d6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020dc:	4a51      	ldr	r2, [pc, #324]	; (8002224 <HAL_TIM_PWM_Start_DMA+0x320>)
 80020de:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e4:	4a50      	ldr	r2, [pc, #320]	; (8002228 <HAL_TIM_PWM_Start_DMA+0x324>)
 80020e6:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	333c      	adds	r3, #60	; 0x3c
 80020f4:	001a      	movs	r2, r3
 80020f6:	1cbb      	adds	r3, r7, #2
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	f7fe fe67 	bl	8000dcc <HAL_DMA_Start_IT>
 80020fe:	1e03      	subs	r3, r0, #0
 8002100:	d001      	beq.n	8002106 <HAL_TIM_PWM_Start_DMA+0x202>
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e087      	b.n	8002216 <HAL_TIM_PWM_Start_DMA+0x312>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2180      	movs	r1, #128	; 0x80
 8002112:	0109      	lsls	r1, r1, #4
 8002114:	430a      	orrs	r2, r1
 8002116:	60da      	str	r2, [r3, #12]
      break;
 8002118:	e024      	b.n	8002164 <HAL_TIM_PWM_Start_DMA+0x260>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	4a40      	ldr	r2, [pc, #256]	; (8002220 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8002120:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a3f      	ldr	r2, [pc, #252]	; (8002224 <HAL_TIM_PWM_Start_DMA+0x320>)
 8002128:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	4a3e      	ldr	r2, [pc, #248]	; (8002228 <HAL_TIM_PWM_Start_DMA+0x324>)
 8002130:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	3340      	adds	r3, #64	; 0x40
 800213e:	001a      	movs	r2, r3
 8002140:	1cbb      	adds	r3, r7, #2
 8002142:	881b      	ldrh	r3, [r3, #0]
 8002144:	f7fe fe42 	bl	8000dcc <HAL_DMA_Start_IT>
 8002148:	1e03      	subs	r3, r0, #0
 800214a:	d001      	beq.n	8002150 <HAL_TIM_PWM_Start_DMA+0x24c>
        return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e062      	b.n	8002216 <HAL_TIM_PWM_Start_DMA+0x312>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2180      	movs	r1, #128	; 0x80
 800215c:	0149      	lsls	r1, r1, #5
 800215e:	430a      	orrs	r2, r1
 8002160:	60da      	str	r2, [r3, #12]
      break;
 8002162:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68b9      	ldr	r1, [r7, #8]
 800216a:	2201      	movs	r2, #1
 800216c:	0018      	movs	r0, r3
 800216e:	f000 fd47 	bl	8002c00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a2d      	ldr	r2, [pc, #180]	; (800222c <HAL_TIM_PWM_Start_DMA+0x328>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d00e      	beq.n	800219a <HAL_TIM_PWM_Start_DMA+0x296>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a2b      	ldr	r2, [pc, #172]	; (8002230 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d009      	beq.n	800219a <HAL_TIM_PWM_Start_DMA+0x296>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a2a      	ldr	r2, [pc, #168]	; (8002234 <HAL_TIM_PWM_Start_DMA+0x330>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d004      	beq.n	800219a <HAL_TIM_PWM_Start_DMA+0x296>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a28      	ldr	r2, [pc, #160]	; (8002238 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d101      	bne.n	800219e <HAL_TIM_PWM_Start_DMA+0x29a>
 800219a:	2301      	movs	r3, #1
 800219c:	e000      	b.n	80021a0 <HAL_TIM_PWM_Start_DMA+0x29c>
 800219e:	2300      	movs	r3, #0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d008      	beq.n	80021b6 <HAL_TIM_PWM_Start_DMA+0x2b2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2180      	movs	r1, #128	; 0x80
 80021b0:	0209      	lsls	r1, r1, #8
 80021b2:	430a      	orrs	r2, r1
 80021b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a1c      	ldr	r2, [pc, #112]	; (800222c <HAL_TIM_PWM_Start_DMA+0x328>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d00f      	beq.n	80021e0 <HAL_TIM_PWM_Start_DMA+0x2dc>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	2380      	movs	r3, #128	; 0x80
 80021c6:	05db      	lsls	r3, r3, #23
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d009      	beq.n	80021e0 <HAL_TIM_PWM_Start_DMA+0x2dc>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a1a      	ldr	r2, [pc, #104]	; (800223c <HAL_TIM_PWM_Start_DMA+0x338>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d004      	beq.n	80021e0 <HAL_TIM_PWM_Start_DMA+0x2dc>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a15      	ldr	r2, [pc, #84]	; (8002230 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d111      	bne.n	8002204 <HAL_TIM_PWM_Start_DMA+0x300>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	2207      	movs	r2, #7
 80021e8:	4013      	ands	r3, r2
 80021ea:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	2b06      	cmp	r3, #6
 80021f0:	d010      	beq.n	8002214 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      __HAL_TIM_ENABLE(htim);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2101      	movs	r1, #1
 80021fe:	430a      	orrs	r2, r1
 8002200:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002202:	e007      	b.n	8002214 <HAL_TIM_PWM_Start_DMA+0x310>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2101      	movs	r1, #1
 8002210:	430a      	orrs	r2, r1
 8002212:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	0018      	movs	r0, r3
 8002218:	46bd      	mov	sp, r7
 800221a:	b006      	add	sp, #24
 800221c:	bd80      	pop	{r7, pc}
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	080025f5 	.word	0x080025f5
 8002224:	0800269f 	.word	0x0800269f
 8002228:	08002561 	.word	0x08002561
 800222c:	40012c00 	.word	0x40012c00
 8002230:	40014000 	.word	0x40014000
 8002234:	40014400 	.word	0x40014400
 8002238:	40014800 	.word	0x40014800
 800223c:	40000400 	.word	0x40000400

08002240 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	2b04      	cmp	r3, #4
 800224e:	d016      	beq.n	800227e <HAL_TIM_PWM_Stop_DMA+0x3e>
 8002250:	d802      	bhi.n	8002258 <HAL_TIM_PWM_Stop_DMA+0x18>
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <HAL_TIM_PWM_Stop_DMA+0x22>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
      break;
    }

    default:
      break;
 8002256:	e03c      	b.n	80022d2 <HAL_TIM_PWM_Stop_DMA+0x92>
  switch (Channel)
 8002258:	2b08      	cmp	r3, #8
 800225a:	d01e      	beq.n	800229a <HAL_TIM_PWM_Stop_DMA+0x5a>
 800225c:	2b0c      	cmp	r3, #12
 800225e:	d02a      	beq.n	80022b6 <HAL_TIM_PWM_Stop_DMA+0x76>
      break;
 8002260:	e037      	b.n	80022d2 <HAL_TIM_PWM_Stop_DMA+0x92>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68da      	ldr	r2, [r3, #12]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	494d      	ldr	r1, [pc, #308]	; (80023a4 <HAL_TIM_PWM_Stop_DMA+0x164>)
 800226e:	400a      	ands	r2, r1
 8002270:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002276:	0018      	movs	r0, r3
 8002278:	f7fe fe0e 	bl	8000e98 <HAL_DMA_Abort_IT>
      break;
 800227c:	e029      	b.n	80022d2 <HAL_TIM_PWM_Stop_DMA+0x92>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68da      	ldr	r2, [r3, #12]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4947      	ldr	r1, [pc, #284]	; (80023a8 <HAL_TIM_PWM_Stop_DMA+0x168>)
 800228a:	400a      	ands	r2, r1
 800228c:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002292:	0018      	movs	r0, r3
 8002294:	f7fe fe00 	bl	8000e98 <HAL_DMA_Abort_IT>
      break;
 8002298:	e01b      	b.n	80022d2 <HAL_TIM_PWM_Stop_DMA+0x92>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68da      	ldr	r2, [r3, #12]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4941      	ldr	r1, [pc, #260]	; (80023ac <HAL_TIM_PWM_Stop_DMA+0x16c>)
 80022a6:	400a      	ands	r2, r1
 80022a8:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ae:	0018      	movs	r0, r3
 80022b0:	f7fe fdf2 	bl	8000e98 <HAL_DMA_Abort_IT>
      break;
 80022b4:	e00d      	b.n	80022d2 <HAL_TIM_PWM_Stop_DMA+0x92>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	493b      	ldr	r1, [pc, #236]	; (80023b0 <HAL_TIM_PWM_Stop_DMA+0x170>)
 80022c2:	400a      	ands	r2, r1
 80022c4:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	0018      	movs	r0, r3
 80022cc:	f7fe fde4 	bl	8000e98 <HAL_DMA_Abort_IT>
      break;
 80022d0:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6839      	ldr	r1, [r7, #0]
 80022d8:	2200      	movs	r2, #0
 80022da:	0018      	movs	r0, r3
 80022dc:	f000 fc90 	bl	8002c00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a33      	ldr	r2, [pc, #204]	; (80023b4 <HAL_TIM_PWM_Stop_DMA+0x174>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d00e      	beq.n	8002308 <HAL_TIM_PWM_Stop_DMA+0xc8>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a32      	ldr	r2, [pc, #200]	; (80023b8 <HAL_TIM_PWM_Stop_DMA+0x178>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d009      	beq.n	8002308 <HAL_TIM_PWM_Stop_DMA+0xc8>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a30      	ldr	r2, [pc, #192]	; (80023bc <HAL_TIM_PWM_Stop_DMA+0x17c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d004      	beq.n	8002308 <HAL_TIM_PWM_Stop_DMA+0xc8>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a2f      	ldr	r2, [pc, #188]	; (80023c0 <HAL_TIM_PWM_Stop_DMA+0x180>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d101      	bne.n	800230c <HAL_TIM_PWM_Stop_DMA+0xcc>
 8002308:	2301      	movs	r3, #1
 800230a:	e000      	b.n	800230e <HAL_TIM_PWM_Stop_DMA+0xce>
 800230c:	2300      	movs	r3, #0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d013      	beq.n	800233a <HAL_TIM_PWM_Stop_DMA+0xfa>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	4a2a      	ldr	r2, [pc, #168]	; (80023c4 <HAL_TIM_PWM_Stop_DMA+0x184>)
 800231a:	4013      	ands	r3, r2
 800231c:	d10d      	bne.n	800233a <HAL_TIM_PWM_Stop_DMA+0xfa>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	4a28      	ldr	r2, [pc, #160]	; (80023c8 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8002326:	4013      	ands	r3, r2
 8002328:	d107      	bne.n	800233a <HAL_TIM_PWM_Stop_DMA+0xfa>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4925      	ldr	r1, [pc, #148]	; (80023cc <HAL_TIM_PWM_Stop_DMA+0x18c>)
 8002336:	400a      	ands	r2, r1
 8002338:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	4a20      	ldr	r2, [pc, #128]	; (80023c4 <HAL_TIM_PWM_Stop_DMA+0x184>)
 8002342:	4013      	ands	r3, r2
 8002344:	d10d      	bne.n	8002362 <HAL_TIM_PWM_Stop_DMA+0x122>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	4a1e      	ldr	r2, [pc, #120]	; (80023c8 <HAL_TIM_PWM_Stop_DMA+0x188>)
 800234e:	4013      	ands	r3, r2
 8002350:	d107      	bne.n	8002362 <HAL_TIM_PWM_Stop_DMA+0x122>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2101      	movs	r1, #1
 800235e:	438a      	bics	r2, r1
 8002360:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d104      	bne.n	8002372 <HAL_TIM_PWM_Stop_DMA+0x132>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	223e      	movs	r2, #62	; 0x3e
 800236c:	2101      	movs	r1, #1
 800236e:	5499      	strb	r1, [r3, r2]
 8002370:	e013      	b.n	800239a <HAL_TIM_PWM_Stop_DMA+0x15a>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	2b04      	cmp	r3, #4
 8002376:	d104      	bne.n	8002382 <HAL_TIM_PWM_Stop_DMA+0x142>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	223f      	movs	r2, #63	; 0x3f
 800237c:	2101      	movs	r1, #1
 800237e:	5499      	strb	r1, [r3, r2]
 8002380:	e00b      	b.n	800239a <HAL_TIM_PWM_Stop_DMA+0x15a>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2b08      	cmp	r3, #8
 8002386:	d104      	bne.n	8002392 <HAL_TIM_PWM_Stop_DMA+0x152>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2240      	movs	r2, #64	; 0x40
 800238c:	2101      	movs	r1, #1
 800238e:	5499      	strb	r1, [r3, r2]
 8002390:	e003      	b.n	800239a <HAL_TIM_PWM_Stop_DMA+0x15a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2241      	movs	r2, #65	; 0x41
 8002396:	2101      	movs	r1, #1
 8002398:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	0018      	movs	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	b002      	add	sp, #8
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	fffffdff 	.word	0xfffffdff
 80023a8:	fffffbff 	.word	0xfffffbff
 80023ac:	fffff7ff 	.word	0xfffff7ff
 80023b0:	ffffefff 	.word	0xffffefff
 80023b4:	40012c00 	.word	0x40012c00
 80023b8:	40014000 	.word	0x40014000
 80023bc:	40014400 	.word	0x40014400
 80023c0:	40014800 	.word	0x40014800
 80023c4:	00001111 	.word	0x00001111
 80023c8:	00000444 	.word	0x00000444
 80023cc:	ffff7fff 	.word	0xffff7fff

080023d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	223c      	movs	r2, #60	; 0x3c
 80023e0:	5c9b      	ldrb	r3, [r3, r2]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d101      	bne.n	80023ea <HAL_TIM_PWM_ConfigChannel+0x1a>
 80023e6:	2302      	movs	r3, #2
 80023e8:	e09c      	b.n	8002524 <HAL_TIM_PWM_ConfigChannel+0x154>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	223c      	movs	r2, #60	; 0x3c
 80023ee:	2101      	movs	r1, #1
 80023f0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b04      	cmp	r3, #4
 80023f6:	d029      	beq.n	800244c <HAL_TIM_PWM_ConfigChannel+0x7c>
 80023f8:	d802      	bhi.n	8002400 <HAL_TIM_PWM_ConfigChannel+0x30>
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d005      	beq.n	800240a <HAL_TIM_PWM_ConfigChannel+0x3a>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 80023fe:	e08c      	b.n	800251a <HAL_TIM_PWM_ConfigChannel+0x14a>
  switch (Channel)
 8002400:	2b08      	cmp	r3, #8
 8002402:	d046      	beq.n	8002492 <HAL_TIM_PWM_ConfigChannel+0xc2>
 8002404:	2b0c      	cmp	r3, #12
 8002406:	d065      	beq.n	80024d4 <HAL_TIM_PWM_ConfigChannel+0x104>
      break;
 8002408:	e087      	b.n	800251a <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	0011      	movs	r1, r2
 8002412:	0018      	movs	r0, r3
 8002414:	f000 f9f8 	bl	8002808 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	699a      	ldr	r2, [r3, #24]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2108      	movs	r1, #8
 8002424:	430a      	orrs	r2, r1
 8002426:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	699a      	ldr	r2, [r3, #24]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2104      	movs	r1, #4
 8002434:	438a      	bics	r2, r1
 8002436:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6999      	ldr	r1, [r3, #24]
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	691a      	ldr	r2, [r3, #16]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	430a      	orrs	r2, r1
 8002448:	619a      	str	r2, [r3, #24]
      break;
 800244a:	e066      	b.n	800251a <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	0011      	movs	r1, r2
 8002454:	0018      	movs	r0, r3
 8002456:	f000 fa5f 	bl	8002918 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	699a      	ldr	r2, [r3, #24]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2180      	movs	r1, #128	; 0x80
 8002466:	0109      	lsls	r1, r1, #4
 8002468:	430a      	orrs	r2, r1
 800246a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	699a      	ldr	r2, [r3, #24]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	492d      	ldr	r1, [pc, #180]	; (800252c <HAL_TIM_PWM_ConfigChannel+0x15c>)
 8002478:	400a      	ands	r2, r1
 800247a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6999      	ldr	r1, [r3, #24]
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	021a      	lsls	r2, r3, #8
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	430a      	orrs	r2, r1
 800248e:	619a      	str	r2, [r3, #24]
      break;
 8002490:	e043      	b.n	800251a <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	0011      	movs	r1, r2
 800249a:	0018      	movs	r0, r3
 800249c:	f000 fac0 	bl	8002a20 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	69da      	ldr	r2, [r3, #28]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2108      	movs	r1, #8
 80024ac:	430a      	orrs	r2, r1
 80024ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	69da      	ldr	r2, [r3, #28]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2104      	movs	r1, #4
 80024bc:	438a      	bics	r2, r1
 80024be:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	69d9      	ldr	r1, [r3, #28]
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	691a      	ldr	r2, [r3, #16]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	61da      	str	r2, [r3, #28]
      break;
 80024d2:	e022      	b.n	800251a <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68ba      	ldr	r2, [r7, #8]
 80024da:	0011      	movs	r1, r2
 80024dc:	0018      	movs	r0, r3
 80024de:	f000 fb25 	bl	8002b2c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	69da      	ldr	r2, [r3, #28]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2180      	movs	r1, #128	; 0x80
 80024ee:	0109      	lsls	r1, r1, #4
 80024f0:	430a      	orrs	r2, r1
 80024f2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	69da      	ldr	r2, [r3, #28]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	490b      	ldr	r1, [pc, #44]	; (800252c <HAL_TIM_PWM_ConfigChannel+0x15c>)
 8002500:	400a      	ands	r2, r1
 8002502:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	69d9      	ldr	r1, [r3, #28]
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	021a      	lsls	r2, r3, #8
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	61da      	str	r2, [r3, #28]
      break;
 8002518:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	223c      	movs	r2, #60	; 0x3c
 800251e:	2100      	movs	r1, #0
 8002520:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	0018      	movs	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	b004      	add	sp, #16
 800252a:	bd80      	pop	{r7, pc}
 800252c:	fffffbff 	.word	0xfffffbff

08002530 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002538:	46c0      	nop			; (mov r8, r8)
 800253a:	46bd      	mov	sp, r7
 800253c:	b002      	add	sp, #8
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002548:	46c0      	nop			; (mov r8, r8)
 800254a:	46bd      	mov	sp, r7
 800254c:	b002      	add	sp, #8
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002558:	46c0      	nop			; (mov r8, r8)
 800255a:	46bd      	mov	sp, r7
 800255c:	b002      	add	sp, #8
 800255e:	bd80      	pop	{r7, pc}

08002560 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	429a      	cmp	r2, r3
 8002576:	d107      	bne.n	8002588 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2201      	movs	r2, #1
 800257c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	223e      	movs	r2, #62	; 0x3e
 8002582:	2101      	movs	r1, #1
 8002584:	5499      	strb	r1, [r3, r2]
 8002586:	e02a      	b.n	80025de <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	429a      	cmp	r2, r3
 8002590:	d107      	bne.n	80025a2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2202      	movs	r2, #2
 8002596:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	223f      	movs	r2, #63	; 0x3f
 800259c:	2101      	movs	r1, #1
 800259e:	5499      	strb	r1, [r3, r2]
 80025a0:	e01d      	b.n	80025de <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d107      	bne.n	80025bc <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2204      	movs	r2, #4
 80025b0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2240      	movs	r2, #64	; 0x40
 80025b6:	2101      	movs	r1, #1
 80025b8:	5499      	strb	r1, [r3, r2]
 80025ba:	e010      	b.n	80025de <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d107      	bne.n	80025d6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2208      	movs	r2, #8
 80025ca:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2241      	movs	r2, #65	; 0x41
 80025d0:	2101      	movs	r1, #1
 80025d2:	5499      	strb	r1, [r3, r2]
 80025d4:	e003      	b.n	80025de <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	223d      	movs	r2, #61	; 0x3d
 80025da:	2101      	movs	r1, #1
 80025dc:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	0018      	movs	r0, r3
 80025e2:	f7ff ffb5 	bl	8002550 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	771a      	strb	r2, [r3, #28]
}
 80025ec:	46c0      	nop			; (mov r8, r8)
 80025ee:	46bd      	mov	sp, r7
 80025f0:	b004      	add	sp, #16
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	429a      	cmp	r2, r3
 800260a:	d10b      	bne.n	8002624 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2201      	movs	r2, #1
 8002610:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d136      	bne.n	8002688 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	223e      	movs	r2, #62	; 0x3e
 800261e:	2101      	movs	r1, #1
 8002620:	5499      	strb	r1, [r3, r2]
 8002622:	e031      	b.n	8002688 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	429a      	cmp	r2, r3
 800262c:	d10b      	bne.n	8002646 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2202      	movs	r2, #2
 8002632:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d125      	bne.n	8002688 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	223f      	movs	r2, #63	; 0x3f
 8002640:	2101      	movs	r1, #1
 8002642:	5499      	strb	r1, [r3, r2]
 8002644:	e020      	b.n	8002688 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	429a      	cmp	r2, r3
 800264e:	d10b      	bne.n	8002668 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2204      	movs	r2, #4
 8002654:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d114      	bne.n	8002688 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2240      	movs	r2, #64	; 0x40
 8002662:	2101      	movs	r1, #1
 8002664:	5499      	strb	r1, [r3, r2]
 8002666:	e00f      	b.n	8002688 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	429a      	cmp	r2, r3
 8002670:	d10a      	bne.n	8002688 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2208      	movs	r2, #8
 8002676:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d103      	bne.n	8002688 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2241      	movs	r2, #65	; 0x41
 8002684:	2101      	movs	r1, #1
 8002686:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	0018      	movs	r0, r3
 800268c:	f7ff ff50 	bl	8002530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	771a      	strb	r2, [r3, #28]
}
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	46bd      	mov	sp, r7
 800269a:	b004      	add	sp, #16
 800269c:	bd80      	pop	{r7, pc}

0800269e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b084      	sub	sp, #16
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d103      	bne.n	80026be <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2201      	movs	r2, #1
 80026ba:	771a      	strb	r2, [r3, #28]
 80026bc:	e019      	b.n	80026f2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d103      	bne.n	80026d0 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2202      	movs	r2, #2
 80026cc:	771a      	strb	r2, [r3, #28]
 80026ce:	e010      	b.n	80026f2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d103      	bne.n	80026e2 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2204      	movs	r2, #4
 80026de:	771a      	strb	r2, [r3, #28]
 80026e0:	e007      	b.n	80026f2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d102      	bne.n	80026f2 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2208      	movs	r2, #8
 80026f0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	0018      	movs	r0, r3
 80026f6:	f7ff ff23 	bl	8002540 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	771a      	strb	r2, [r3, #28]
}
 8002700:	46c0      	nop			; (mov r8, r8)
 8002702:	46bd      	mov	sp, r7
 8002704:	b004      	add	sp, #16
 8002706:	bd80      	pop	{r7, pc}

08002708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a34      	ldr	r2, [pc, #208]	; (80027ec <TIM_Base_SetConfig+0xe4>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d008      	beq.n	8002732 <TIM_Base_SetConfig+0x2a>
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	2380      	movs	r3, #128	; 0x80
 8002724:	05db      	lsls	r3, r3, #23
 8002726:	429a      	cmp	r2, r3
 8002728:	d003      	beq.n	8002732 <TIM_Base_SetConfig+0x2a>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a30      	ldr	r2, [pc, #192]	; (80027f0 <TIM_Base_SetConfig+0xe8>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d108      	bne.n	8002744 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2270      	movs	r2, #112	; 0x70
 8002736:	4393      	bics	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	4313      	orrs	r3, r2
 8002742:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a29      	ldr	r2, [pc, #164]	; (80027ec <TIM_Base_SetConfig+0xe4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d018      	beq.n	800277e <TIM_Base_SetConfig+0x76>
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	2380      	movs	r3, #128	; 0x80
 8002750:	05db      	lsls	r3, r3, #23
 8002752:	429a      	cmp	r2, r3
 8002754:	d013      	beq.n	800277e <TIM_Base_SetConfig+0x76>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a25      	ldr	r2, [pc, #148]	; (80027f0 <TIM_Base_SetConfig+0xe8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d00f      	beq.n	800277e <TIM_Base_SetConfig+0x76>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a24      	ldr	r2, [pc, #144]	; (80027f4 <TIM_Base_SetConfig+0xec>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d00b      	beq.n	800277e <TIM_Base_SetConfig+0x76>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a23      	ldr	r2, [pc, #140]	; (80027f8 <TIM_Base_SetConfig+0xf0>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d007      	beq.n	800277e <TIM_Base_SetConfig+0x76>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a22      	ldr	r2, [pc, #136]	; (80027fc <TIM_Base_SetConfig+0xf4>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d003      	beq.n	800277e <TIM_Base_SetConfig+0x76>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a21      	ldr	r2, [pc, #132]	; (8002800 <TIM_Base_SetConfig+0xf8>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d108      	bne.n	8002790 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	4a20      	ldr	r2, [pc, #128]	; (8002804 <TIM_Base_SetConfig+0xfc>)
 8002782:	4013      	ands	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	4313      	orrs	r3, r2
 800278e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2280      	movs	r2, #128	; 0x80
 8002794:	4393      	bics	r3, r2
 8002796:	001a      	movs	r2, r3
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	4313      	orrs	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a0c      	ldr	r2, [pc, #48]	; (80027ec <TIM_Base_SetConfig+0xe4>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d00b      	beq.n	80027d6 <TIM_Base_SetConfig+0xce>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a0d      	ldr	r2, [pc, #52]	; (80027f8 <TIM_Base_SetConfig+0xf0>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d007      	beq.n	80027d6 <TIM_Base_SetConfig+0xce>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a0c      	ldr	r2, [pc, #48]	; (80027fc <TIM_Base_SetConfig+0xf4>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d003      	beq.n	80027d6 <TIM_Base_SetConfig+0xce>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a0b      	ldr	r2, [pc, #44]	; (8002800 <TIM_Base_SetConfig+0xf8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d103      	bne.n	80027de <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	691a      	ldr	r2, [r3, #16]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	615a      	str	r2, [r3, #20]
}
 80027e4:	46c0      	nop			; (mov r8, r8)
 80027e6:	46bd      	mov	sp, r7
 80027e8:	b004      	add	sp, #16
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40012c00 	.word	0x40012c00
 80027f0:	40000400 	.word	0x40000400
 80027f4:	40002000 	.word	0x40002000
 80027f8:	40014000 	.word	0x40014000
 80027fc:	40014400 	.word	0x40014400
 8002800:	40014800 	.word	0x40014800
 8002804:	fffffcff 	.word	0xfffffcff

08002808 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	2201      	movs	r2, #1
 8002818:	4393      	bics	r3, r2
 800281a:	001a      	movs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2270      	movs	r2, #112	; 0x70
 8002836:	4393      	bics	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2203      	movs	r2, #3
 800283e:	4393      	bics	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	4313      	orrs	r3, r2
 800284a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	2202      	movs	r2, #2
 8002850:	4393      	bics	r3, r2
 8002852:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	4313      	orrs	r3, r2
 800285c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a27      	ldr	r2, [pc, #156]	; (8002900 <TIM_OC1_SetConfig+0xf8>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d00b      	beq.n	800287e <TIM_OC1_SetConfig+0x76>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a26      	ldr	r2, [pc, #152]	; (8002904 <TIM_OC1_SetConfig+0xfc>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d007      	beq.n	800287e <TIM_OC1_SetConfig+0x76>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a25      	ldr	r2, [pc, #148]	; (8002908 <TIM_OC1_SetConfig+0x100>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d003      	beq.n	800287e <TIM_OC1_SetConfig+0x76>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a24      	ldr	r2, [pc, #144]	; (800290c <TIM_OC1_SetConfig+0x104>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d10c      	bne.n	8002898 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	2208      	movs	r2, #8
 8002882:	4393      	bics	r3, r2
 8002884:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	4313      	orrs	r3, r2
 800288e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2204      	movs	r2, #4
 8002894:	4393      	bics	r3, r2
 8002896:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a19      	ldr	r2, [pc, #100]	; (8002900 <TIM_OC1_SetConfig+0xf8>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d00b      	beq.n	80028b8 <TIM_OC1_SetConfig+0xb0>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a18      	ldr	r2, [pc, #96]	; (8002904 <TIM_OC1_SetConfig+0xfc>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d007      	beq.n	80028b8 <TIM_OC1_SetConfig+0xb0>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a17      	ldr	r2, [pc, #92]	; (8002908 <TIM_OC1_SetConfig+0x100>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d003      	beq.n	80028b8 <TIM_OC1_SetConfig+0xb0>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a16      	ldr	r2, [pc, #88]	; (800290c <TIM_OC1_SetConfig+0x104>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d111      	bne.n	80028dc <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	4a15      	ldr	r2, [pc, #84]	; (8002910 <TIM_OC1_SetConfig+0x108>)
 80028bc:	4013      	ands	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	4a14      	ldr	r2, [pc, #80]	; (8002914 <TIM_OC1_SetConfig+0x10c>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	621a      	str	r2, [r3, #32]
}
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	46bd      	mov	sp, r7
 80028fa:	b006      	add	sp, #24
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	40012c00 	.word	0x40012c00
 8002904:	40014000 	.word	0x40014000
 8002908:	40014400 	.word	0x40014400
 800290c:	40014800 	.word	0x40014800
 8002910:	fffffeff 	.word	0xfffffeff
 8002914:	fffffdff 	.word	0xfffffdff

08002918 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	2210      	movs	r2, #16
 8002928:	4393      	bics	r3, r2
 800292a:	001a      	movs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	4a2e      	ldr	r2, [pc, #184]	; (8002a00 <TIM_OC2_SetConfig+0xe8>)
 8002946:	4013      	ands	r3, r2
 8002948:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4a2d      	ldr	r2, [pc, #180]	; (8002a04 <TIM_OC2_SetConfig+0xec>)
 800294e:	4013      	ands	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	021b      	lsls	r3, r3, #8
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	4313      	orrs	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	2220      	movs	r2, #32
 8002962:	4393      	bics	r3, r2
 8002964:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	4313      	orrs	r3, r2
 8002970:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a24      	ldr	r2, [pc, #144]	; (8002a08 <TIM_OC2_SetConfig+0xf0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d10d      	bne.n	8002996 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2280      	movs	r2, #128	; 0x80
 800297e:	4393      	bics	r3, r2
 8002980:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	4313      	orrs	r3, r2
 800298c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2240      	movs	r2, #64	; 0x40
 8002992:	4393      	bics	r3, r2
 8002994:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a1b      	ldr	r2, [pc, #108]	; (8002a08 <TIM_OC2_SetConfig+0xf0>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d00b      	beq.n	80029b6 <TIM_OC2_SetConfig+0x9e>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a1a      	ldr	r2, [pc, #104]	; (8002a0c <TIM_OC2_SetConfig+0xf4>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d007      	beq.n	80029b6 <TIM_OC2_SetConfig+0x9e>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a19      	ldr	r2, [pc, #100]	; (8002a10 <TIM_OC2_SetConfig+0xf8>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d003      	beq.n	80029b6 <TIM_OC2_SetConfig+0x9e>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a18      	ldr	r2, [pc, #96]	; (8002a14 <TIM_OC2_SetConfig+0xfc>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d113      	bne.n	80029de <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	4a17      	ldr	r2, [pc, #92]	; (8002a18 <TIM_OC2_SetConfig+0x100>)
 80029ba:	4013      	ands	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4a16      	ldr	r2, [pc, #88]	; (8002a1c <TIM_OC2_SetConfig+0x104>)
 80029c2:	4013      	ands	r3, r2
 80029c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	4313      	orrs	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	621a      	str	r2, [r3, #32]
}
 80029f8:	46c0      	nop			; (mov r8, r8)
 80029fa:	46bd      	mov	sp, r7
 80029fc:	b006      	add	sp, #24
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	ffff8fff 	.word	0xffff8fff
 8002a04:	fffffcff 	.word	0xfffffcff
 8002a08:	40012c00 	.word	0x40012c00
 8002a0c:	40014000 	.word	0x40014000
 8002a10:	40014400 	.word	0x40014400
 8002a14:	40014800 	.word	0x40014800
 8002a18:	fffffbff 	.word	0xfffffbff
 8002a1c:	fffff7ff 	.word	0xfffff7ff

08002a20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	4a35      	ldr	r2, [pc, #212]	; (8002b04 <TIM_OC3_SetConfig+0xe4>)
 8002a30:	401a      	ands	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2270      	movs	r2, #112	; 0x70
 8002a4c:	4393      	bics	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2203      	movs	r2, #3
 8002a54:	4393      	bics	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	4a28      	ldr	r2, [pc, #160]	; (8002b08 <TIM_OC3_SetConfig+0xe8>)
 8002a66:	4013      	ands	r3, r2
 8002a68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	021b      	lsls	r3, r3, #8
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a24      	ldr	r2, [pc, #144]	; (8002b0c <TIM_OC3_SetConfig+0xec>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d10d      	bne.n	8002a9a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	4a23      	ldr	r2, [pc, #140]	; (8002b10 <TIM_OC3_SetConfig+0xf0>)
 8002a82:	4013      	ands	r3, r2
 8002a84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	021b      	lsls	r3, r3, #8
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	4a1f      	ldr	r2, [pc, #124]	; (8002b14 <TIM_OC3_SetConfig+0xf4>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a1b      	ldr	r2, [pc, #108]	; (8002b0c <TIM_OC3_SetConfig+0xec>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d00b      	beq.n	8002aba <TIM_OC3_SetConfig+0x9a>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a1c      	ldr	r2, [pc, #112]	; (8002b18 <TIM_OC3_SetConfig+0xf8>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d007      	beq.n	8002aba <TIM_OC3_SetConfig+0x9a>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a1b      	ldr	r2, [pc, #108]	; (8002b1c <TIM_OC3_SetConfig+0xfc>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d003      	beq.n	8002aba <TIM_OC3_SetConfig+0x9a>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a1a      	ldr	r2, [pc, #104]	; (8002b20 <TIM_OC3_SetConfig+0x100>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d113      	bne.n	8002ae2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	4a19      	ldr	r2, [pc, #100]	; (8002b24 <TIM_OC3_SetConfig+0x104>)
 8002abe:	4013      	ands	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4a18      	ldr	r2, [pc, #96]	; (8002b28 <TIM_OC3_SetConfig+0x108>)
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	011b      	lsls	r3, r3, #4
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	011b      	lsls	r3, r3, #4
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	621a      	str	r2, [r3, #32]
}
 8002afc:	46c0      	nop			; (mov r8, r8)
 8002afe:	46bd      	mov	sp, r7
 8002b00:	b006      	add	sp, #24
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	fffffeff 	.word	0xfffffeff
 8002b08:	fffffdff 	.word	0xfffffdff
 8002b0c:	40012c00 	.word	0x40012c00
 8002b10:	fffff7ff 	.word	0xfffff7ff
 8002b14:	fffffbff 	.word	0xfffffbff
 8002b18:	40014000 	.word	0x40014000
 8002b1c:	40014400 	.word	0x40014400
 8002b20:	40014800 	.word	0x40014800
 8002b24:	ffffefff 	.word	0xffffefff
 8002b28:	ffffdfff 	.word	0xffffdfff

08002b2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	4a28      	ldr	r2, [pc, #160]	; (8002bdc <TIM_OC4_SetConfig+0xb0>)
 8002b3c:	401a      	ands	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4a22      	ldr	r2, [pc, #136]	; (8002be0 <TIM_OC4_SetConfig+0xb4>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4a21      	ldr	r2, [pc, #132]	; (8002be4 <TIM_OC4_SetConfig+0xb8>)
 8002b60:	4013      	ands	r3, r2
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	021b      	lsls	r3, r3, #8
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	4a1d      	ldr	r2, [pc, #116]	; (8002be8 <TIM_OC4_SetConfig+0xbc>)
 8002b74:	4013      	ands	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	031b      	lsls	r3, r3, #12
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a19      	ldr	r2, [pc, #100]	; (8002bec <TIM_OC4_SetConfig+0xc0>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d00b      	beq.n	8002ba4 <TIM_OC4_SetConfig+0x78>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a18      	ldr	r2, [pc, #96]	; (8002bf0 <TIM_OC4_SetConfig+0xc4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d007      	beq.n	8002ba4 <TIM_OC4_SetConfig+0x78>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a17      	ldr	r2, [pc, #92]	; (8002bf4 <TIM_OC4_SetConfig+0xc8>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d003      	beq.n	8002ba4 <TIM_OC4_SetConfig+0x78>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a16      	ldr	r2, [pc, #88]	; (8002bf8 <TIM_OC4_SetConfig+0xcc>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d109      	bne.n	8002bb8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	4a15      	ldr	r2, [pc, #84]	; (8002bfc <TIM_OC4_SetConfig+0xd0>)
 8002ba8:	4013      	ands	r3, r2
 8002baa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	019b      	lsls	r3, r3, #6
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	621a      	str	r2, [r3, #32]
}
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	b006      	add	sp, #24
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	ffffefff 	.word	0xffffefff
 8002be0:	ffff8fff 	.word	0xffff8fff
 8002be4:	fffffcff 	.word	0xfffffcff
 8002be8:	ffffdfff 	.word	0xffffdfff
 8002bec:	40012c00 	.word	0x40012c00
 8002bf0:	40014000 	.word	0x40014000
 8002bf4:	40014400 	.word	0x40014400
 8002bf8:	40014800 	.word	0x40014800
 8002bfc:	ffffbfff 	.word	0xffffbfff

08002c00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	221f      	movs	r2, #31
 8002c10:	4013      	ands	r3, r2
 8002c12:	2201      	movs	r2, #1
 8002c14:	409a      	lsls	r2, r3
 8002c16:	0013      	movs	r3, r2
 8002c18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	43d2      	mvns	r2, r2
 8002c22:	401a      	ands	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6a1a      	ldr	r2, [r3, #32]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	211f      	movs	r1, #31
 8002c30:	400b      	ands	r3, r1
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	4099      	lsls	r1, r3
 8002c36:	000b      	movs	r3, r1
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	621a      	str	r2, [r3, #32]
}
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	46bd      	mov	sp, r7
 8002c42:	b006      	add	sp, #24
 8002c44:	bd80      	pop	{r7, pc}
	...

08002c48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	223c      	movs	r2, #60	; 0x3c
 8002c56:	5c9b      	ldrb	r3, [r3, r2]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d101      	bne.n	8002c60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	e047      	b.n	8002cf0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	223c      	movs	r2, #60	; 0x3c
 8002c64:	2101      	movs	r1, #1
 8002c66:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	223d      	movs	r2, #61	; 0x3d
 8002c6c:	2102      	movs	r1, #2
 8002c6e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2270      	movs	r2, #112	; 0x70
 8002c84:	4393      	bics	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a16      	ldr	r2, [pc, #88]	; (8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d00f      	beq.n	8002cc4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	2380      	movs	r3, #128	; 0x80
 8002caa:	05db      	lsls	r3, r3, #23
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d009      	beq.n	8002cc4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a11      	ldr	r2, [pc, #68]	; (8002cfc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d004      	beq.n	8002cc4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a10      	ldr	r2, [pc, #64]	; (8002d00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d10c      	bne.n	8002cde <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	2280      	movs	r2, #128	; 0x80
 8002cc8:	4393      	bics	r3, r2
 8002cca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	223d      	movs	r2, #61	; 0x3d
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	223c      	movs	r2, #60	; 0x3c
 8002cea:	2100      	movs	r1, #0
 8002cec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	b004      	add	sp, #16
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40012c00 	.word	0x40012c00
 8002cfc:	40000400 	.word	0x40000400
 8002d00:	40014000 	.word	0x40014000

08002d04 <__libc_init_array>:
 8002d04:	b570      	push	{r4, r5, r6, lr}
 8002d06:	2600      	movs	r6, #0
 8002d08:	4d0c      	ldr	r5, [pc, #48]	; (8002d3c <__libc_init_array+0x38>)
 8002d0a:	4c0d      	ldr	r4, [pc, #52]	; (8002d40 <__libc_init_array+0x3c>)
 8002d0c:	1b64      	subs	r4, r4, r5
 8002d0e:	10a4      	asrs	r4, r4, #2
 8002d10:	42a6      	cmp	r6, r4
 8002d12:	d109      	bne.n	8002d28 <__libc_init_array+0x24>
 8002d14:	2600      	movs	r6, #0
 8002d16:	f000 f821 	bl	8002d5c <_init>
 8002d1a:	4d0a      	ldr	r5, [pc, #40]	; (8002d44 <__libc_init_array+0x40>)
 8002d1c:	4c0a      	ldr	r4, [pc, #40]	; (8002d48 <__libc_init_array+0x44>)
 8002d1e:	1b64      	subs	r4, r4, r5
 8002d20:	10a4      	asrs	r4, r4, #2
 8002d22:	42a6      	cmp	r6, r4
 8002d24:	d105      	bne.n	8002d32 <__libc_init_array+0x2e>
 8002d26:	bd70      	pop	{r4, r5, r6, pc}
 8002d28:	00b3      	lsls	r3, r6, #2
 8002d2a:	58eb      	ldr	r3, [r5, r3]
 8002d2c:	4798      	blx	r3
 8002d2e:	3601      	adds	r6, #1
 8002d30:	e7ee      	b.n	8002d10 <__libc_init_array+0xc>
 8002d32:	00b3      	lsls	r3, r6, #2
 8002d34:	58eb      	ldr	r3, [r5, r3]
 8002d36:	4798      	blx	r3
 8002d38:	3601      	adds	r6, #1
 8002d3a:	e7f2      	b.n	8002d22 <__libc_init_array+0x1e>
 8002d3c:	08002da4 	.word	0x08002da4
 8002d40:	08002da4 	.word	0x08002da4
 8002d44:	08002da4 	.word	0x08002da4
 8002d48:	08002da8 	.word	0x08002da8

08002d4c <memset>:
 8002d4c:	0003      	movs	r3, r0
 8002d4e:	1812      	adds	r2, r2, r0
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d100      	bne.n	8002d56 <memset+0xa>
 8002d54:	4770      	bx	lr
 8002d56:	7019      	strb	r1, [r3, #0]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	e7f9      	b.n	8002d50 <memset+0x4>

08002d5c <_init>:
 8002d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d62:	bc08      	pop	{r3}
 8002d64:	469e      	mov	lr, r3
 8002d66:	4770      	bx	lr

08002d68 <_fini>:
 8002d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d6e:	bc08      	pop	{r3}
 8002d70:	469e      	mov	lr, r3
 8002d72:	4770      	bx	lr
