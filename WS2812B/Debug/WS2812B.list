
WS2812B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f04  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002fc4  08002fc4  00012fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ff4  08002ff4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002ff4  08002ff4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ff4  08002ff4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ff4  08002ff4  00012ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ff8  08002ff8  00012ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000070  0800306c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  0800306c  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000095e1  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000175c  00000000  00000000  00029679  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009c8  00000000  00000000  0002add8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000900  00000000  00000000  0002b7a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000194a8  00000000  00000000  0002c0a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000086b0  00000000  00000000  00045548  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00093eb8  00000000  00000000  0004dbf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e1ab0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023f0  00000000  00000000  000e1b2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002fac 	.word	0x08002fac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08002fac 	.word	0x08002fac

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <WS2812_Init>:
HAL_StatusTypeDef WS2812_Update(void);
//**************

//=======================================================================================================================
void WS2812_Init(uint16_t size, TIM_HandleTypeDef *h_tim, uint32_t chanel)  //записать в подготавливаемый массив цвето указанного диода
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	60b9      	str	r1, [r7, #8]
 8000228:	607a      	str	r2, [r7, #4]
 800022a:	240e      	movs	r4, #14
 800022c:	193b      	adds	r3, r7, r4
 800022e:	1c02      	adds	r2, r0, #0
 8000230:	801a      	strh	r2, [r3, #0]
	buf = (uint32_t*)malloc((RESET_DELAY+(size*24)+3)* sizeof(uint32_t));
 8000232:	193b      	adds	r3, r7, r4
 8000234:	881a      	ldrh	r2, [r3, #0]
 8000236:	0013      	movs	r3, r2
 8000238:	005b      	lsls	r3, r3, #1
 800023a:	189b      	adds	r3, r3, r2
 800023c:	00db      	lsls	r3, r3, #3
 800023e:	3335      	adds	r3, #53	; 0x35
 8000240:	009b      	lsls	r3, r3, #2
 8000242:	0018      	movs	r0, r3
 8000244:	f002 fe24 	bl	8002e90 <malloc>
 8000248:	0003      	movs	r3, r0
 800024a:	001a      	movs	r2, r3
 800024c:	4b15      	ldr	r3, [pc, #84]	; (80002a4 <WS2812_Init+0x84>)
 800024e:	601a      	str	r2, [r3, #0]
	quantity_led = size;
 8000250:	4b15      	ldr	r3, [pc, #84]	; (80002a8 <WS2812_Init+0x88>)
 8000252:	193a      	adds	r2, r7, r4
 8000254:	8812      	ldrh	r2, [r2, #0]
 8000256:	801a      	strh	r2, [r3, #0]
	array_prepared_values = (uint8_t*)malloc(size*3 * sizeof(uint8_t));
 8000258:	193b      	adds	r3, r7, r4
 800025a:	881a      	ldrh	r2, [r3, #0]
 800025c:	0013      	movs	r3, r2
 800025e:	005b      	lsls	r3, r3, #1
 8000260:	189b      	adds	r3, r3, r2
 8000262:	0018      	movs	r0, r3
 8000264:	f002 fe14 	bl	8002e90 <malloc>
 8000268:	0003      	movs	r3, r0
 800026a:	001a      	movs	r2, r3
 800026c:	4b0f      	ldr	r3, [pc, #60]	; (80002ac <WS2812_Init+0x8c>)
 800026e:	601a      	str	r2, [r3, #0]

	pointer_tim = *h_tim;
 8000270:	4a0f      	ldr	r2, [pc, #60]	; (80002b0 <WS2812_Init+0x90>)
 8000272:	68bb      	ldr	r3, [r7, #8]
 8000274:	0010      	movs	r0, r2
 8000276:	0019      	movs	r1, r3
 8000278:	2348      	movs	r3, #72	; 0x48
 800027a:	001a      	movs	r2, r3
 800027c:	f002 fe12 	bl	8002ea4 <memcpy>
	pointer_tim_chanel = chanel;
 8000280:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <WS2812_Init+0x94>)
 8000282:	687a      	ldr	r2, [r7, #4]
 8000284:	601a      	str	r2, [r3, #0]

	buf_size = RESET_DELAY+(quantity_led*24)*2+4;
 8000286:	4b08      	ldr	r3, [pc, #32]	; (80002a8 <WS2812_Init+0x88>)
 8000288:	881b      	ldrh	r3, [r3, #0]
 800028a:	2230      	movs	r2, #48	; 0x30
 800028c:	4353      	muls	r3, r2
 800028e:	b29b      	uxth	r3, r3
 8000290:	3336      	adds	r3, #54	; 0x36
 8000292:	b29a      	uxth	r2, r3
 8000294:	4b08      	ldr	r3, [pc, #32]	; (80002b8 <WS2812_Init+0x98>)
 8000296:	801a      	strh	r2, [r3, #0]

	delay_ws();
 8000298:	f000 f91e 	bl	80004d8 <delay_ws>
}
 800029c:	46c0      	nop			; (mov r8, r8)
 800029e:	46bd      	mov	sp, r7
 80002a0:	b005      	add	sp, #20
 80002a2:	bd90      	pop	{r4, r7, pc}
 80002a4:	20000130 	.word	0x20000130
 80002a8:	2000008e 	.word	0x2000008e
 80002ac:	2000009c 	.word	0x2000009c
 80002b0:	20000134 	.word	0x20000134
 80002b4:	200000e8 	.word	0x200000e8
 80002b8:	2000008c 	.word	0x2000008c

080002bc <WS2812_setColor_All_Pixel>:


}
//=======================================================================================================================
void WS2812_setColor_All_Pixel(uint16_t R, uint16_t G, uint16_t B) //установить все светодиоды в указанный цвет
{
 80002bc:	b590      	push	{r4, r7, lr}
 80002be:	b085      	sub	sp, #20
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	0004      	movs	r4, r0
 80002c4:	0008      	movs	r0, r1
 80002c6:	0011      	movs	r1, r2
 80002c8:	1dbb      	adds	r3, r7, #6
 80002ca:	1c22      	adds	r2, r4, #0
 80002cc:	801a      	strh	r2, [r3, #0]
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	1c02      	adds	r2, r0, #0
 80002d2:	801a      	strh	r2, [r3, #0]
 80002d4:	1cbb      	adds	r3, r7, #2
 80002d6:	1c0a      	adds	r2, r1, #0
 80002d8:	801a      	strh	r2, [r3, #0]
	//check_value_colors(&R,&G,&B);
	for (int i = 0; i < quantity_led; i++)
 80002da:	2300      	movs	r3, #0
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	e00d      	b.n	80002fc <WS2812_setColor_All_Pixel+0x40>
	{
		WS2812_setColor_Pixel(i, R, G, B);
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	b298      	uxth	r0, r3
 80002e4:	1cbb      	adds	r3, r7, #2
 80002e6:	881c      	ldrh	r4, [r3, #0]
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	881a      	ldrh	r2, [r3, #0]
 80002ec:	1dbb      	adds	r3, r7, #6
 80002ee:	8819      	ldrh	r1, [r3, #0]
 80002f0:	0023      	movs	r3, r4
 80002f2:	f000 f80f 	bl	8000314 <WS2812_setColor_Pixel>
	for (int i = 0; i < quantity_led; i++)
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	3301      	adds	r3, #1
 80002fa:	60fb      	str	r3, [r7, #12]
 80002fc:	4b04      	ldr	r3, [pc, #16]	; (8000310 <WS2812_setColor_All_Pixel+0x54>)
 80002fe:	881b      	ldrh	r3, [r3, #0]
 8000300:	001a      	movs	r2, r3
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	4293      	cmp	r3, r2
 8000306:	dbeb      	blt.n	80002e0 <WS2812_setColor_All_Pixel+0x24>
	}
}
 8000308:	46c0      	nop			; (mov r8, r8)
 800030a:	46bd      	mov	sp, r7
 800030c:	b005      	add	sp, #20
 800030e:	bd90      	pop	{r4, r7, pc}
 8000310:	2000008e 	.word	0x2000008e

08000314 <WS2812_setColor_Pixel>:

//=======================================================================================================================
void WS2812_setColor_Pixel(uint16_t pixel, uint16_t R, uint16_t G, uint16_t B) //установить светодиод под указанным номером в указанный цвет
{
 8000314:	b5b0      	push	{r4, r5, r7, lr}
 8000316:	b086      	sub	sp, #24
 8000318:	af00      	add	r7, sp, #0
 800031a:	0005      	movs	r5, r0
 800031c:	000c      	movs	r4, r1
 800031e:	0010      	movs	r0, r2
 8000320:	0019      	movs	r1, r3
 8000322:	1dbb      	adds	r3, r7, #6
 8000324:	1c2a      	adds	r2, r5, #0
 8000326:	801a      	strh	r2, [r3, #0]
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	1c22      	adds	r2, r4, #0
 800032c:	801a      	strh	r2, [r3, #0]
 800032e:	1cbb      	adds	r3, r7, #2
 8000330:	1c02      	adds	r2, r0, #0
 8000332:	801a      	strh	r2, [r3, #0]
 8000334:	003b      	movs	r3, r7
 8000336:	1c0a      	adds	r2, r1, #0
 8000338:	801a      	strh	r2, [r3, #0]
	check_value_position(&pixel);
 800033a:	1dbb      	adds	r3, r7, #6
 800033c:	0018      	movs	r0, r3
 800033e:	f000 f95d 	bl	80005fc <check_value_position>
	check_value_colors(&R,&G,&B);
 8000342:	003a      	movs	r2, r7
 8000344:	1cb9      	adds	r1, r7, #2
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	0018      	movs	r0, r3
 800034a:	f000 f935 	bl	80005b8 <check_value_colors>

	//GGGGGGGG RRRRRRRR BBBBBBBB //  8+8+8
	//RED -----------------------------------------------------
		for(int i=0; i<8; i++)
 800034e:	2300      	movs	r3, #0
 8000350:	617b      	str	r3, [r7, #20]
 8000352:	e031      	b.n	80003b8 <WS2812_setColor_Pixel+0xa4>
		{
			if (bit_set(R,(7-i)) == 1)
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	881b      	ldrh	r3, [r3, #0]
 8000358:	0018      	movs	r0, r3
 800035a:	697b      	ldr	r3, [r7, #20]
 800035c:	2207      	movs	r2, #7
 800035e:	1ad3      	subs	r3, r2, r3
 8000360:	0019      	movs	r1, r3
 8000362:	f000 f8a3 	bl	80004ac <bit_set>
 8000366:	0003      	movs	r3, r0
 8000368:	2b01      	cmp	r3, #1
 800036a:	d111      	bne.n	8000390 <WS2812_setColor_Pixel+0x7c>
			{
				buf[RESET_DELAY + pixel*24 + 8 + i] = log_1;
 800036c:	4b4e      	ldr	r3, [pc, #312]	; (80004a8 <WS2812_setColor_Pixel+0x194>)
 800036e:	681a      	ldr	r2, [r3, #0]
 8000370:	1dbb      	adds	r3, r7, #6
 8000372:	881b      	ldrh	r3, [r3, #0]
 8000374:	0019      	movs	r1, r3
 8000376:	000b      	movs	r3, r1
 8000378:	005b      	lsls	r3, r3, #1
 800037a:	185b      	adds	r3, r3, r1
 800037c:	00db      	lsls	r3, r3, #3
 800037e:	333a      	adds	r3, #58	; 0x3a
 8000380:	0019      	movs	r1, r3
 8000382:	697b      	ldr	r3, [r7, #20]
 8000384:	18cb      	adds	r3, r1, r3
 8000386:	009b      	lsls	r3, r3, #2
 8000388:	18d3      	adds	r3, r2, r3
 800038a:	2229      	movs	r2, #41	; 0x29
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	e010      	b.n	80003b2 <WS2812_setColor_Pixel+0x9e>
			}
			else
			{
				buf[RESET_DELAY + pixel*24 + 8 + i] = log_0;
 8000390:	4b45      	ldr	r3, [pc, #276]	; (80004a8 <WS2812_setColor_Pixel+0x194>)
 8000392:	681a      	ldr	r2, [r3, #0]
 8000394:	1dbb      	adds	r3, r7, #6
 8000396:	881b      	ldrh	r3, [r3, #0]
 8000398:	0019      	movs	r1, r3
 800039a:	000b      	movs	r3, r1
 800039c:	005b      	lsls	r3, r3, #1
 800039e:	185b      	adds	r3, r3, r1
 80003a0:	00db      	lsls	r3, r3, #3
 80003a2:	333a      	adds	r3, #58	; 0x3a
 80003a4:	0019      	movs	r1, r3
 80003a6:	697b      	ldr	r3, [r7, #20]
 80003a8:	18cb      	adds	r3, r1, r3
 80003aa:	009b      	lsls	r3, r3, #2
 80003ac:	18d3      	adds	r3, r2, r3
 80003ae:	2211      	movs	r2, #17
 80003b0:	601a      	str	r2, [r3, #0]
		for(int i=0; i<8; i++)
 80003b2:	697b      	ldr	r3, [r7, #20]
 80003b4:	3301      	adds	r3, #1
 80003b6:	617b      	str	r3, [r7, #20]
 80003b8:	697b      	ldr	r3, [r7, #20]
 80003ba:	2b07      	cmp	r3, #7
 80003bc:	ddca      	ble.n	8000354 <WS2812_setColor_Pixel+0x40>
			}

		}
	//GREEN -----------------------------------------------------
		for(int i=0; i<8; i++)
 80003be:	2300      	movs	r3, #0
 80003c0:	613b      	str	r3, [r7, #16]
 80003c2:	e031      	b.n	8000428 <WS2812_setColor_Pixel+0x114>
		{
			if (bit_set(G,(7-i)) == 1)
 80003c4:	1cbb      	adds	r3, r7, #2
 80003c6:	881b      	ldrh	r3, [r3, #0]
 80003c8:	0018      	movs	r0, r3
 80003ca:	693b      	ldr	r3, [r7, #16]
 80003cc:	2207      	movs	r2, #7
 80003ce:	1ad3      	subs	r3, r2, r3
 80003d0:	0019      	movs	r1, r3
 80003d2:	f000 f86b 	bl	80004ac <bit_set>
 80003d6:	0003      	movs	r3, r0
 80003d8:	2b01      	cmp	r3, #1
 80003da:	d111      	bne.n	8000400 <WS2812_setColor_Pixel+0xec>
			{
				buf[RESET_DELAY + pixel*24 + 0 + i] = log_1;
 80003dc:	4b32      	ldr	r3, [pc, #200]	; (80004a8 <WS2812_setColor_Pixel+0x194>)
 80003de:	681a      	ldr	r2, [r3, #0]
 80003e0:	1dbb      	adds	r3, r7, #6
 80003e2:	881b      	ldrh	r3, [r3, #0]
 80003e4:	0019      	movs	r1, r3
 80003e6:	000b      	movs	r3, r1
 80003e8:	005b      	lsls	r3, r3, #1
 80003ea:	185b      	adds	r3, r3, r1
 80003ec:	00db      	lsls	r3, r3, #3
 80003ee:	3332      	adds	r3, #50	; 0x32
 80003f0:	0019      	movs	r1, r3
 80003f2:	693b      	ldr	r3, [r7, #16]
 80003f4:	18cb      	adds	r3, r1, r3
 80003f6:	009b      	lsls	r3, r3, #2
 80003f8:	18d3      	adds	r3, r2, r3
 80003fa:	2229      	movs	r2, #41	; 0x29
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	e010      	b.n	8000422 <WS2812_setColor_Pixel+0x10e>
			}
			else
			{
				buf[RESET_DELAY + pixel*24 + 0 + i] = log_0;
 8000400:	4b29      	ldr	r3, [pc, #164]	; (80004a8 <WS2812_setColor_Pixel+0x194>)
 8000402:	681a      	ldr	r2, [r3, #0]
 8000404:	1dbb      	adds	r3, r7, #6
 8000406:	881b      	ldrh	r3, [r3, #0]
 8000408:	0019      	movs	r1, r3
 800040a:	000b      	movs	r3, r1
 800040c:	005b      	lsls	r3, r3, #1
 800040e:	185b      	adds	r3, r3, r1
 8000410:	00db      	lsls	r3, r3, #3
 8000412:	3332      	adds	r3, #50	; 0x32
 8000414:	0019      	movs	r1, r3
 8000416:	693b      	ldr	r3, [r7, #16]
 8000418:	18cb      	adds	r3, r1, r3
 800041a:	009b      	lsls	r3, r3, #2
 800041c:	18d3      	adds	r3, r2, r3
 800041e:	2211      	movs	r2, #17
 8000420:	601a      	str	r2, [r3, #0]
		for(int i=0; i<8; i++)
 8000422:	693b      	ldr	r3, [r7, #16]
 8000424:	3301      	adds	r3, #1
 8000426:	613b      	str	r3, [r7, #16]
 8000428:	693b      	ldr	r3, [r7, #16]
 800042a:	2b07      	cmp	r3, #7
 800042c:	ddca      	ble.n	80003c4 <WS2812_setColor_Pixel+0xb0>
			}

		}
	//BLUE -----------------------------------------------------
		for(int i=0; i<8; i++)
 800042e:	2300      	movs	r3, #0
 8000430:	60fb      	str	r3, [r7, #12]
 8000432:	e031      	b.n	8000498 <WS2812_setColor_Pixel+0x184>
		{
			if (bit_set(B,(7-i)) == 1)
 8000434:	003b      	movs	r3, r7
 8000436:	881b      	ldrh	r3, [r3, #0]
 8000438:	0018      	movs	r0, r3
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	2207      	movs	r2, #7
 800043e:	1ad3      	subs	r3, r2, r3
 8000440:	0019      	movs	r1, r3
 8000442:	f000 f833 	bl	80004ac <bit_set>
 8000446:	0003      	movs	r3, r0
 8000448:	2b01      	cmp	r3, #1
 800044a:	d111      	bne.n	8000470 <WS2812_setColor_Pixel+0x15c>
			{
				buf[RESET_DELAY + pixel*24 + 16 + i] = log_1;
 800044c:	4b16      	ldr	r3, [pc, #88]	; (80004a8 <WS2812_setColor_Pixel+0x194>)
 800044e:	681a      	ldr	r2, [r3, #0]
 8000450:	1dbb      	adds	r3, r7, #6
 8000452:	881b      	ldrh	r3, [r3, #0]
 8000454:	0019      	movs	r1, r3
 8000456:	000b      	movs	r3, r1
 8000458:	005b      	lsls	r3, r3, #1
 800045a:	185b      	adds	r3, r3, r1
 800045c:	00db      	lsls	r3, r3, #3
 800045e:	3342      	adds	r3, #66	; 0x42
 8000460:	0019      	movs	r1, r3
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	18cb      	adds	r3, r1, r3
 8000466:	009b      	lsls	r3, r3, #2
 8000468:	18d3      	adds	r3, r2, r3
 800046a:	2229      	movs	r2, #41	; 0x29
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	e010      	b.n	8000492 <WS2812_setColor_Pixel+0x17e>
			}
			else
			{
				buf[RESET_DELAY + pixel*24 + 16 + i] = log_0;
 8000470:	4b0d      	ldr	r3, [pc, #52]	; (80004a8 <WS2812_setColor_Pixel+0x194>)
 8000472:	681a      	ldr	r2, [r3, #0]
 8000474:	1dbb      	adds	r3, r7, #6
 8000476:	881b      	ldrh	r3, [r3, #0]
 8000478:	0019      	movs	r1, r3
 800047a:	000b      	movs	r3, r1
 800047c:	005b      	lsls	r3, r3, #1
 800047e:	185b      	adds	r3, r3, r1
 8000480:	00db      	lsls	r3, r3, #3
 8000482:	3342      	adds	r3, #66	; 0x42
 8000484:	0019      	movs	r1, r3
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	18cb      	adds	r3, r1, r3
 800048a:	009b      	lsls	r3, r3, #2
 800048c:	18d3      	adds	r3, r2, r3
 800048e:	2211      	movs	r2, #17
 8000490:	601a      	str	r2, [r3, #0]
		for(int i=0; i<8; i++)
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	3301      	adds	r3, #1
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	2b07      	cmp	r3, #7
 800049c:	ddca      	ble.n	8000434 <WS2812_setColor_Pixel+0x120>
			}

		}

}
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	46bd      	mov	sp, r7
 80004a2:	b006      	add	sp, #24
 80004a4:	bdb0      	pop	{r4, r5, r7, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	20000130 	.word	0x20000130

080004ac <bit_set>:
//=======================================================================================================================
int bit_set(int pixel_value, int pos)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b084      	sub	sp, #16
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	6039      	str	r1, [r7, #0]
	int value = 0;
 80004b6:	2300      	movs	r3, #0
 80004b8:	60fb      	str	r3, [r7, #12]
    if (((pixel_value >> pos)&0x01) == 1 ) value = 1;
 80004ba:	687a      	ldr	r2, [r7, #4]
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	411a      	asrs	r2, r3
 80004c0:	0013      	movs	r3, r2
 80004c2:	2201      	movs	r2, #1
 80004c4:	4013      	ands	r3, r2
 80004c6:	d001      	beq.n	80004cc <bit_set+0x20>
 80004c8:	2301      	movs	r3, #1
 80004ca:	60fb      	str	r3, [r7, #12]
	return value;
 80004cc:	68fb      	ldr	r3, [r7, #12]
}
 80004ce:	0018      	movs	r0, r3
 80004d0:	46bd      	mov	sp, r7
 80004d2:	b004      	add	sp, #16
 80004d4:	bd80      	pop	{r7, pc}
	...

080004d8 <delay_ws>:
//=======================================================================================================================
int delay_ws(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
	for(unsigned long i=0; i<100000; i++);
 80004de:	2300      	movs	r3, #0
 80004e0:	607b      	str	r3, [r7, #4]
 80004e2:	e002      	b.n	80004ea <delay_ws+0x12>
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	3301      	adds	r3, #1
 80004e8:	607b      	str	r3, [r7, #4]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4a03      	ldr	r2, [pc, #12]	; (80004fc <delay_ws+0x24>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d9f8      	bls.n	80004e4 <delay_ws+0xc>
}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	0018      	movs	r0, r3
 80004f6:	46bd      	mov	sp, r7
 80004f8:	b002      	add	sp, #8
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	0001869f 	.word	0x0001869f

08000500 <reset_buf>:
//=======================================================================================================================
void reset_buf(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
	for (int i = 0; i<RESET_DELAY; i++)
 8000506:	2300      	movs	r3, #0
 8000508:	607b      	str	r3, [r7, #4]
 800050a:	e009      	b.n	8000520 <reset_buf+0x20>
	    {
	  	  buf[i] = 0;
 800050c:	4b28      	ldr	r3, [pc, #160]	; (80005b0 <reset_buf+0xb0>)
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	18d3      	adds	r3, r2, r3
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
	for (int i = 0; i<RESET_DELAY; i++)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	3301      	adds	r3, #1
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2b31      	cmp	r3, #49	; 0x31
 8000524:	ddf2      	ble.n	800050c <reset_buf+0xc>
	    }
	for (int i = RESET_DELAY; i<quantity_led*24+RESET_DELAY; i++)
 8000526:	2332      	movs	r3, #50	; 0x32
 8000528:	603b      	str	r3, [r7, #0]
 800052a:	e009      	b.n	8000540 <reset_buf+0x40>
	  	{
		  buf[i] = log_0;
 800052c:	4b20      	ldr	r3, [pc, #128]	; (80005b0 <reset_buf+0xb0>)
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	18d3      	adds	r3, r2, r3
 8000536:	2211      	movs	r2, #17
 8000538:	601a      	str	r2, [r3, #0]
	for (int i = RESET_DELAY; i<quantity_led*24+RESET_DELAY; i++)
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	3301      	adds	r3, #1
 800053e:	603b      	str	r3, [r7, #0]
 8000540:	4b1c      	ldr	r3, [pc, #112]	; (80005b4 <reset_buf+0xb4>)
 8000542:	881b      	ldrh	r3, [r3, #0]
 8000544:	001a      	movs	r2, r3
 8000546:	0013      	movs	r3, r2
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	189b      	adds	r3, r3, r2
 800054c:	00db      	lsls	r3, r3, #3
 800054e:	3332      	adds	r3, #50	; 0x32
 8000550:	683a      	ldr	r2, [r7, #0]
 8000552:	429a      	cmp	r2, r3
 8000554:	dbea      	blt.n	800052c <reset_buf+0x2c>
	    }
	buf[RESET_DELAY+quantity_led*24] = 0;
 8000556:	4b16      	ldr	r3, [pc, #88]	; (80005b0 <reset_buf+0xb0>)
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	4b16      	ldr	r3, [pc, #88]	; (80005b4 <reset_buf+0xb4>)
 800055c:	881b      	ldrh	r3, [r3, #0]
 800055e:	0019      	movs	r1, r3
 8000560:	000b      	movs	r3, r1
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	185b      	adds	r3, r3, r1
 8000566:	00db      	lsls	r3, r3, #3
 8000568:	3332      	adds	r3, #50	; 0x32
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	18d3      	adds	r3, r2, r3
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
	buf[RESET_DELAY+quantity_led*24+1] = 0;
 8000572:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <reset_buf+0xb0>)
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <reset_buf+0xb4>)
 8000578:	881b      	ldrh	r3, [r3, #0]
 800057a:	0019      	movs	r1, r3
 800057c:	000b      	movs	r3, r1
 800057e:	005b      	lsls	r3, r3, #1
 8000580:	185b      	adds	r3, r3, r1
 8000582:	015b      	lsls	r3, r3, #5
 8000584:	33cc      	adds	r3, #204	; 0xcc
 8000586:	18d3      	adds	r3, r2, r3
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
	buf[RESET_DELAY+quantity_led*24+2] = 0;
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <reset_buf+0xb0>)
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <reset_buf+0xb4>)
 8000592:	881b      	ldrh	r3, [r3, #0]
 8000594:	0019      	movs	r1, r3
 8000596:	000b      	movs	r3, r1
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	185b      	adds	r3, r3, r1
 800059c:	015b      	lsls	r3, r3, #5
 800059e:	33d0      	adds	r3, #208	; 0xd0
 80005a0:	18d3      	adds	r3, r2, r3
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	b002      	add	sp, #8
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	20000130 	.word	0x20000130
 80005b4:	2000008e 	.word	0x2000008e

080005b8 <check_value_colors>:
//=======================================================================================================================
void check_value_colors(uint16_t *R, uint16_t *G, uint16_t *B)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
	if (*R>255) *R=255;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	2bff      	cmp	r3, #255	; 0xff
 80005ca:	d903      	bls.n	80005d4 <check_value_colors+0x1c>
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	22ff      	movs	r2, #255	; 0xff
 80005d0:	801a      	strh	r2, [r3, #0]
	else if (*R<0) *R=0;
		else if (*G>255) *G=255;
		else if (*G<0) *G=0;
			else if (*B>255) *B=255;
			else if (*B<0) *B=0;
}
 80005d2:	e00e      	b.n	80005f2 <check_value_colors+0x3a>
		else if (*G>255) *G=255;
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	2bff      	cmp	r3, #255	; 0xff
 80005da:	d903      	bls.n	80005e4 <check_value_colors+0x2c>
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	22ff      	movs	r2, #255	; 0xff
 80005e0:	801a      	strh	r2, [r3, #0]
}
 80005e2:	e006      	b.n	80005f2 <check_value_colors+0x3a>
			else if (*B>255) *B=255;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	2bff      	cmp	r3, #255	; 0xff
 80005ea:	d902      	bls.n	80005f2 <check_value_colors+0x3a>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	22ff      	movs	r2, #255	; 0xff
 80005f0:	801a      	strh	r2, [r3, #0]
}
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	46bd      	mov	sp, r7
 80005f6:	b004      	add	sp, #16
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <check_value_position>:
void check_value_position(uint16_t *pixel)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	if (*pixel > quantity_led-1) *pixel = quantity_led-1; else if (*pixel<0) *pixel = 0;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	881b      	ldrh	r3, [r3, #0]
 8000608:	001a      	movs	r2, r3
 800060a:	4b07      	ldr	r3, [pc, #28]	; (8000628 <check_value_position+0x2c>)
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	3b01      	subs	r3, #1
 8000610:	429a      	cmp	r2, r3
 8000612:	dd05      	ble.n	8000620 <check_value_position+0x24>
 8000614:	4b04      	ldr	r3, [pc, #16]	; (8000628 <check_value_position+0x2c>)
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	3b01      	subs	r3, #1
 800061a:	b29a      	uxth	r2, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	801a      	strh	r2, [r3, #0]
}
 8000620:	46c0      	nop			; (mov r8, r8)
 8000622:	46bd      	mov	sp, r7
 8000624:	b002      	add	sp, #8
 8000626:	bd80      	pop	{r7, pc}
 8000628:	2000008e 	.word	0x2000008e

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000630:	f000 fabc 	bl	8000bac <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000634:	f000 f830 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000638:	f000 f8f8 	bl	800082c <MX_GPIO_Init>
  MX_DMA_Init();
 800063c:	f000 f8d8 	bl	80007f0 <MX_DMA_Init>
  MX_TIM3_Init();
 8000640:	f000 f876 	bl	8000730 <MX_TIM3_Init>

  WS2812_Init(10,&htim3,TIM_CHANNEL_1);
 8000644:	4b11      	ldr	r3, [pc, #68]	; (800068c <main+0x60>)
 8000646:	2200      	movs	r2, #0
 8000648:	0019      	movs	r1, r3
 800064a:	200a      	movs	r0, #10
 800064c:	f7ff fde8 	bl	8000220 <WS2812_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  reset_buf();
 8000650:	f7ff ff56 	bl	8000500 <reset_buf>
	  //HAL_TIM_PWM_Start_DMA (&htim3, TIM_CHANNEL_1, (uint32_t*)&buf, (RESET_DELAY+(quantity_led*24))*2+3+50);
	  //HAL_Delay(1);

	  WS2812_setColor_All_Pixel(0,0,255);
 8000654:	22ff      	movs	r2, #255	; 0xff
 8000656:	2100      	movs	r1, #0
 8000658:	2000      	movs	r0, #0
 800065a:	f7ff fe2f 	bl	80002bc <WS2812_setColor_All_Pixel>
	  HAL_TIM_PWM_Start_DMA (&htim3, TIM_CHANNEL_1, (uint32_t*)&buf, (RESET_DELAY+(quantity_led*24))*2+3);
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <main+0x64>)
 8000660:	881b      	ldrh	r3, [r3, #0]
 8000662:	001a      	movs	r2, r3
 8000664:	0013      	movs	r3, r2
 8000666:	005b      	lsls	r3, r3, #1
 8000668:	189b      	adds	r3, r3, r2
 800066a:	00db      	lsls	r3, r3, #3
 800066c:	3332      	adds	r3, #50	; 0x32
 800066e:	b29b      	uxth	r3, r3
 8000670:	18db      	adds	r3, r3, r3
 8000672:	b29b      	uxth	r3, r3
 8000674:	3303      	adds	r3, #3
 8000676:	b29b      	uxth	r3, r3
 8000678:	4a06      	ldr	r2, [pc, #24]	; (8000694 <main+0x68>)
 800067a:	4804      	ldr	r0, [pc, #16]	; (800068c <main+0x60>)
 800067c:	2100      	movs	r1, #0
 800067e:	f001 fcdd 	bl	800203c <HAL_TIM_PWM_Start_DMA>
	  HAL_Delay(1);
 8000682:	2001      	movs	r0, #1
 8000684:	f000 faf6 	bl	8000c74 <HAL_Delay>
	  reset_buf();
 8000688:	e7e2      	b.n	8000650 <main+0x24>
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	200000a0 	.word	0x200000a0
 8000690:	2000008e 	.word	0x2000008e
 8000694:	20000130 	.word	0x20000130

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b590      	push	{r4, r7, lr}
 800069a:	b093      	sub	sp, #76	; 0x4c
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	2414      	movs	r4, #20
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	0018      	movs	r0, r3
 80006a4:	2334      	movs	r3, #52	; 0x34
 80006a6:	001a      	movs	r2, r3
 80006a8:	2100      	movs	r1, #0
 80006aa:	f002 fc04 	bl	8002eb6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	0018      	movs	r0, r3
 80006b2:	2310      	movs	r3, #16
 80006b4:	001a      	movs	r2, r3
 80006b6:	2100      	movs	r1, #0
 80006b8:	f002 fbfd 	bl	8002eb6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	0021      	movs	r1, r4
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2202      	movs	r2, #2
 80006c2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2201      	movs	r2, #1
 80006c8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2210      	movs	r2, #16
 80006ce:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	2202      	movs	r2, #2
 80006d4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2280      	movs	r2, #128	; 0x80
 80006da:	0212      	lsls	r2, r2, #8
 80006dc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2280      	movs	r2, #128	; 0x80
 80006e2:	0352      	lsls	r2, r2, #13
 80006e4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2200      	movs	r2, #0
 80006ea:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	0018      	movs	r0, r3
 80006f0:	f000 ff74 	bl	80015dc <HAL_RCC_OscConfig>
 80006f4:	1e03      	subs	r3, r0, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x64>
  {
    Error_Handler();
 80006f8:	f000 f8fe 	bl	80008f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2207      	movs	r2, #7
 8000700:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2202      	movs	r2, #2
 8000706:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2101      	movs	r1, #1
 8000718:	0018      	movs	r0, r3
 800071a:	f001 fae5 	bl	8001ce8 <HAL_RCC_ClockConfig>
 800071e:	1e03      	subs	r3, r0, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000722:	f000 f8e9 	bl	80008f8 <Error_Handler>
  }
}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	b013      	add	sp, #76	; 0x4c
 800072c:	bd90      	pop	{r4, r7, pc}
	...

08000730 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	; 0x28
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000736:	2320      	movs	r3, #32
 8000738:	18fb      	adds	r3, r7, r3
 800073a:	0018      	movs	r0, r3
 800073c:	2308      	movs	r3, #8
 800073e:	001a      	movs	r2, r3
 8000740:	2100      	movs	r1, #0
 8000742:	f002 fbb8 	bl	8002eb6 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	0018      	movs	r0, r3
 800074a:	231c      	movs	r3, #28
 800074c:	001a      	movs	r2, r3
 800074e:	2100      	movs	r1, #0
 8000750:	f002 fbb1 	bl	8002eb6 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000754:	4b24      	ldr	r3, [pc, #144]	; (80007e8 <MX_TIM3_Init+0xb8>)
 8000756:	4a25      	ldr	r2, [pc, #148]	; (80007ec <MX_TIM3_Init+0xbc>)
 8000758:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800075a:	4b23      	ldr	r3, [pc, #140]	; (80007e8 <MX_TIM3_Init+0xb8>)
 800075c:	2200      	movs	r2, #0
 800075e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000760:	4b21      	ldr	r3, [pc, #132]	; (80007e8 <MX_TIM3_Init+0xb8>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59;
 8000766:	4b20      	ldr	r3, [pc, #128]	; (80007e8 <MX_TIM3_Init+0xb8>)
 8000768:	223b      	movs	r2, #59	; 0x3b
 800076a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800076c:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <MX_TIM3_Init+0xb8>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000772:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <MX_TIM3_Init+0xb8>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000778:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <MX_TIM3_Init+0xb8>)
 800077a:	0018      	movs	r0, r3
 800077c:	f001 fc0e 	bl	8001f9c <HAL_TIM_PWM_Init>
 8000780:	1e03      	subs	r3, r0, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000784:	f000 f8b8 	bl	80008f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000788:	2120      	movs	r1, #32
 800078a:	187b      	adds	r3, r7, r1
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000790:	187b      	adds	r3, r7, r1
 8000792:	2200      	movs	r2, #0
 8000794:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000796:	187a      	adds	r2, r7, r1
 8000798:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <MX_TIM3_Init+0xb8>)
 800079a:	0011      	movs	r1, r2
 800079c:	0018      	movs	r0, r3
 800079e:	f002 faef 	bl	8002d80 <HAL_TIMEx_MasterConfigSynchronization>
 80007a2:	1e03      	subs	r3, r0, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80007a6:	f000 f8a7 	bl	80008f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2260      	movs	r2, #96	; 0x60
 80007ae:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2200      	movs	r2, #0
 80007b4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007c2:	1d39      	adds	r1, r7, #4
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <MX_TIM3_Init+0xb8>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	0018      	movs	r0, r3
 80007ca:	f001 fe9d 	bl	8002508 <HAL_TIM_PWM_ConfigChannel>
 80007ce:	1e03      	subs	r3, r0, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80007d2:	f000 f891 	bl	80008f8 <Error_Handler>
  /* USER CODE BEGIN TIM3_Init 2 */
  /* Peripheral DMA init*/


  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007d6:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <MX_TIM3_Init+0xb8>)
 80007d8:	0018      	movs	r0, r3
 80007da:	f000 f905 	bl	80009e8 <HAL_TIM_MspPostInit>

}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	b00a      	add	sp, #40	; 0x28
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	200000a0 	.word	0x200000a0
 80007ec:	40000400 	.word	0x40000400

080007f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_DMA_Init+0x38>)
 80007f8:	695a      	ldr	r2, [r3, #20]
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_DMA_Init+0x38>)
 80007fc:	2101      	movs	r1, #1
 80007fe:	430a      	orrs	r2, r1
 8000800:	615a      	str	r2, [r3, #20]
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_DMA_Init+0x38>)
 8000804:	695b      	ldr	r3, [r3, #20]
 8000806:	2201      	movs	r2, #1
 8000808:	4013      	ands	r3, r2
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	200b      	movs	r0, #11
 8000814:	f000 fafc 	bl	8000e10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8000818:	200b      	movs	r0, #11
 800081a:	f000 fb0e 	bl	8000e3a <HAL_NVIC_EnableIRQ>

}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	46bd      	mov	sp, r7
 8000822:	b002      	add	sp, #8
 8000824:	bd80      	pop	{r7, pc}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	40021000 	.word	0x40021000

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b590      	push	{r4, r7, lr}
 800082e:	b089      	sub	sp, #36	; 0x24
 8000830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	240c      	movs	r4, #12
 8000834:	193b      	adds	r3, r7, r4
 8000836:	0018      	movs	r0, r3
 8000838:	2314      	movs	r3, #20
 800083a:	001a      	movs	r2, r3
 800083c:	2100      	movs	r1, #0
 800083e:	f002 fb3a 	bl	8002eb6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	4b2a      	ldr	r3, [pc, #168]	; (80008ec <MX_GPIO_Init+0xc0>)
 8000844:	695a      	ldr	r2, [r3, #20]
 8000846:	4b29      	ldr	r3, [pc, #164]	; (80008ec <MX_GPIO_Init+0xc0>)
 8000848:	2180      	movs	r1, #128	; 0x80
 800084a:	0289      	lsls	r1, r1, #10
 800084c:	430a      	orrs	r2, r1
 800084e:	615a      	str	r2, [r3, #20]
 8000850:	4b26      	ldr	r3, [pc, #152]	; (80008ec <MX_GPIO_Init+0xc0>)
 8000852:	695a      	ldr	r2, [r3, #20]
 8000854:	2380      	movs	r3, #128	; 0x80
 8000856:	029b      	lsls	r3, r3, #10
 8000858:	4013      	ands	r3, r2
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	4b23      	ldr	r3, [pc, #140]	; (80008ec <MX_GPIO_Init+0xc0>)
 8000860:	695a      	ldr	r2, [r3, #20]
 8000862:	4b22      	ldr	r3, [pc, #136]	; (80008ec <MX_GPIO_Init+0xc0>)
 8000864:	2180      	movs	r1, #128	; 0x80
 8000866:	02c9      	lsls	r1, r1, #11
 8000868:	430a      	orrs	r2, r1
 800086a:	615a      	str	r2, [r3, #20]
 800086c:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <MX_GPIO_Init+0xc0>)
 800086e:	695a      	ldr	r2, [r3, #20]
 8000870:	2380      	movs	r3, #128	; 0x80
 8000872:	02db      	lsls	r3, r3, #11
 8000874:	4013      	ands	r3, r2
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800087a:	2380      	movs	r3, #128	; 0x80
 800087c:	01db      	lsls	r3, r3, #7
 800087e:	481c      	ldr	r0, [pc, #112]	; (80008f0 <MX_GPIO_Init+0xc4>)
 8000880:	2200      	movs	r2, #0
 8000882:	0019      	movs	r1, r3
 8000884:	f000 fe4c 	bl	8001520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000888:	193b      	adds	r3, r7, r4
 800088a:	2280      	movs	r2, #128	; 0x80
 800088c:	01d2      	lsls	r2, r2, #7
 800088e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	193b      	adds	r3, r7, r4
 8000892:	2201      	movs	r2, #1
 8000894:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	193b      	adds	r3, r7, r4
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	193b      	adds	r3, r7, r4
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a2:	193b      	adds	r3, r7, r4
 80008a4:	4a12      	ldr	r2, [pc, #72]	; (80008f0 <MX_GPIO_Init+0xc4>)
 80008a6:	0019      	movs	r1, r3
 80008a8:	0010      	movs	r0, r2
 80008aa:	f000 fcc1 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80008ae:	0021      	movs	r1, r4
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2280      	movs	r2, #128	; 0x80
 80008b4:	0112      	lsls	r2, r2, #4
 80008b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <MX_GPIO_Init+0xc8>)
 80008bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	2201      	movs	r2, #1
 80008c2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c4:	187a      	adds	r2, r7, r1
 80008c6:	2390      	movs	r3, #144	; 0x90
 80008c8:	05db      	lsls	r3, r3, #23
 80008ca:	0011      	movs	r1, r2
 80008cc:	0018      	movs	r0, r3
 80008ce:	f000 fcaf 	bl	8001230 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2100      	movs	r1, #0
 80008d6:	2007      	movs	r0, #7
 80008d8:	f000 fa9a 	bl	8000e10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80008dc:	2007      	movs	r0, #7
 80008de:	f000 faac 	bl	8000e3a <HAL_NVIC_EnableIRQ>

}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b009      	add	sp, #36	; 0x24
 80008e8:	bd90      	pop	{r4, r7, pc}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	40021000 	.word	0x40021000
 80008f0:	48000400 	.word	0x48000400
 80008f4:	10210000 	.word	0x10210000

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fe:	e7fe      	b.n	80008fe <Error_Handler+0x6>

08000900 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <HAL_MspInit+0x44>)
 8000908:	699a      	ldr	r2, [r3, #24]
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <HAL_MspInit+0x44>)
 800090c:	2101      	movs	r1, #1
 800090e:	430a      	orrs	r2, r1
 8000910:	619a      	str	r2, [r3, #24]
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <HAL_MspInit+0x44>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	2201      	movs	r2, #1
 8000918:	4013      	ands	r3, r2
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <HAL_MspInit+0x44>)
 8000920:	69da      	ldr	r2, [r3, #28]
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <HAL_MspInit+0x44>)
 8000924:	2180      	movs	r1, #128	; 0x80
 8000926:	0549      	lsls	r1, r1, #21
 8000928:	430a      	orrs	r2, r1
 800092a:	61da      	str	r2, [r3, #28]
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <HAL_MspInit+0x44>)
 800092e:	69da      	ldr	r2, [r3, #28]
 8000930:	2380      	movs	r3, #128	; 0x80
 8000932:	055b      	lsls	r3, r3, #21
 8000934:	4013      	ands	r3, r2
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	b002      	add	sp, #8
 8000940:	bd80      	pop	{r7, pc}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	40021000 	.word	0x40021000

08000948 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a20      	ldr	r2, [pc, #128]	; (80009d8 <HAL_TIM_PWM_MspInit+0x90>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d139      	bne.n	80009ce <HAL_TIM_PWM_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800095a:	4b20      	ldr	r3, [pc, #128]	; (80009dc <HAL_TIM_PWM_MspInit+0x94>)
 800095c:	69da      	ldr	r2, [r3, #28]
 800095e:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <HAL_TIM_PWM_MspInit+0x94>)
 8000960:	2102      	movs	r1, #2
 8000962:	430a      	orrs	r2, r1
 8000964:	61da      	str	r2, [r3, #28]
 8000966:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <HAL_TIM_PWM_MspInit+0x94>)
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	2202      	movs	r2, #2
 800096c:	4013      	ands	r3, r2
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel4;
 8000972:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <HAL_TIM_PWM_MspInit+0x98>)
 8000974:	4a1b      	ldr	r2, [pc, #108]	; (80009e4 <HAL_TIM_PWM_MspInit+0x9c>)
 8000976:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000978:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <HAL_TIM_PWM_MspInit+0x98>)
 800097a:	2210      	movs	r2, #16
 800097c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800097e:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <HAL_TIM_PWM_MspInit+0x98>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <HAL_TIM_PWM_MspInit+0x98>)
 8000986:	2280      	movs	r2, #128	; 0x80
 8000988:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800098a:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <HAL_TIM_PWM_MspInit+0x98>)
 800098c:	2280      	movs	r2, #128	; 0x80
 800098e:	0092      	lsls	r2, r2, #2
 8000990:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <HAL_TIM_PWM_MspInit+0x98>)
 8000994:	2280      	movs	r2, #128	; 0x80
 8000996:	0112      	lsls	r2, r2, #4
 8000998:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <HAL_TIM_PWM_MspInit+0x98>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <HAL_TIM_PWM_MspInit+0x98>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <HAL_TIM_PWM_MspInit+0x98>)
 80009a8:	0018      	movs	r0, r3
 80009aa:	f000 fa63 	bl	8000e74 <HAL_DMA_Init>
 80009ae:	1e03      	subs	r3, r0, #0
 80009b0:	d001      	beq.n	80009b6 <HAL_TIM_PWM_MspInit+0x6e>
    {
      Error_Handler();
 80009b2:	f7ff ffa1 	bl	80008f8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a09      	ldr	r2, [pc, #36]	; (80009e0 <HAL_TIM_PWM_MspInit+0x98>)
 80009ba:	625a      	str	r2, [r3, #36]	; 0x24
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <HAL_TIM_PWM_MspInit+0x98>)
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a06      	ldr	r2, [pc, #24]	; (80009e0 <HAL_TIM_PWM_MspInit+0x98>)
 80009c6:	639a      	str	r2, [r3, #56]	; 0x38
 80009c8:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <HAL_TIM_PWM_MspInit+0x98>)
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	46bd      	mov	sp, r7
 80009d2:	b004      	add	sp, #16
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	40000400 	.word	0x40000400
 80009dc:	40021000 	.word	0x40021000
 80009e0:	200000ec 	.word	0x200000ec
 80009e4:	40020044 	.word	0x40020044

080009e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b088      	sub	sp, #32
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	230c      	movs	r3, #12
 80009f2:	18fb      	adds	r3, r7, r3
 80009f4:	0018      	movs	r0, r3
 80009f6:	2314      	movs	r3, #20
 80009f8:	001a      	movs	r2, r3
 80009fa:	2100      	movs	r1, #0
 80009fc:	f002 fa5b 	bl	8002eb6 <memset>
  if(htim->Instance==TIM3)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a15      	ldr	r2, [pc, #84]	; (8000a5c <HAL_TIM_MspPostInit+0x74>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d124      	bne.n	8000a54 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <HAL_TIM_MspPostInit+0x78>)
 8000a0c:	695a      	ldr	r2, [r3, #20]
 8000a0e:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <HAL_TIM_MspPostInit+0x78>)
 8000a10:	2180      	movs	r1, #128	; 0x80
 8000a12:	0289      	lsls	r1, r1, #10
 8000a14:	430a      	orrs	r2, r1
 8000a16:	615a      	str	r2, [r3, #20]
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <HAL_TIM_MspPostInit+0x78>)
 8000a1a:	695a      	ldr	r2, [r3, #20]
 8000a1c:	2380      	movs	r3, #128	; 0x80
 8000a1e:	029b      	lsls	r3, r3, #10
 8000a20:	4013      	ands	r3, r2
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a26:	210c      	movs	r1, #12
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	2240      	movs	r2, #64	; 0x40
 8000a2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	187b      	adds	r3, r7, r1
 8000a30:	2202      	movs	r2, #2
 8000a32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	2201      	movs	r2, #1
 8000a44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	187a      	adds	r2, r7, r1
 8000a48:	2390      	movs	r3, #144	; 0x90
 8000a4a:	05db      	lsls	r3, r3, #23
 8000a4c:	0011      	movs	r1, r2
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f000 fbee 	bl	8001230 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000a54:	46c0      	nop			; (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	b008      	add	sp, #32
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40000400 	.word	0x40000400
 8000a60:	40021000 	.word	0x40021000

08000a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <NMI_Handler+0x4>

08000a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <HardFault_Handler+0x4>

08000a70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a88:	f000 f8d8 	bl	8000c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a8c:	46c0      	nop			; (mov r8, r8)
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000a98:	2380      	movs	r3, #128	; 0x80
 8000a9a:	011b      	lsls	r3, r3, #4
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f000 fd77 	bl	8001590 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */
  HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_14);
 8000aa2:	2380      	movs	r3, #128	; 0x80
 8000aa4:	01db      	lsls	r3, r3, #7
 8000aa6:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <EXTI4_15_IRQHandler+0x24>)
 8000aa8:	0019      	movs	r1, r3
 8000aaa:	0010      	movs	r0, r2
 8000aac:	f000 fd55 	bl	800155a <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	48000400 	.word	0x48000400

08000abc <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, 5, 6 and 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f001 fc57 	bl	8002378 <HAL_TIM_PWM_Stop_DMA>
  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8000aca:	4b04      	ldr	r3, [pc, #16]	; (8000adc <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 8000acc:	0018      	movs	r0, r3
 8000ace:	f000 fac5 	bl	800105c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	200000a0 	.word	0x200000a0
 8000adc:	200000ec 	.word	0x200000ec

08000ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae8:	4a14      	ldr	r2, [pc, #80]	; (8000b3c <_sbrk+0x5c>)
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <_sbrk+0x60>)
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af4:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <_sbrk+0x64>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d102      	bne.n	8000b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <_sbrk+0x64>)
 8000afe:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <_sbrk+0x68>)
 8000b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <_sbrk+0x64>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	18d3      	adds	r3, r2, r3
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d207      	bcs.n	8000b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b10:	f002 f994 	bl	8002e3c <__errno>
 8000b14:	0003      	movs	r3, r0
 8000b16:	220c      	movs	r2, #12
 8000b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	425b      	negs	r3, r3
 8000b1e:	e009      	b.n	8000b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <_sbrk+0x64>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b26:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <_sbrk+0x64>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	18d2      	adds	r2, r2, r3
 8000b2e:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <_sbrk+0x64>)
 8000b30:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000b32:	68fb      	ldr	r3, [r7, #12]
}
 8000b34:	0018      	movs	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	b006      	add	sp, #24
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20004000 	.word	0x20004000
 8000b40:	00000400 	.word	0x00000400
 8000b44:	20000090 	.word	0x20000090
 8000b48:	20000188 	.word	0x20000188

08000b4c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b58:	480d      	ldr	r0, [pc, #52]	; (8000b90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b5a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b5c:	480d      	ldr	r0, [pc, #52]	; (8000b94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b5e:	490e      	ldr	r1, [pc, #56]	; (8000b98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b60:	4a0e      	ldr	r2, [pc, #56]	; (8000b9c <LoopForever+0xe>)
  movs r3, #0
 8000b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b64:	e002      	b.n	8000b6c <LoopCopyDataInit>

08000b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6a:	3304      	adds	r3, #4

08000b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b70:	d3f9      	bcc.n	8000b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b72:	4a0b      	ldr	r2, [pc, #44]	; (8000ba0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b74:	4c0b      	ldr	r4, [pc, #44]	; (8000ba4 <LoopForever+0x16>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b78:	e001      	b.n	8000b7e <LoopFillZerobss>

08000b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b7c:	3204      	adds	r2, #4

08000b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b80:	d3fb      	bcc.n	8000b7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b82:	f7ff ffe3 	bl	8000b4c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000b86:	f002 f95f 	bl	8002e48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b8a:	f7ff fd4f 	bl	800062c <main>

08000b8e <LoopForever>:

LoopForever:
    b LoopForever
 8000b8e:	e7fe      	b.n	8000b8e <LoopForever>
  ldr   r0, =_estack
 8000b90:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b98:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b9c:	08002ffc 	.word	0x08002ffc
  ldr r2, =_sbss
 8000ba0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ba4:	20000184 	.word	0x20000184

08000ba8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ba8:	e7fe      	b.n	8000ba8 <ADC1_COMP_IRQHandler>
	...

08000bac <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb0:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <HAL_Init+0x24>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_Init+0x24>)
 8000bb6:	2110      	movs	r1, #16
 8000bb8:	430a      	orrs	r2, r1
 8000bba:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f000 f809 	bl	8000bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc2:	f7ff fe9d 	bl	8000900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc6:	2300      	movs	r3, #0
}
 8000bc8:	0018      	movs	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	40022000 	.word	0x40022000

08000bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b590      	push	{r4, r7, lr}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <HAL_InitTick+0x5c>)
 8000bde:	681c      	ldr	r4, [r3, #0]
 8000be0:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <HAL_InitTick+0x60>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	0019      	movs	r1, r3
 8000be6:	23fa      	movs	r3, #250	; 0xfa
 8000be8:	0098      	lsls	r0, r3, #2
 8000bea:	f7ff fa8d 	bl	8000108 <__udivsi3>
 8000bee:	0003      	movs	r3, r0
 8000bf0:	0019      	movs	r1, r3
 8000bf2:	0020      	movs	r0, r4
 8000bf4:	f7ff fa88 	bl	8000108 <__udivsi3>
 8000bf8:	0003      	movs	r3, r0
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f000 f92d 	bl	8000e5a <HAL_SYSTICK_Config>
 8000c00:	1e03      	subs	r3, r0, #0
 8000c02:	d001      	beq.n	8000c08 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c04:	2301      	movs	r3, #1
 8000c06:	e00f      	b.n	8000c28 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2b03      	cmp	r3, #3
 8000c0c:	d80b      	bhi.n	8000c26 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	2301      	movs	r3, #1
 8000c12:	425b      	negs	r3, r3
 8000c14:	2200      	movs	r2, #0
 8000c16:	0018      	movs	r0, r3
 8000c18:	f000 f8fa 	bl	8000e10 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_InitTick+0x64>)
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000c22:	2300      	movs	r3, #0
 8000c24:	e000      	b.n	8000c28 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
}
 8000c28:	0018      	movs	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b003      	add	sp, #12
 8000c2e:	bd90      	pop	{r4, r7, pc}
 8000c30:	20000000 	.word	0x20000000
 8000c34:	20000008 	.word	0x20000008
 8000c38:	20000004 	.word	0x20000004

08000c3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <HAL_IncTick+0x1c>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	001a      	movs	r2, r3
 8000c46:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <HAL_IncTick+0x20>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	18d2      	adds	r2, r2, r3
 8000c4c:	4b03      	ldr	r3, [pc, #12]	; (8000c5c <HAL_IncTick+0x20>)
 8000c4e:	601a      	str	r2, [r3, #0]
}
 8000c50:	46c0      	nop			; (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	20000008 	.word	0x20000008
 8000c5c:	2000017c 	.word	0x2000017c

08000c60 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  return uwTick;
 8000c64:	4b02      	ldr	r3, [pc, #8]	; (8000c70 <HAL_GetTick+0x10>)
 8000c66:	681b      	ldr	r3, [r3, #0]
}
 8000c68:	0018      	movs	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	2000017c 	.word	0x2000017c

08000c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c7c:	f7ff fff0 	bl	8000c60 <HAL_GetTick>
 8000c80:	0003      	movs	r3, r0
 8000c82:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	d005      	beq.n	8000c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <HAL_Delay+0x40>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	001a      	movs	r2, r3
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	189b      	adds	r3, r3, r2
 8000c98:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	f7ff ffe0 	bl	8000c60 <HAL_GetTick>
 8000ca0:	0002      	movs	r2, r0
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d8f7      	bhi.n	8000c9c <HAL_Delay+0x28>
  {
  }
}
 8000cac:	46c0      	nop			; (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	b004      	add	sp, #16
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000008 	.word	0x20000008

08000cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	0002      	movs	r2, r0
 8000cc0:	1dfb      	adds	r3, r7, #7
 8000cc2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cc4:	1dfb      	adds	r3, r7, #7
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b7f      	cmp	r3, #127	; 0x7f
 8000cca:	d809      	bhi.n	8000ce0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ccc:	1dfb      	adds	r3, r7, #7
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	001a      	movs	r2, r3
 8000cd2:	231f      	movs	r3, #31
 8000cd4:	401a      	ands	r2, r3
 8000cd6:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <__NVIC_EnableIRQ+0x30>)
 8000cd8:	2101      	movs	r1, #1
 8000cda:	4091      	lsls	r1, r2
 8000cdc:	000a      	movs	r2, r1
 8000cde:	601a      	str	r2, [r3, #0]
  }
}
 8000ce0:	46c0      	nop			; (mov r8, r8)
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	b002      	add	sp, #8
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	e000e100 	.word	0xe000e100

08000cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cec:	b590      	push	{r4, r7, lr}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	0002      	movs	r2, r0
 8000cf4:	6039      	str	r1, [r7, #0]
 8000cf6:	1dfb      	adds	r3, r7, #7
 8000cf8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cfa:	1dfb      	adds	r3, r7, #7
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b7f      	cmp	r3, #127	; 0x7f
 8000d00:	d828      	bhi.n	8000d54 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d02:	4a2f      	ldr	r2, [pc, #188]	; (8000dc0 <__NVIC_SetPriority+0xd4>)
 8000d04:	1dfb      	adds	r3, r7, #7
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	b25b      	sxtb	r3, r3
 8000d0a:	089b      	lsrs	r3, r3, #2
 8000d0c:	33c0      	adds	r3, #192	; 0xc0
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	589b      	ldr	r3, [r3, r2]
 8000d12:	1dfa      	adds	r2, r7, #7
 8000d14:	7812      	ldrb	r2, [r2, #0]
 8000d16:	0011      	movs	r1, r2
 8000d18:	2203      	movs	r2, #3
 8000d1a:	400a      	ands	r2, r1
 8000d1c:	00d2      	lsls	r2, r2, #3
 8000d1e:	21ff      	movs	r1, #255	; 0xff
 8000d20:	4091      	lsls	r1, r2
 8000d22:	000a      	movs	r2, r1
 8000d24:	43d2      	mvns	r2, r2
 8000d26:	401a      	ands	r2, r3
 8000d28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	019b      	lsls	r3, r3, #6
 8000d2e:	22ff      	movs	r2, #255	; 0xff
 8000d30:	401a      	ands	r2, r3
 8000d32:	1dfb      	adds	r3, r7, #7
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	0018      	movs	r0, r3
 8000d38:	2303      	movs	r3, #3
 8000d3a:	4003      	ands	r3, r0
 8000d3c:	00db      	lsls	r3, r3, #3
 8000d3e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d40:	481f      	ldr	r0, [pc, #124]	; (8000dc0 <__NVIC_SetPriority+0xd4>)
 8000d42:	1dfb      	adds	r3, r7, #7
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	b25b      	sxtb	r3, r3
 8000d48:	089b      	lsrs	r3, r3, #2
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	33c0      	adds	r3, #192	; 0xc0
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d52:	e031      	b.n	8000db8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d54:	4a1b      	ldr	r2, [pc, #108]	; (8000dc4 <__NVIC_SetPriority+0xd8>)
 8000d56:	1dfb      	adds	r3, r7, #7
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	0019      	movs	r1, r3
 8000d5c:	230f      	movs	r3, #15
 8000d5e:	400b      	ands	r3, r1
 8000d60:	3b08      	subs	r3, #8
 8000d62:	089b      	lsrs	r3, r3, #2
 8000d64:	3306      	adds	r3, #6
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	18d3      	adds	r3, r2, r3
 8000d6a:	3304      	adds	r3, #4
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	1dfa      	adds	r2, r7, #7
 8000d70:	7812      	ldrb	r2, [r2, #0]
 8000d72:	0011      	movs	r1, r2
 8000d74:	2203      	movs	r2, #3
 8000d76:	400a      	ands	r2, r1
 8000d78:	00d2      	lsls	r2, r2, #3
 8000d7a:	21ff      	movs	r1, #255	; 0xff
 8000d7c:	4091      	lsls	r1, r2
 8000d7e:	000a      	movs	r2, r1
 8000d80:	43d2      	mvns	r2, r2
 8000d82:	401a      	ands	r2, r3
 8000d84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	019b      	lsls	r3, r3, #6
 8000d8a:	22ff      	movs	r2, #255	; 0xff
 8000d8c:	401a      	ands	r2, r3
 8000d8e:	1dfb      	adds	r3, r7, #7
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	0018      	movs	r0, r3
 8000d94:	2303      	movs	r3, #3
 8000d96:	4003      	ands	r3, r0
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d9c:	4809      	ldr	r0, [pc, #36]	; (8000dc4 <__NVIC_SetPriority+0xd8>)
 8000d9e:	1dfb      	adds	r3, r7, #7
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	001c      	movs	r4, r3
 8000da4:	230f      	movs	r3, #15
 8000da6:	4023      	ands	r3, r4
 8000da8:	3b08      	subs	r3, #8
 8000daa:	089b      	lsrs	r3, r3, #2
 8000dac:	430a      	orrs	r2, r1
 8000dae:	3306      	adds	r3, #6
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	18c3      	adds	r3, r0, r3
 8000db4:	3304      	adds	r3, #4
 8000db6:	601a      	str	r2, [r3, #0]
}
 8000db8:	46c0      	nop			; (mov r8, r8)
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	b003      	add	sp, #12
 8000dbe:	bd90      	pop	{r4, r7, pc}
 8000dc0:	e000e100 	.word	0xe000e100
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	4a0c      	ldr	r2, [pc, #48]	; (8000e08 <SysTick_Config+0x40>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d901      	bls.n	8000dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e010      	b.n	8000e00 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <SysTick_Config+0x44>)
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	3a01      	subs	r2, #1
 8000de4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000de6:	2301      	movs	r3, #1
 8000de8:	425b      	negs	r3, r3
 8000dea:	2103      	movs	r1, #3
 8000dec:	0018      	movs	r0, r3
 8000dee:	f7ff ff7d 	bl	8000cec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <SysTick_Config+0x44>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000df8:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <SysTick_Config+0x44>)
 8000dfa:	2207      	movs	r2, #7
 8000dfc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dfe:	2300      	movs	r3, #0
}
 8000e00:	0018      	movs	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	b002      	add	sp, #8
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	00ffffff 	.word	0x00ffffff
 8000e0c:	e000e010 	.word	0xe000e010

08000e10 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
 8000e1a:	210f      	movs	r1, #15
 8000e1c:	187b      	adds	r3, r7, r1
 8000e1e:	1c02      	adds	r2, r0, #0
 8000e20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e22:	68ba      	ldr	r2, [r7, #8]
 8000e24:	187b      	adds	r3, r7, r1
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	b25b      	sxtb	r3, r3
 8000e2a:	0011      	movs	r1, r2
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f7ff ff5d 	bl	8000cec <__NVIC_SetPriority>
}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	46bd      	mov	sp, r7
 8000e36:	b004      	add	sp, #16
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	0002      	movs	r2, r0
 8000e42:	1dfb      	adds	r3, r7, #7
 8000e44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e46:	1dfb      	adds	r3, r7, #7
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	b25b      	sxtb	r3, r3
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f7ff ff33 	bl	8000cb8 <__NVIC_EnableIRQ>
}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	46bd      	mov	sp, r7
 8000e56:	b002      	add	sp, #8
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	0018      	movs	r0, r3
 8000e66:	f7ff ffaf 	bl	8000dc8 <SysTick_Config>
 8000e6a:	0003      	movs	r3, r0
}
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	b002      	add	sp, #8
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d101      	bne.n	8000e8a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e036      	b.n	8000ef8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2221      	movs	r2, #33	; 0x21
 8000e8e:	2102      	movs	r1, #2
 8000e90:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	4a18      	ldr	r2, [pc, #96]	; (8000f00 <HAL_DMA_Init+0x8c>)
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000eaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	695b      	ldr	r3, [r3, #20]
 8000ebc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ec2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	69db      	ldr	r3, [r3, #28]
 8000ec8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	68fa      	ldr	r2, [r7, #12]
 8000ed6:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	0018      	movs	r0, r3
 8000edc:	f000 f98c 	bl	80011f8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2221      	movs	r2, #33	; 0x21
 8000eea:	2101      	movs	r1, #1
 8000eec:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2220      	movs	r2, #32
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
}  
 8000ef8:	0018      	movs	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	b004      	add	sp, #16
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	ffffc00f 	.word	0xffffc00f

08000f04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
 8000f10:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000f12:	2317      	movs	r3, #23
 8000f14:	18fb      	adds	r3, r7, r3
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	2220      	movs	r2, #32
 8000f1e:	5c9b      	ldrb	r3, [r3, r2]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d101      	bne.n	8000f28 <HAL_DMA_Start_IT+0x24>
 8000f24:	2302      	movs	r3, #2
 8000f26:	e04f      	b.n	8000fc8 <HAL_DMA_Start_IT+0xc4>
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2220      	movs	r2, #32
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2221      	movs	r2, #33	; 0x21
 8000f34:	5c9b      	ldrb	r3, [r3, r2]
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d13a      	bne.n	8000fb2 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2221      	movs	r2, #33	; 0x21
 8000f40:	2102      	movs	r1, #2
 8000f42:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2200      	movs	r2, #0
 8000f48:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2101      	movs	r1, #1
 8000f56:	438a      	bics	r2, r1
 8000f58:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	68b9      	ldr	r1, [r7, #8]
 8000f60:	68f8      	ldr	r0, [r7, #12]
 8000f62:	f000 f91d 	bl	80011a0 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d008      	beq.n	8000f80 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	210e      	movs	r1, #14
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	e00f      	b.n	8000fa0 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	210a      	movs	r1, #10
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2104      	movs	r1, #4
 8000f9c:	438a      	bics	r2, r1
 8000f9e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2101      	movs	r1, #1
 8000fac:	430a      	orrs	r2, r1
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	e007      	b.n	8000fc2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2220      	movs	r2, #32
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000fba:	2317      	movs	r3, #23
 8000fbc:	18fb      	adds	r3, r7, r3
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8000fc2:	2317      	movs	r3, #23
 8000fc4:	18fb      	adds	r3, r7, r3
 8000fc6:	781b      	ldrb	r3, [r3, #0]
} 
 8000fc8:	0018      	movs	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b006      	add	sp, #24
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fd8:	230f      	movs	r3, #15
 8000fda:	18fb      	adds	r3, r7, r3
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2221      	movs	r2, #33	; 0x21
 8000fe4:	5c9b      	ldrb	r3, [r3, r2]
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d007      	beq.n	8000ffc <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2204      	movs	r2, #4
 8000ff0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ff2:	230f      	movs	r3, #15
 8000ff4:	18fb      	adds	r3, r7, r3
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	701a      	strb	r2, [r3, #0]
 8000ffa:	e028      	b.n	800104e <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	210e      	movs	r1, #14
 8001008:	438a      	bics	r2, r1
 800100a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2101      	movs	r1, #1
 8001018:	438a      	bics	r2, r1
 800101a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001024:	2101      	movs	r1, #1
 8001026:	4091      	lsls	r1, r2
 8001028:	000a      	movs	r2, r1
 800102a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2221      	movs	r2, #33	; 0x21
 8001030:	2101      	movs	r1, #1
 8001032:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2220      	movs	r2, #32
 8001038:	2100      	movs	r1, #0
 800103a:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001040:	2b00      	cmp	r3, #0
 8001042:	d004      	beq.n	800104e <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	0010      	movs	r0, r2
 800104c:	4798      	blx	r3
    } 
  }
  return status;
 800104e:	230f      	movs	r3, #15
 8001050:	18fb      	adds	r3, r7, r3
 8001052:	781b      	ldrb	r3, [r3, #0]
}
 8001054:	0018      	movs	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	b004      	add	sp, #16
 800105a:	bd80      	pop	{r7, pc}

0800105c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	2204      	movs	r2, #4
 800107a:	409a      	lsls	r2, r3
 800107c:	0013      	movs	r3, r2
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	4013      	ands	r3, r2
 8001082:	d024      	beq.n	80010ce <HAL_DMA_IRQHandler+0x72>
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	2204      	movs	r2, #4
 8001088:	4013      	ands	r3, r2
 800108a:	d020      	beq.n	80010ce <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2220      	movs	r2, #32
 8001094:	4013      	ands	r3, r2
 8001096:	d107      	bne.n	80010a8 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2104      	movs	r1, #4
 80010a4:	438a      	bics	r2, r1
 80010a6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010b0:	2104      	movs	r1, #4
 80010b2:	4091      	lsls	r1, r2
 80010b4:	000a      	movs	r2, r1
 80010b6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d100      	bne.n	80010c2 <HAL_DMA_IRQHandler+0x66>
 80010c0:	e06a      	b.n	8001198 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	0010      	movs	r0, r2
 80010ca:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80010cc:	e064      	b.n	8001198 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	2202      	movs	r2, #2
 80010d4:	409a      	lsls	r2, r3
 80010d6:	0013      	movs	r3, r2
 80010d8:	68fa      	ldr	r2, [r7, #12]
 80010da:	4013      	ands	r3, r2
 80010dc:	d02b      	beq.n	8001136 <HAL_DMA_IRQHandler+0xda>
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	2202      	movs	r2, #2
 80010e2:	4013      	ands	r3, r2
 80010e4:	d027      	beq.n	8001136 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2220      	movs	r2, #32
 80010ee:	4013      	ands	r3, r2
 80010f0:	d10b      	bne.n	800110a <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	210a      	movs	r1, #10
 80010fe:	438a      	bics	r2, r1
 8001100:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2221      	movs	r2, #33	; 0x21
 8001106:	2101      	movs	r1, #1
 8001108:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001112:	2102      	movs	r1, #2
 8001114:	4091      	lsls	r1, r2
 8001116:	000a      	movs	r2, r1
 8001118:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2220      	movs	r2, #32
 800111e:	2100      	movs	r1, #0
 8001120:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001126:	2b00      	cmp	r3, #0
 8001128:	d036      	beq.n	8001198 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	0010      	movs	r0, r2
 8001132:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001134:	e030      	b.n	8001198 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	2208      	movs	r2, #8
 800113c:	409a      	lsls	r2, r3
 800113e:	0013      	movs	r3, r2
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	4013      	ands	r3, r2
 8001144:	d028      	beq.n	8001198 <HAL_DMA_IRQHandler+0x13c>
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	2208      	movs	r2, #8
 800114a:	4013      	ands	r3, r2
 800114c:	d024      	beq.n	8001198 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	210e      	movs	r1, #14
 800115a:	438a      	bics	r2, r1
 800115c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001166:	2101      	movs	r1, #1
 8001168:	4091      	lsls	r1, r2
 800116a:	000a      	movs	r2, r1
 800116c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2201      	movs	r2, #1
 8001172:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2221      	movs	r2, #33	; 0x21
 8001178:	2101      	movs	r1, #1
 800117a:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2220      	movs	r2, #32
 8001180:	2100      	movs	r1, #0
 8001182:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001188:	2b00      	cmp	r3, #0
 800118a:	d005      	beq.n	8001198 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	0010      	movs	r0, r2
 8001194:	4798      	blx	r3
    }
   }
}  
 8001196:	e7ff      	b.n	8001198 <HAL_DMA_IRQHandler+0x13c>
 8001198:	46c0      	nop			; (mov r8, r8)
 800119a:	46bd      	mov	sp, r7
 800119c:	b004      	add	sp, #16
 800119e:	bd80      	pop	{r7, pc}

080011a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011b6:	2101      	movs	r1, #1
 80011b8:	4091      	lsls	r1, r2
 80011ba:	000a      	movs	r2, r1
 80011bc:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b10      	cmp	r3, #16
 80011cc:	d108      	bne.n	80011e0 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80011de:	e007      	b.n	80011f0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	68ba      	ldr	r2, [r7, #8]
 80011e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	60da      	str	r2, [r3, #12]
}
 80011f0:	46c0      	nop			; (mov r8, r8)
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b004      	add	sp, #16
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a08      	ldr	r2, [pc, #32]	; (8001228 <DMA_CalcBaseAndBitshift+0x30>)
 8001206:	4694      	mov	ip, r2
 8001208:	4463      	add	r3, ip
 800120a:	2114      	movs	r1, #20
 800120c:	0018      	movs	r0, r3
 800120e:	f7fe ff7b 	bl	8000108 <__udivsi3>
 8001212:	0003      	movs	r3, r0
 8001214:	009a      	lsls	r2, r3, #2
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a03      	ldr	r2, [pc, #12]	; (800122c <DMA_CalcBaseAndBitshift+0x34>)
 800121e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001220:	46c0      	nop			; (mov r8, r8)
 8001222:	46bd      	mov	sp, r7
 8001224:	b002      	add	sp, #8
 8001226:	bd80      	pop	{r7, pc}
 8001228:	bffdfff8 	.word	0xbffdfff8
 800122c:	40020000 	.word	0x40020000

08001230 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800123e:	e155      	b.n	80014ec <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2101      	movs	r1, #1
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	4091      	lsls	r1, r2
 800124a:	000a      	movs	r2, r1
 800124c:	4013      	ands	r3, r2
 800124e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d100      	bne.n	8001258 <HAL_GPIO_Init+0x28>
 8001256:	e146      	b.n	80014e6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d00b      	beq.n	8001278 <HAL_GPIO_Init+0x48>
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b02      	cmp	r3, #2
 8001266:	d007      	beq.n	8001278 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800126c:	2b11      	cmp	r3, #17
 800126e:	d003      	beq.n	8001278 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	2b12      	cmp	r3, #18
 8001276:	d130      	bne.n	80012da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	2203      	movs	r2, #3
 8001284:	409a      	lsls	r2, r3
 8001286:	0013      	movs	r3, r2
 8001288:	43da      	mvns	r2, r3
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	68da      	ldr	r2, [r3, #12]
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	409a      	lsls	r2, r3
 800129a:	0013      	movs	r3, r2
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4313      	orrs	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012ae:	2201      	movs	r2, #1
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	409a      	lsls	r2, r3
 80012b4:	0013      	movs	r3, r2
 80012b6:	43da      	mvns	r2, r3
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	091b      	lsrs	r3, r3, #4
 80012c4:	2201      	movs	r2, #1
 80012c6:	401a      	ands	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	409a      	lsls	r2, r3
 80012cc:	0013      	movs	r3, r2
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	2203      	movs	r2, #3
 80012e6:	409a      	lsls	r2, r3
 80012e8:	0013      	movs	r3, r2
 80012ea:	43da      	mvns	r2, r3
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	4013      	ands	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	689a      	ldr	r2, [r3, #8]
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	409a      	lsls	r2, r3
 80012fc:	0013      	movs	r3, r2
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4313      	orrs	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b02      	cmp	r3, #2
 8001310:	d003      	beq.n	800131a <HAL_GPIO_Init+0xea>
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b12      	cmp	r3, #18
 8001318:	d123      	bne.n	8001362 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	08da      	lsrs	r2, r3, #3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3208      	adds	r2, #8
 8001322:	0092      	lsls	r2, r2, #2
 8001324:	58d3      	ldr	r3, [r2, r3]
 8001326:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	2207      	movs	r2, #7
 800132c:	4013      	ands	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	220f      	movs	r2, #15
 8001332:	409a      	lsls	r2, r3
 8001334:	0013      	movs	r3, r2
 8001336:	43da      	mvns	r2, r3
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4013      	ands	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	691a      	ldr	r2, [r3, #16]
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	2107      	movs	r1, #7
 8001346:	400b      	ands	r3, r1
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	409a      	lsls	r2, r3
 800134c:	0013      	movs	r3, r2
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	08da      	lsrs	r2, r3, #3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3208      	adds	r2, #8
 800135c:	0092      	lsls	r2, r2, #2
 800135e:	6939      	ldr	r1, [r7, #16]
 8001360:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	2203      	movs	r2, #3
 800136e:	409a      	lsls	r2, r3
 8001370:	0013      	movs	r3, r2
 8001372:	43da      	mvns	r2, r3
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	4013      	ands	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2203      	movs	r2, #3
 8001380:	401a      	ands	r2, r3
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	409a      	lsls	r2, r3
 8001388:	0013      	movs	r3, r2
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685a      	ldr	r2, [r3, #4]
 800139a:	2380      	movs	r3, #128	; 0x80
 800139c:	055b      	lsls	r3, r3, #21
 800139e:	4013      	ands	r3, r2
 80013a0:	d100      	bne.n	80013a4 <HAL_GPIO_Init+0x174>
 80013a2:	e0a0      	b.n	80014e6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a4:	4b57      	ldr	r3, [pc, #348]	; (8001504 <HAL_GPIO_Init+0x2d4>)
 80013a6:	699a      	ldr	r2, [r3, #24]
 80013a8:	4b56      	ldr	r3, [pc, #344]	; (8001504 <HAL_GPIO_Init+0x2d4>)
 80013aa:	2101      	movs	r1, #1
 80013ac:	430a      	orrs	r2, r1
 80013ae:	619a      	str	r2, [r3, #24]
 80013b0:	4b54      	ldr	r3, [pc, #336]	; (8001504 <HAL_GPIO_Init+0x2d4>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	2201      	movs	r2, #1
 80013b6:	4013      	ands	r3, r2
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013bc:	4a52      	ldr	r2, [pc, #328]	; (8001508 <HAL_GPIO_Init+0x2d8>)
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	089b      	lsrs	r3, r3, #2
 80013c2:	3302      	adds	r3, #2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	589b      	ldr	r3, [r3, r2]
 80013c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	2203      	movs	r2, #3
 80013ce:	4013      	ands	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	220f      	movs	r2, #15
 80013d4:	409a      	lsls	r2, r3
 80013d6:	0013      	movs	r3, r2
 80013d8:	43da      	mvns	r2, r3
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	2390      	movs	r3, #144	; 0x90
 80013e4:	05db      	lsls	r3, r3, #23
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d019      	beq.n	800141e <HAL_GPIO_Init+0x1ee>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a47      	ldr	r2, [pc, #284]	; (800150c <HAL_GPIO_Init+0x2dc>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d013      	beq.n	800141a <HAL_GPIO_Init+0x1ea>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a46      	ldr	r2, [pc, #280]	; (8001510 <HAL_GPIO_Init+0x2e0>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d00d      	beq.n	8001416 <HAL_GPIO_Init+0x1e6>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a45      	ldr	r2, [pc, #276]	; (8001514 <HAL_GPIO_Init+0x2e4>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d007      	beq.n	8001412 <HAL_GPIO_Init+0x1e2>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a44      	ldr	r2, [pc, #272]	; (8001518 <HAL_GPIO_Init+0x2e8>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d101      	bne.n	800140e <HAL_GPIO_Init+0x1de>
 800140a:	2304      	movs	r3, #4
 800140c:	e008      	b.n	8001420 <HAL_GPIO_Init+0x1f0>
 800140e:	2305      	movs	r3, #5
 8001410:	e006      	b.n	8001420 <HAL_GPIO_Init+0x1f0>
 8001412:	2303      	movs	r3, #3
 8001414:	e004      	b.n	8001420 <HAL_GPIO_Init+0x1f0>
 8001416:	2302      	movs	r3, #2
 8001418:	e002      	b.n	8001420 <HAL_GPIO_Init+0x1f0>
 800141a:	2301      	movs	r3, #1
 800141c:	e000      	b.n	8001420 <HAL_GPIO_Init+0x1f0>
 800141e:	2300      	movs	r3, #0
 8001420:	697a      	ldr	r2, [r7, #20]
 8001422:	2103      	movs	r1, #3
 8001424:	400a      	ands	r2, r1
 8001426:	0092      	lsls	r2, r2, #2
 8001428:	4093      	lsls	r3, r2
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001430:	4935      	ldr	r1, [pc, #212]	; (8001508 <HAL_GPIO_Init+0x2d8>)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	089b      	lsrs	r3, r3, #2
 8001436:	3302      	adds	r3, #2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800143e:	4b37      	ldr	r3, [pc, #220]	; (800151c <HAL_GPIO_Init+0x2ec>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	43da      	mvns	r2, r3
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	4013      	ands	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	2380      	movs	r3, #128	; 0x80
 8001454:	025b      	lsls	r3, r3, #9
 8001456:	4013      	ands	r3, r2
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4313      	orrs	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001462:	4b2e      	ldr	r3, [pc, #184]	; (800151c <HAL_GPIO_Init+0x2ec>)
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001468:	4b2c      	ldr	r3, [pc, #176]	; (800151c <HAL_GPIO_Init+0x2ec>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	43da      	mvns	r2, r3
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	029b      	lsls	r3, r3, #10
 8001480:	4013      	ands	r3, r2
 8001482:	d003      	beq.n	800148c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800148c:	4b23      	ldr	r3, [pc, #140]	; (800151c <HAL_GPIO_Init+0x2ec>)
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001492:	4b22      	ldr	r3, [pc, #136]	; (800151c <HAL_GPIO_Init+0x2ec>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	43da      	mvns	r2, r3
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	2380      	movs	r3, #128	; 0x80
 80014a8:	035b      	lsls	r3, r3, #13
 80014aa:	4013      	ands	r3, r2
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014b6:	4b19      	ldr	r3, [pc, #100]	; (800151c <HAL_GPIO_Init+0x2ec>)
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80014bc:	4b17      	ldr	r3, [pc, #92]	; (800151c <HAL_GPIO_Init+0x2ec>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	43da      	mvns	r2, r3
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	2380      	movs	r3, #128	; 0x80
 80014d2:	039b      	lsls	r3, r3, #14
 80014d4:	4013      	ands	r3, r2
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014e0:	4b0e      	ldr	r3, [pc, #56]	; (800151c <HAL_GPIO_Init+0x2ec>)
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	3301      	adds	r3, #1
 80014ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	40da      	lsrs	r2, r3
 80014f4:	1e13      	subs	r3, r2, #0
 80014f6:	d000      	beq.n	80014fa <HAL_GPIO_Init+0x2ca>
 80014f8:	e6a2      	b.n	8001240 <HAL_GPIO_Init+0x10>
  } 
}
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	46bd      	mov	sp, r7
 80014fe:	b006      	add	sp, #24
 8001500:	bd80      	pop	{r7, pc}
 8001502:	46c0      	nop			; (mov r8, r8)
 8001504:	40021000 	.word	0x40021000
 8001508:	40010000 	.word	0x40010000
 800150c:	48000400 	.word	0x48000400
 8001510:	48000800 	.word	0x48000800
 8001514:	48000c00 	.word	0x48000c00
 8001518:	48001000 	.word	0x48001000
 800151c:	40010400 	.word	0x40010400

08001520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	0008      	movs	r0, r1
 800152a:	0011      	movs	r1, r2
 800152c:	1cbb      	adds	r3, r7, #2
 800152e:	1c02      	adds	r2, r0, #0
 8001530:	801a      	strh	r2, [r3, #0]
 8001532:	1c7b      	adds	r3, r7, #1
 8001534:	1c0a      	adds	r2, r1, #0
 8001536:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001538:	1c7b      	adds	r3, r7, #1
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d004      	beq.n	800154a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001540:	1cbb      	adds	r3, r7, #2
 8001542:	881a      	ldrh	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001548:	e003      	b.n	8001552 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800154a:	1cbb      	adds	r3, r7, #2
 800154c:	881a      	ldrh	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	46bd      	mov	sp, r7
 8001556:	b002      	add	sp, #8
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b084      	sub	sp, #16
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
 8001562:	000a      	movs	r2, r1
 8001564:	1cbb      	adds	r3, r7, #2
 8001566:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	695b      	ldr	r3, [r3, #20]
 800156c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800156e:	1cbb      	adds	r3, r7, #2
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	4013      	ands	r3, r2
 8001576:	041a      	lsls	r2, r3, #16
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	43db      	mvns	r3, r3
 800157c:	1cb9      	adds	r1, r7, #2
 800157e:	8809      	ldrh	r1, [r1, #0]
 8001580:	400b      	ands	r3, r1
 8001582:	431a      	orrs	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	619a      	str	r2, [r3, #24]
}
 8001588:	46c0      	nop			; (mov r8, r8)
 800158a:	46bd      	mov	sp, r7
 800158c:	b004      	add	sp, #16
 800158e:	bd80      	pop	{r7, pc}

08001590 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	0002      	movs	r2, r0
 8001598:	1dbb      	adds	r3, r7, #6
 800159a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800159c:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	1dba      	adds	r2, r7, #6
 80015a2:	8812      	ldrh	r2, [r2, #0]
 80015a4:	4013      	ands	r3, r2
 80015a6:	d008      	beq.n	80015ba <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80015aa:	1dba      	adds	r2, r7, #6
 80015ac:	8812      	ldrh	r2, [r2, #0]
 80015ae:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015b0:	1dbb      	adds	r3, r7, #6
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	0018      	movs	r0, r3
 80015b6:	f000 f807 	bl	80015c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	46bd      	mov	sp, r7
 80015be:	b002      	add	sp, #8
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	40010400 	.word	0x40010400

080015c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	0002      	movs	r2, r0
 80015d0:	1dbb      	adds	r3, r7, #6
 80015d2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 80015d4:	46c0      	nop			; (mov r8, r8)
 80015d6:	46bd      	mov	sp, r7
 80015d8:	b002      	add	sp, #8
 80015da:	bd80      	pop	{r7, pc}

080015dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d102      	bne.n	80015f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	f000 fb76 	bl	8001cdc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2201      	movs	r2, #1
 80015f6:	4013      	ands	r3, r2
 80015f8:	d100      	bne.n	80015fc <HAL_RCC_OscConfig+0x20>
 80015fa:	e08e      	b.n	800171a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80015fc:	4bc5      	ldr	r3, [pc, #788]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	220c      	movs	r2, #12
 8001602:	4013      	ands	r3, r2
 8001604:	2b04      	cmp	r3, #4
 8001606:	d00e      	beq.n	8001626 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001608:	4bc2      	ldr	r3, [pc, #776]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	220c      	movs	r2, #12
 800160e:	4013      	ands	r3, r2
 8001610:	2b08      	cmp	r3, #8
 8001612:	d117      	bne.n	8001644 <HAL_RCC_OscConfig+0x68>
 8001614:	4bbf      	ldr	r3, [pc, #764]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	23c0      	movs	r3, #192	; 0xc0
 800161a:	025b      	lsls	r3, r3, #9
 800161c:	401a      	ands	r2, r3
 800161e:	2380      	movs	r3, #128	; 0x80
 8001620:	025b      	lsls	r3, r3, #9
 8001622:	429a      	cmp	r2, r3
 8001624:	d10e      	bne.n	8001644 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001626:	4bbb      	ldr	r3, [pc, #748]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	2380      	movs	r3, #128	; 0x80
 800162c:	029b      	lsls	r3, r3, #10
 800162e:	4013      	ands	r3, r2
 8001630:	d100      	bne.n	8001634 <HAL_RCC_OscConfig+0x58>
 8001632:	e071      	b.n	8001718 <HAL_RCC_OscConfig+0x13c>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d000      	beq.n	800163e <HAL_RCC_OscConfig+0x62>
 800163c:	e06c      	b.n	8001718 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	f000 fb4c 	bl	8001cdc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d107      	bne.n	800165c <HAL_RCC_OscConfig+0x80>
 800164c:	4bb1      	ldr	r3, [pc, #708]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4bb0      	ldr	r3, [pc, #704]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 8001652:	2180      	movs	r1, #128	; 0x80
 8001654:	0249      	lsls	r1, r1, #9
 8001656:	430a      	orrs	r2, r1
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	e02f      	b.n	80016bc <HAL_RCC_OscConfig+0xe0>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d10c      	bne.n	800167e <HAL_RCC_OscConfig+0xa2>
 8001664:	4bab      	ldr	r3, [pc, #684]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4baa      	ldr	r3, [pc, #680]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 800166a:	49ab      	ldr	r1, [pc, #684]	; (8001918 <HAL_RCC_OscConfig+0x33c>)
 800166c:	400a      	ands	r2, r1
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	4ba8      	ldr	r3, [pc, #672]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4ba7      	ldr	r3, [pc, #668]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 8001676:	49a9      	ldr	r1, [pc, #676]	; (800191c <HAL_RCC_OscConfig+0x340>)
 8001678:	400a      	ands	r2, r1
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	e01e      	b.n	80016bc <HAL_RCC_OscConfig+0xe0>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2b05      	cmp	r3, #5
 8001684:	d10e      	bne.n	80016a4 <HAL_RCC_OscConfig+0xc8>
 8001686:	4ba3      	ldr	r3, [pc, #652]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	4ba2      	ldr	r3, [pc, #648]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 800168c:	2180      	movs	r1, #128	; 0x80
 800168e:	02c9      	lsls	r1, r1, #11
 8001690:	430a      	orrs	r2, r1
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	4b9f      	ldr	r3, [pc, #636]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b9e      	ldr	r3, [pc, #632]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 800169a:	2180      	movs	r1, #128	; 0x80
 800169c:	0249      	lsls	r1, r1, #9
 800169e:	430a      	orrs	r2, r1
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	e00b      	b.n	80016bc <HAL_RCC_OscConfig+0xe0>
 80016a4:	4b9b      	ldr	r3, [pc, #620]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b9a      	ldr	r3, [pc, #616]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 80016aa:	499b      	ldr	r1, [pc, #620]	; (8001918 <HAL_RCC_OscConfig+0x33c>)
 80016ac:	400a      	ands	r2, r1
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	4b98      	ldr	r3, [pc, #608]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4b97      	ldr	r3, [pc, #604]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 80016b6:	4999      	ldr	r1, [pc, #612]	; (800191c <HAL_RCC_OscConfig+0x340>)
 80016b8:	400a      	ands	r2, r1
 80016ba:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d014      	beq.n	80016ee <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c4:	f7ff facc 	bl	8000c60 <HAL_GetTick>
 80016c8:	0003      	movs	r3, r0
 80016ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ce:	f7ff fac7 	bl	8000c60 <HAL_GetTick>
 80016d2:	0002      	movs	r2, r0
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b64      	cmp	r3, #100	; 0x64
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e2fd      	b.n	8001cdc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e0:	4b8c      	ldr	r3, [pc, #560]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	029b      	lsls	r3, r3, #10
 80016e8:	4013      	ands	r3, r2
 80016ea:	d0f0      	beq.n	80016ce <HAL_RCC_OscConfig+0xf2>
 80016ec:	e015      	b.n	800171a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ee:	f7ff fab7 	bl	8000c60 <HAL_GetTick>
 80016f2:	0003      	movs	r3, r0
 80016f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016f8:	f7ff fab2 	bl	8000c60 <HAL_GetTick>
 80016fc:	0002      	movs	r2, r0
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b64      	cmp	r3, #100	; 0x64
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e2e8      	b.n	8001cdc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800170a:	4b82      	ldr	r3, [pc, #520]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	2380      	movs	r3, #128	; 0x80
 8001710:	029b      	lsls	r3, r3, #10
 8001712:	4013      	ands	r3, r2
 8001714:	d1f0      	bne.n	80016f8 <HAL_RCC_OscConfig+0x11c>
 8001716:	e000      	b.n	800171a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001718:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2202      	movs	r2, #2
 8001720:	4013      	ands	r3, r2
 8001722:	d100      	bne.n	8001726 <HAL_RCC_OscConfig+0x14a>
 8001724:	e06c      	b.n	8001800 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001726:	4b7b      	ldr	r3, [pc, #492]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	220c      	movs	r2, #12
 800172c:	4013      	ands	r3, r2
 800172e:	d00e      	beq.n	800174e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001730:	4b78      	ldr	r3, [pc, #480]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	220c      	movs	r2, #12
 8001736:	4013      	ands	r3, r2
 8001738:	2b08      	cmp	r3, #8
 800173a:	d11f      	bne.n	800177c <HAL_RCC_OscConfig+0x1a0>
 800173c:	4b75      	ldr	r3, [pc, #468]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	23c0      	movs	r3, #192	; 0xc0
 8001742:	025b      	lsls	r3, r3, #9
 8001744:	401a      	ands	r2, r3
 8001746:	2380      	movs	r3, #128	; 0x80
 8001748:	021b      	lsls	r3, r3, #8
 800174a:	429a      	cmp	r2, r3
 800174c:	d116      	bne.n	800177c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800174e:	4b71      	ldr	r3, [pc, #452]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2202      	movs	r2, #2
 8001754:	4013      	ands	r3, r2
 8001756:	d005      	beq.n	8001764 <HAL_RCC_OscConfig+0x188>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d001      	beq.n	8001764 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e2bb      	b.n	8001cdc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001764:	4b6b      	ldr	r3, [pc, #428]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	22f8      	movs	r2, #248	; 0xf8
 800176a:	4393      	bics	r3, r2
 800176c:	0019      	movs	r1, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	00da      	lsls	r2, r3, #3
 8001774:	4b67      	ldr	r3, [pc, #412]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 8001776:	430a      	orrs	r2, r1
 8001778:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800177a:	e041      	b.n	8001800 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d024      	beq.n	80017ce <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001784:	4b63      	ldr	r3, [pc, #396]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b62      	ldr	r3, [pc, #392]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 800178a:	2101      	movs	r1, #1
 800178c:	430a      	orrs	r2, r1
 800178e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001790:	f7ff fa66 	bl	8000c60 <HAL_GetTick>
 8001794:	0003      	movs	r3, r0
 8001796:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800179a:	f7ff fa61 	bl	8000c60 <HAL_GetTick>
 800179e:	0002      	movs	r2, r0
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e297      	b.n	8001cdc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ac:	4b59      	ldr	r3, [pc, #356]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2202      	movs	r2, #2
 80017b2:	4013      	ands	r3, r2
 80017b4:	d0f1      	beq.n	800179a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b6:	4b57      	ldr	r3, [pc, #348]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	22f8      	movs	r2, #248	; 0xf8
 80017bc:	4393      	bics	r3, r2
 80017be:	0019      	movs	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	00da      	lsls	r2, r3, #3
 80017c6:	4b53      	ldr	r3, [pc, #332]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 80017c8:	430a      	orrs	r2, r1
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	e018      	b.n	8001800 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ce:	4b51      	ldr	r3, [pc, #324]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	4b50      	ldr	r3, [pc, #320]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 80017d4:	2101      	movs	r1, #1
 80017d6:	438a      	bics	r2, r1
 80017d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017da:	f7ff fa41 	bl	8000c60 <HAL_GetTick>
 80017de:	0003      	movs	r3, r0
 80017e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017e4:	f7ff fa3c 	bl	8000c60 <HAL_GetTick>
 80017e8:	0002      	movs	r2, r0
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e272      	b.n	8001cdc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f6:	4b47      	ldr	r3, [pc, #284]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2202      	movs	r2, #2
 80017fc:	4013      	ands	r3, r2
 80017fe:	d1f1      	bne.n	80017e4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2208      	movs	r2, #8
 8001806:	4013      	ands	r3, r2
 8001808:	d036      	beq.n	8001878 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d019      	beq.n	8001846 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001812:	4b40      	ldr	r3, [pc, #256]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 8001814:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001816:	4b3f      	ldr	r3, [pc, #252]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 8001818:	2101      	movs	r1, #1
 800181a:	430a      	orrs	r2, r1
 800181c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181e:	f7ff fa1f 	bl	8000c60 <HAL_GetTick>
 8001822:	0003      	movs	r3, r0
 8001824:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001828:	f7ff fa1a 	bl	8000c60 <HAL_GetTick>
 800182c:	0002      	movs	r2, r0
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e250      	b.n	8001cdc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800183a:	4b36      	ldr	r3, [pc, #216]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 800183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183e:	2202      	movs	r2, #2
 8001840:	4013      	ands	r3, r2
 8001842:	d0f1      	beq.n	8001828 <HAL_RCC_OscConfig+0x24c>
 8001844:	e018      	b.n	8001878 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001846:	4b33      	ldr	r3, [pc, #204]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 8001848:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800184a:	4b32      	ldr	r3, [pc, #200]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 800184c:	2101      	movs	r1, #1
 800184e:	438a      	bics	r2, r1
 8001850:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001852:	f7ff fa05 	bl	8000c60 <HAL_GetTick>
 8001856:	0003      	movs	r3, r0
 8001858:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800185c:	f7ff fa00 	bl	8000c60 <HAL_GetTick>
 8001860:	0002      	movs	r2, r0
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e236      	b.n	8001cdc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800186e:	4b29      	ldr	r3, [pc, #164]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 8001870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001872:	2202      	movs	r2, #2
 8001874:	4013      	ands	r3, r2
 8001876:	d1f1      	bne.n	800185c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2204      	movs	r2, #4
 800187e:	4013      	ands	r3, r2
 8001880:	d100      	bne.n	8001884 <HAL_RCC_OscConfig+0x2a8>
 8001882:	e0b5      	b.n	80019f0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001884:	231f      	movs	r3, #31
 8001886:	18fb      	adds	r3, r7, r3
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800188c:	4b21      	ldr	r3, [pc, #132]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 800188e:	69da      	ldr	r2, [r3, #28]
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	055b      	lsls	r3, r3, #21
 8001894:	4013      	ands	r3, r2
 8001896:	d111      	bne.n	80018bc <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001898:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 800189a:	69da      	ldr	r2, [r3, #28]
 800189c:	4b1d      	ldr	r3, [pc, #116]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 800189e:	2180      	movs	r1, #128	; 0x80
 80018a0:	0549      	lsls	r1, r1, #21
 80018a2:	430a      	orrs	r2, r1
 80018a4:	61da      	str	r2, [r3, #28]
 80018a6:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 80018a8:	69da      	ldr	r2, [r3, #28]
 80018aa:	2380      	movs	r3, #128	; 0x80
 80018ac:	055b      	lsls	r3, r3, #21
 80018ae:	4013      	ands	r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018b4:	231f      	movs	r3, #31
 80018b6:	18fb      	adds	r3, r7, r3
 80018b8:	2201      	movs	r2, #1
 80018ba:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018bc:	4b18      	ldr	r3, [pc, #96]	; (8001920 <HAL_RCC_OscConfig+0x344>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	2380      	movs	r3, #128	; 0x80
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4013      	ands	r3, r2
 80018c6:	d11a      	bne.n	80018fe <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018c8:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_RCC_OscConfig+0x344>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4b14      	ldr	r3, [pc, #80]	; (8001920 <HAL_RCC_OscConfig+0x344>)
 80018ce:	2180      	movs	r1, #128	; 0x80
 80018d0:	0049      	lsls	r1, r1, #1
 80018d2:	430a      	orrs	r2, r1
 80018d4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018d6:	f7ff f9c3 	bl	8000c60 <HAL_GetTick>
 80018da:	0003      	movs	r3, r0
 80018dc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018e0:	f7ff f9be 	bl	8000c60 <HAL_GetTick>
 80018e4:	0002      	movs	r2, r0
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b64      	cmp	r3, #100	; 0x64
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e1f4      	b.n	8001cdc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_RCC_OscConfig+0x344>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	2380      	movs	r3, #128	; 0x80
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	4013      	ands	r3, r2
 80018fc:	d0f0      	beq.n	80018e0 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d10e      	bne.n	8001924 <HAL_RCC_OscConfig+0x348>
 8001906:	4b03      	ldr	r3, [pc, #12]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 8001908:	6a1a      	ldr	r2, [r3, #32]
 800190a:	4b02      	ldr	r3, [pc, #8]	; (8001914 <HAL_RCC_OscConfig+0x338>)
 800190c:	2101      	movs	r1, #1
 800190e:	430a      	orrs	r2, r1
 8001910:	621a      	str	r2, [r3, #32]
 8001912:	e035      	b.n	8001980 <HAL_RCC_OscConfig+0x3a4>
 8001914:	40021000 	.word	0x40021000
 8001918:	fffeffff 	.word	0xfffeffff
 800191c:	fffbffff 	.word	0xfffbffff
 8001920:	40007000 	.word	0x40007000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d10c      	bne.n	8001946 <HAL_RCC_OscConfig+0x36a>
 800192c:	4bca      	ldr	r3, [pc, #808]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 800192e:	6a1a      	ldr	r2, [r3, #32]
 8001930:	4bc9      	ldr	r3, [pc, #804]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001932:	2101      	movs	r1, #1
 8001934:	438a      	bics	r2, r1
 8001936:	621a      	str	r2, [r3, #32]
 8001938:	4bc7      	ldr	r3, [pc, #796]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 800193a:	6a1a      	ldr	r2, [r3, #32]
 800193c:	4bc6      	ldr	r3, [pc, #792]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 800193e:	2104      	movs	r1, #4
 8001940:	438a      	bics	r2, r1
 8001942:	621a      	str	r2, [r3, #32]
 8001944:	e01c      	b.n	8001980 <HAL_RCC_OscConfig+0x3a4>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2b05      	cmp	r3, #5
 800194c:	d10c      	bne.n	8001968 <HAL_RCC_OscConfig+0x38c>
 800194e:	4bc2      	ldr	r3, [pc, #776]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001950:	6a1a      	ldr	r2, [r3, #32]
 8001952:	4bc1      	ldr	r3, [pc, #772]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001954:	2104      	movs	r1, #4
 8001956:	430a      	orrs	r2, r1
 8001958:	621a      	str	r2, [r3, #32]
 800195a:	4bbf      	ldr	r3, [pc, #764]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 800195c:	6a1a      	ldr	r2, [r3, #32]
 800195e:	4bbe      	ldr	r3, [pc, #760]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001960:	2101      	movs	r1, #1
 8001962:	430a      	orrs	r2, r1
 8001964:	621a      	str	r2, [r3, #32]
 8001966:	e00b      	b.n	8001980 <HAL_RCC_OscConfig+0x3a4>
 8001968:	4bbb      	ldr	r3, [pc, #748]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 800196a:	6a1a      	ldr	r2, [r3, #32]
 800196c:	4bba      	ldr	r3, [pc, #744]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 800196e:	2101      	movs	r1, #1
 8001970:	438a      	bics	r2, r1
 8001972:	621a      	str	r2, [r3, #32]
 8001974:	4bb8      	ldr	r3, [pc, #736]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001976:	6a1a      	ldr	r2, [r3, #32]
 8001978:	4bb7      	ldr	r3, [pc, #732]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 800197a:	2104      	movs	r1, #4
 800197c:	438a      	bics	r2, r1
 800197e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d014      	beq.n	80019b2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001988:	f7ff f96a 	bl	8000c60 <HAL_GetTick>
 800198c:	0003      	movs	r3, r0
 800198e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001990:	e009      	b.n	80019a6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001992:	f7ff f965 	bl	8000c60 <HAL_GetTick>
 8001996:	0002      	movs	r2, r0
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	4aaf      	ldr	r2, [pc, #700]	; (8001c5c <HAL_RCC_OscConfig+0x680>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e19a      	b.n	8001cdc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a6:	4bac      	ldr	r3, [pc, #688]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	2202      	movs	r2, #2
 80019ac:	4013      	ands	r3, r2
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCC_OscConfig+0x3b6>
 80019b0:	e013      	b.n	80019da <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b2:	f7ff f955 	bl	8000c60 <HAL_GetTick>
 80019b6:	0003      	movs	r3, r0
 80019b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ba:	e009      	b.n	80019d0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019bc:	f7ff f950 	bl	8000c60 <HAL_GetTick>
 80019c0:	0002      	movs	r2, r0
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	4aa5      	ldr	r2, [pc, #660]	; (8001c5c <HAL_RCC_OscConfig+0x680>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e185      	b.n	8001cdc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019d0:	4ba1      	ldr	r3, [pc, #644]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	2202      	movs	r2, #2
 80019d6:	4013      	ands	r3, r2
 80019d8:	d1f0      	bne.n	80019bc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019da:	231f      	movs	r3, #31
 80019dc:	18fb      	adds	r3, r7, r3
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d105      	bne.n	80019f0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019e4:	4b9c      	ldr	r3, [pc, #624]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 80019e6:	69da      	ldr	r2, [r3, #28]
 80019e8:	4b9b      	ldr	r3, [pc, #620]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 80019ea:	499d      	ldr	r1, [pc, #628]	; (8001c60 <HAL_RCC_OscConfig+0x684>)
 80019ec:	400a      	ands	r2, r1
 80019ee:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2210      	movs	r2, #16
 80019f6:	4013      	ands	r3, r2
 80019f8:	d063      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d12a      	bne.n	8001a58 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a02:	4b95      	ldr	r3, [pc, #596]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001a04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a06:	4b94      	ldr	r3, [pc, #592]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001a08:	2104      	movs	r1, #4
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001a0e:	4b92      	ldr	r3, [pc, #584]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001a10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a12:	4b91      	ldr	r3, [pc, #580]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001a14:	2101      	movs	r1, #1
 8001a16:	430a      	orrs	r2, r1
 8001a18:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a1a:	f7ff f921 	bl	8000c60 <HAL_GetTick>
 8001a1e:	0003      	movs	r3, r0
 8001a20:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a24:	f7ff f91c 	bl	8000c60 <HAL_GetTick>
 8001a28:	0002      	movs	r2, r0
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e152      	b.n	8001cdc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a36:	4b88      	ldr	r3, [pc, #544]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	d0f1      	beq.n	8001a24 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a40:	4b85      	ldr	r3, [pc, #532]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a44:	22f8      	movs	r2, #248	; 0xf8
 8001a46:	4393      	bics	r3, r2
 8001a48:	0019      	movs	r1, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	00da      	lsls	r2, r3, #3
 8001a50:	4b81      	ldr	r3, [pc, #516]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001a52:	430a      	orrs	r2, r1
 8001a54:	635a      	str	r2, [r3, #52]	; 0x34
 8001a56:	e034      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	3305      	adds	r3, #5
 8001a5e:	d111      	bne.n	8001a84 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001a60:	4b7d      	ldr	r3, [pc, #500]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001a62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a64:	4b7c      	ldr	r3, [pc, #496]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001a66:	2104      	movs	r1, #4
 8001a68:	438a      	bics	r2, r1
 8001a6a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a6c:	4b7a      	ldr	r3, [pc, #488]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a70:	22f8      	movs	r2, #248	; 0xf8
 8001a72:	4393      	bics	r3, r2
 8001a74:	0019      	movs	r1, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	00da      	lsls	r2, r3, #3
 8001a7c:	4b76      	ldr	r3, [pc, #472]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	635a      	str	r2, [r3, #52]	; 0x34
 8001a82:	e01e      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a84:	4b74      	ldr	r3, [pc, #464]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001a86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a88:	4b73      	ldr	r3, [pc, #460]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001a8a:	2104      	movs	r1, #4
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001a90:	4b71      	ldr	r3, [pc, #452]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001a92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a94:	4b70      	ldr	r3, [pc, #448]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001a96:	2101      	movs	r1, #1
 8001a98:	438a      	bics	r2, r1
 8001a9a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9c:	f7ff f8e0 	bl	8000c60 <HAL_GetTick>
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001aa6:	f7ff f8db 	bl	8000c60 <HAL_GetTick>
 8001aaa:	0002      	movs	r2, r0
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e111      	b.n	8001cdc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ab8:	4b67      	ldr	r3, [pc, #412]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001abc:	2202      	movs	r2, #2
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d1f1      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2220      	movs	r2, #32
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d05c      	beq.n	8001b86 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001acc:	4b62      	ldr	r3, [pc, #392]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	220c      	movs	r2, #12
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	2b0c      	cmp	r3, #12
 8001ad6:	d00e      	beq.n	8001af6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001ad8:	4b5f      	ldr	r3, [pc, #380]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	220c      	movs	r2, #12
 8001ade:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001ae0:	2b08      	cmp	r3, #8
 8001ae2:	d114      	bne.n	8001b0e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001ae4:	4b5c      	ldr	r3, [pc, #368]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	23c0      	movs	r3, #192	; 0xc0
 8001aea:	025b      	lsls	r3, r3, #9
 8001aec:	401a      	ands	r2, r3
 8001aee:	23c0      	movs	r3, #192	; 0xc0
 8001af0:	025b      	lsls	r3, r3, #9
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d10b      	bne.n	8001b0e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001af6:	4b58      	ldr	r3, [pc, #352]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001af8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001afa:	2380      	movs	r3, #128	; 0x80
 8001afc:	025b      	lsls	r3, r3, #9
 8001afe:	4013      	ands	r3, r2
 8001b00:	d040      	beq.n	8001b84 <HAL_RCC_OscConfig+0x5a8>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d03c      	beq.n	8001b84 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e0e6      	b.n	8001cdc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d01b      	beq.n	8001b4e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001b16:	4b50      	ldr	r3, [pc, #320]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001b18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b1a:	4b4f      	ldr	r3, [pc, #316]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001b1c:	2180      	movs	r1, #128	; 0x80
 8001b1e:	0249      	lsls	r1, r1, #9
 8001b20:	430a      	orrs	r2, r1
 8001b22:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b24:	f7ff f89c 	bl	8000c60 <HAL_GetTick>
 8001b28:	0003      	movs	r3, r0
 8001b2a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b2e:	f7ff f897 	bl	8000c60 <HAL_GetTick>
 8001b32:	0002      	movs	r2, r0
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e0cd      	b.n	8001cdc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001b40:	4b45      	ldr	r3, [pc, #276]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001b42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b44:	2380      	movs	r3, #128	; 0x80
 8001b46:	025b      	lsls	r3, r3, #9
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d0f0      	beq.n	8001b2e <HAL_RCC_OscConfig+0x552>
 8001b4c:	e01b      	b.n	8001b86 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001b4e:	4b42      	ldr	r3, [pc, #264]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001b50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b52:	4b41      	ldr	r3, [pc, #260]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001b54:	4943      	ldr	r1, [pc, #268]	; (8001c64 <HAL_RCC_OscConfig+0x688>)
 8001b56:	400a      	ands	r2, r1
 8001b58:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5a:	f7ff f881 	bl	8000c60 <HAL_GetTick>
 8001b5e:	0003      	movs	r3, r0
 8001b60:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b64:	f7ff f87c 	bl	8000c60 <HAL_GetTick>
 8001b68:	0002      	movs	r2, r0
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e0b2      	b.n	8001cdc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001b76:	4b38      	ldr	r3, [pc, #224]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001b78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	025b      	lsls	r3, r3, #9
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0x588>
 8001b82:	e000      	b.n	8001b86 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001b84:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d100      	bne.n	8001b90 <HAL_RCC_OscConfig+0x5b4>
 8001b8e:	e0a4      	b.n	8001cda <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b90:	4b31      	ldr	r3, [pc, #196]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	220c      	movs	r2, #12
 8001b96:	4013      	ands	r3, r2
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d100      	bne.n	8001b9e <HAL_RCC_OscConfig+0x5c2>
 8001b9c:	e078      	b.n	8001c90 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d14c      	bne.n	8001c40 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba6:	4b2c      	ldr	r3, [pc, #176]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	4b2b      	ldr	r3, [pc, #172]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001bac:	492e      	ldr	r1, [pc, #184]	; (8001c68 <HAL_RCC_OscConfig+0x68c>)
 8001bae:	400a      	ands	r2, r1
 8001bb0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb2:	f7ff f855 	bl	8000c60 <HAL_GetTick>
 8001bb6:	0003      	movs	r3, r0
 8001bb8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bbc:	f7ff f850 	bl	8000c60 <HAL_GetTick>
 8001bc0:	0002      	movs	r2, r0
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e086      	b.n	8001cdc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bce:	4b22      	ldr	r3, [pc, #136]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	2380      	movs	r3, #128	; 0x80
 8001bd4:	049b      	lsls	r3, r3, #18
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d1f0      	bne.n	8001bbc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bda:	4b1f      	ldr	r3, [pc, #124]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bde:	220f      	movs	r2, #15
 8001be0:	4393      	bics	r3, r2
 8001be2:	0019      	movs	r1, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001be8:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001bea:	430a      	orrs	r2, r1
 8001bec:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bee:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	4a1e      	ldr	r2, [pc, #120]	; (8001c6c <HAL_RCC_OscConfig+0x690>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	0019      	movs	r1, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c00:	431a      	orrs	r2, r3
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001c04:	430a      	orrs	r2, r1
 8001c06:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c08:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001c0e:	2180      	movs	r1, #128	; 0x80
 8001c10:	0449      	lsls	r1, r1, #17
 8001c12:	430a      	orrs	r2, r1
 8001c14:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c16:	f7ff f823 	bl	8000c60 <HAL_GetTick>
 8001c1a:	0003      	movs	r3, r0
 8001c1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c20:	f7ff f81e 	bl	8000c60 <HAL_GetTick>
 8001c24:	0002      	movs	r2, r0
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e054      	b.n	8001cdc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c32:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	2380      	movs	r3, #128	; 0x80
 8001c38:	049b      	lsls	r3, r3, #18
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	d0f0      	beq.n	8001c20 <HAL_RCC_OscConfig+0x644>
 8001c3e:	e04c      	b.n	8001cda <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c40:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001c46:	4908      	ldr	r1, [pc, #32]	; (8001c68 <HAL_RCC_OscConfig+0x68c>)
 8001c48:	400a      	ands	r2, r1
 8001c4a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4c:	f7ff f808 	bl	8000c60 <HAL_GetTick>
 8001c50:	0003      	movs	r3, r0
 8001c52:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c54:	e015      	b.n	8001c82 <HAL_RCC_OscConfig+0x6a6>
 8001c56:	46c0      	nop			; (mov r8, r8)
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	00001388 	.word	0x00001388
 8001c60:	efffffff 	.word	0xefffffff
 8001c64:	fffeffff 	.word	0xfffeffff
 8001c68:	feffffff 	.word	0xfeffffff
 8001c6c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c70:	f7fe fff6 	bl	8000c60 <HAL_GetTick>
 8001c74:	0002      	movs	r2, r0
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e02c      	b.n	8001cdc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c82:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <HAL_RCC_OscConfig+0x708>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	2380      	movs	r3, #128	; 0x80
 8001c88:	049b      	lsls	r3, r3, #18
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d1f0      	bne.n	8001c70 <HAL_RCC_OscConfig+0x694>
 8001c8e:	e024      	b.n	8001cda <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d101      	bne.n	8001c9c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e01f      	b.n	8001cdc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001c9c:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <HAL_RCC_OscConfig+0x708>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <HAL_RCC_OscConfig+0x708>)
 8001ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	23c0      	movs	r3, #192	; 0xc0
 8001cac:	025b      	lsls	r3, r3, #9
 8001cae:	401a      	ands	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d10e      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	220f      	movs	r2, #15
 8001cbc:	401a      	ands	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d107      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	23f0      	movs	r3, #240	; 0xf0
 8001cca:	039b      	lsls	r3, r3, #14
 8001ccc:	401a      	ands	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d001      	beq.n	8001cda <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e000      	b.n	8001cdc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	0018      	movs	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	b008      	add	sp, #32
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40021000 	.word	0x40021000

08001ce8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e0bf      	b.n	8001e7c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cfc:	4b61      	ldr	r3, [pc, #388]	; (8001e84 <HAL_RCC_ClockConfig+0x19c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2201      	movs	r2, #1
 8001d02:	4013      	ands	r3, r2
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d911      	bls.n	8001d2e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d0a:	4b5e      	ldr	r3, [pc, #376]	; (8001e84 <HAL_RCC_ClockConfig+0x19c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	4393      	bics	r3, r2
 8001d12:	0019      	movs	r1, r3
 8001d14:	4b5b      	ldr	r3, [pc, #364]	; (8001e84 <HAL_RCC_ClockConfig+0x19c>)
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1c:	4b59      	ldr	r3, [pc, #356]	; (8001e84 <HAL_RCC_ClockConfig+0x19c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2201      	movs	r2, #1
 8001d22:	4013      	ands	r3, r2
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d001      	beq.n	8001d2e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e0a6      	b.n	8001e7c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2202      	movs	r2, #2
 8001d34:	4013      	ands	r3, r2
 8001d36:	d015      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2204      	movs	r2, #4
 8001d3e:	4013      	ands	r3, r2
 8001d40:	d006      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d42:	4b51      	ldr	r3, [pc, #324]	; (8001e88 <HAL_RCC_ClockConfig+0x1a0>)
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	4b50      	ldr	r3, [pc, #320]	; (8001e88 <HAL_RCC_ClockConfig+0x1a0>)
 8001d48:	21e0      	movs	r1, #224	; 0xe0
 8001d4a:	00c9      	lsls	r1, r1, #3
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d50:	4b4d      	ldr	r3, [pc, #308]	; (8001e88 <HAL_RCC_ClockConfig+0x1a0>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	22f0      	movs	r2, #240	; 0xf0
 8001d56:	4393      	bics	r3, r2
 8001d58:	0019      	movs	r1, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689a      	ldr	r2, [r3, #8]
 8001d5e:	4b4a      	ldr	r3, [pc, #296]	; (8001e88 <HAL_RCC_ClockConfig+0x1a0>)
 8001d60:	430a      	orrs	r2, r1
 8001d62:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	d04c      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d107      	bne.n	8001d86 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d76:	4b44      	ldr	r3, [pc, #272]	; (8001e88 <HAL_RCC_ClockConfig+0x1a0>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	2380      	movs	r3, #128	; 0x80
 8001d7c:	029b      	lsls	r3, r3, #10
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d120      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e07a      	b.n	8001e7c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d107      	bne.n	8001d9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d8e:	4b3e      	ldr	r3, [pc, #248]	; (8001e88 <HAL_RCC_ClockConfig+0x1a0>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	049b      	lsls	r3, r3, #18
 8001d96:	4013      	ands	r3, r2
 8001d98:	d114      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e06e      	b.n	8001e7c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b03      	cmp	r3, #3
 8001da4:	d107      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001da6:	4b38      	ldr	r3, [pc, #224]	; (8001e88 <HAL_RCC_ClockConfig+0x1a0>)
 8001da8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001daa:	2380      	movs	r3, #128	; 0x80
 8001dac:	025b      	lsls	r3, r3, #9
 8001dae:	4013      	ands	r3, r2
 8001db0:	d108      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e062      	b.n	8001e7c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db6:	4b34      	ldr	r3, [pc, #208]	; (8001e88 <HAL_RCC_ClockConfig+0x1a0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2202      	movs	r2, #2
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d101      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e05b      	b.n	8001e7c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dc4:	4b30      	ldr	r3, [pc, #192]	; (8001e88 <HAL_RCC_ClockConfig+0x1a0>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2203      	movs	r2, #3
 8001dca:	4393      	bics	r3, r2
 8001dcc:	0019      	movs	r1, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	4b2d      	ldr	r3, [pc, #180]	; (8001e88 <HAL_RCC_ClockConfig+0x1a0>)
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dd8:	f7fe ff42 	bl	8000c60 <HAL_GetTick>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de0:	e009      	b.n	8001df6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de2:	f7fe ff3d 	bl	8000c60 <HAL_GetTick>
 8001de6:	0002      	movs	r2, r0
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	4a27      	ldr	r2, [pc, #156]	; (8001e8c <HAL_RCC_ClockConfig+0x1a4>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e042      	b.n	8001e7c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df6:	4b24      	ldr	r3, [pc, #144]	; (8001e88 <HAL_RCC_ClockConfig+0x1a0>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	220c      	movs	r2, #12
 8001dfc:	401a      	ands	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d1ec      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e08:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <HAL_RCC_ClockConfig+0x19c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	4013      	ands	r3, r2
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d211      	bcs.n	8001e3a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e16:	4b1b      	ldr	r3, [pc, #108]	; (8001e84 <HAL_RCC_ClockConfig+0x19c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	4393      	bics	r3, r2
 8001e1e:	0019      	movs	r1, r3
 8001e20:	4b18      	ldr	r3, [pc, #96]	; (8001e84 <HAL_RCC_ClockConfig+0x19c>)
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e28:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <HAL_RCC_ClockConfig+0x19c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	4013      	ands	r3, r2
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d001      	beq.n	8001e3a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e020      	b.n	8001e7c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2204      	movs	r2, #4
 8001e40:	4013      	ands	r3, r2
 8001e42:	d009      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e44:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <HAL_RCC_ClockConfig+0x1a0>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	4a11      	ldr	r2, [pc, #68]	; (8001e90 <HAL_RCC_ClockConfig+0x1a8>)
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	0019      	movs	r1, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68da      	ldr	r2, [r3, #12]
 8001e52:	4b0d      	ldr	r3, [pc, #52]	; (8001e88 <HAL_RCC_ClockConfig+0x1a0>)
 8001e54:	430a      	orrs	r2, r1
 8001e56:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e58:	f000 f820 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 8001e5c:	0001      	movs	r1, r0
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <HAL_RCC_ClockConfig+0x1a0>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	091b      	lsrs	r3, r3, #4
 8001e64:	220f      	movs	r2, #15
 8001e66:	4013      	ands	r3, r2
 8001e68:	4a0a      	ldr	r2, [pc, #40]	; (8001e94 <HAL_RCC_ClockConfig+0x1ac>)
 8001e6a:	5cd3      	ldrb	r3, [r2, r3]
 8001e6c:	000a      	movs	r2, r1
 8001e6e:	40da      	lsrs	r2, r3
 8001e70:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <HAL_RCC_ClockConfig+0x1b0>)
 8001e72:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e74:	2000      	movs	r0, #0
 8001e76:	f7fe fead 	bl	8000bd4 <HAL_InitTick>
  
  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	b004      	add	sp, #16
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40022000 	.word	0x40022000
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	00001388 	.word	0x00001388
 8001e90:	fffff8ff 	.word	0xfffff8ff
 8001e94:	08002fe4 	.word	0x08002fe4
 8001e98:	20000000 	.word	0x20000000

08001e9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e9c:	b590      	push	{r4, r7, lr}
 8001e9e:	b08f      	sub	sp, #60	; 0x3c
 8001ea0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001ea2:	2314      	movs	r3, #20
 8001ea4:	18fb      	adds	r3, r7, r3
 8001ea6:	4a37      	ldr	r2, [pc, #220]	; (8001f84 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001ea8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001eaa:	c313      	stmia	r3!, {r0, r1, r4}
 8001eac:	6812      	ldr	r2, [r2, #0]
 8001eae:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001eb0:	1d3b      	adds	r3, r7, #4
 8001eb2:	4a35      	ldr	r2, [pc, #212]	; (8001f88 <HAL_RCC_GetSysClockFreq+0xec>)
 8001eb4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001eb6:	c313      	stmia	r3!, {r0, r1, r4}
 8001eb8:	6812      	ldr	r2, [r2, #0]
 8001eba:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ec8:	2300      	movs	r3, #0
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001ed0:	4b2e      	ldr	r3, [pc, #184]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xf0>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed8:	220c      	movs	r2, #12
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b08      	cmp	r3, #8
 8001ede:	d006      	beq.n	8001eee <HAL_RCC_GetSysClockFreq+0x52>
 8001ee0:	2b0c      	cmp	r3, #12
 8001ee2:	d043      	beq.n	8001f6c <HAL_RCC_GetSysClockFreq+0xd0>
 8001ee4:	2b04      	cmp	r3, #4
 8001ee6:	d144      	bne.n	8001f72 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ee8:	4b29      	ldr	r3, [pc, #164]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001eea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001eec:	e044      	b.n	8001f78 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef0:	0c9b      	lsrs	r3, r3, #18
 8001ef2:	220f      	movs	r2, #15
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	2214      	movs	r2, #20
 8001ef8:	18ba      	adds	r2, r7, r2
 8001efa:	5cd3      	ldrb	r3, [r2, r3]
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001efe:	4b23      	ldr	r3, [pc, #140]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xf0>)
 8001f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f02:	220f      	movs	r2, #15
 8001f04:	4013      	ands	r3, r2
 8001f06:	1d3a      	adds	r2, r7, #4
 8001f08:	5cd3      	ldrb	r3, [r2, r3]
 8001f0a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001f0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f0e:	23c0      	movs	r3, #192	; 0xc0
 8001f10:	025b      	lsls	r3, r3, #9
 8001f12:	401a      	ands	r2, r3
 8001f14:	2380      	movs	r3, #128	; 0x80
 8001f16:	025b      	lsls	r3, r3, #9
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d109      	bne.n	8001f30 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f1e:	481c      	ldr	r0, [pc, #112]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001f20:	f7fe f8f2 	bl	8000108 <__udivsi3>
 8001f24:	0003      	movs	r3, r0
 8001f26:	001a      	movs	r2, r3
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	4353      	muls	r3, r2
 8001f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8001f2e:	e01a      	b.n	8001f66 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001f30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f32:	23c0      	movs	r3, #192	; 0xc0
 8001f34:	025b      	lsls	r3, r3, #9
 8001f36:	401a      	ands	r2, r3
 8001f38:	23c0      	movs	r3, #192	; 0xc0
 8001f3a:	025b      	lsls	r3, r3, #9
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d109      	bne.n	8001f54 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f42:	4814      	ldr	r0, [pc, #80]	; (8001f94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f44:	f7fe f8e0 	bl	8000108 <__udivsi3>
 8001f48:	0003      	movs	r3, r0
 8001f4a:	001a      	movs	r2, r3
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	4353      	muls	r3, r2
 8001f50:	637b      	str	r3, [r7, #52]	; 0x34
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f56:	4810      	ldr	r0, [pc, #64]	; (8001f98 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f58:	f7fe f8d6 	bl	8000108 <__udivsi3>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	001a      	movs	r2, r3
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	4353      	muls	r3, r2
 8001f64:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f68:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f6a:	e005      	b.n	8001f78 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001f6c:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f6e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f70:	e002      	b.n	8001f78 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f72:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f74:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f76:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	b00f      	add	sp, #60	; 0x3c
 8001f80:	bd90      	pop	{r4, r7, pc}
 8001f82:	46c0      	nop			; (mov r8, r8)
 8001f84:	08002fc4 	.word	0x08002fc4
 8001f88:	08002fd4 	.word	0x08002fd4
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	00f42400 	.word	0x00f42400
 8001f94:	02dc6c00 	.word	0x02dc6c00
 8001f98:	007a1200 	.word	0x007a1200

08001f9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e042      	b.n	8002034 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	223d      	movs	r2, #61	; 0x3d
 8001fb2:	5c9b      	ldrb	r3, [r3, r2]
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d107      	bne.n	8001fca <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	223c      	movs	r2, #60	; 0x3c
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	f7fe fcbf 	bl	8000948 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	223d      	movs	r2, #61	; 0x3d
 8001fce:	2102      	movs	r1, #2
 8001fd0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3304      	adds	r3, #4
 8001fda:	0019      	movs	r1, r3
 8001fdc:	0010      	movs	r0, r2
 8001fde:	f000 fc2f 	bl	8002840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2246      	movs	r2, #70	; 0x46
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	223e      	movs	r2, #62	; 0x3e
 8001fee:	2101      	movs	r1, #1
 8001ff0:	5499      	strb	r1, [r3, r2]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	223f      	movs	r2, #63	; 0x3f
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	5499      	strb	r1, [r3, r2]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2240      	movs	r2, #64	; 0x40
 8001ffe:	2101      	movs	r1, #1
 8002000:	5499      	strb	r1, [r3, r2]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2241      	movs	r2, #65	; 0x41
 8002006:	2101      	movs	r1, #1
 8002008:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2242      	movs	r2, #66	; 0x42
 800200e:	2101      	movs	r1, #1
 8002010:	5499      	strb	r1, [r3, r2]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2243      	movs	r2, #67	; 0x43
 8002016:	2101      	movs	r1, #1
 8002018:	5499      	strb	r1, [r3, r2]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2244      	movs	r2, #68	; 0x44
 800201e:	2101      	movs	r1, #1
 8002020:	5499      	strb	r1, [r3, r2]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2245      	movs	r2, #69	; 0x45
 8002026:	2101      	movs	r1, #1
 8002028:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	223d      	movs	r2, #61	; 0x3d
 800202e:	2101      	movs	r1, #1
 8002030:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	0018      	movs	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	b002      	add	sp, #8
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
 8002048:	001a      	movs	r2, r3
 800204a:	1cbb      	adds	r3, r7, #2
 800204c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d108      	bne.n	8002066 <HAL_TIM_PWM_Start_DMA+0x2a>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	223e      	movs	r2, #62	; 0x3e
 8002058:	5c9b      	ldrb	r3, [r3, r2]
 800205a:	b2db      	uxtb	r3, r3
 800205c:	3b02      	subs	r3, #2
 800205e:	425a      	negs	r2, r3
 8002060:	4153      	adcs	r3, r2
 8002062:	b2db      	uxtb	r3, r3
 8002064:	e01f      	b.n	80020a6 <HAL_TIM_PWM_Start_DMA+0x6a>
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	2b04      	cmp	r3, #4
 800206a:	d108      	bne.n	800207e <HAL_TIM_PWM_Start_DMA+0x42>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	223f      	movs	r2, #63	; 0x3f
 8002070:	5c9b      	ldrb	r3, [r3, r2]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	3b02      	subs	r3, #2
 8002076:	425a      	negs	r2, r3
 8002078:	4153      	adcs	r3, r2
 800207a:	b2db      	uxtb	r3, r3
 800207c:	e013      	b.n	80020a6 <HAL_TIM_PWM_Start_DMA+0x6a>
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	2b08      	cmp	r3, #8
 8002082:	d108      	bne.n	8002096 <HAL_TIM_PWM_Start_DMA+0x5a>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2240      	movs	r2, #64	; 0x40
 8002088:	5c9b      	ldrb	r3, [r3, r2]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	3b02      	subs	r3, #2
 800208e:	425a      	negs	r2, r3
 8002090:	4153      	adcs	r3, r2
 8002092:	b2db      	uxtb	r3, r3
 8002094:	e007      	b.n	80020a6 <HAL_TIM_PWM_Start_DMA+0x6a>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2241      	movs	r2, #65	; 0x41
 800209a:	5c9b      	ldrb	r3, [r3, r2]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	3b02      	subs	r3, #2
 80020a0:	425a      	negs	r2, r3
 80020a2:	4153      	adcs	r3, r2
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_TIM_PWM_Start_DMA+0x72>
  {
    return HAL_BUSY;
 80020aa:	2302      	movs	r3, #2
 80020ac:	e14f      	b.n	800234e <HAL_TIM_PWM_Start_DMA+0x312>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d108      	bne.n	80020c6 <HAL_TIM_PWM_Start_DMA+0x8a>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	223e      	movs	r2, #62	; 0x3e
 80020b8:	5c9b      	ldrb	r3, [r3, r2]
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	3b01      	subs	r3, #1
 80020be:	425a      	negs	r2, r3
 80020c0:	4153      	adcs	r3, r2
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	e01f      	b.n	8002106 <HAL_TIM_PWM_Start_DMA+0xca>
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d108      	bne.n	80020de <HAL_TIM_PWM_Start_DMA+0xa2>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	223f      	movs	r2, #63	; 0x3f
 80020d0:	5c9b      	ldrb	r3, [r3, r2]
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	3b01      	subs	r3, #1
 80020d6:	425a      	negs	r2, r3
 80020d8:	4153      	adcs	r3, r2
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	e013      	b.n	8002106 <HAL_TIM_PWM_Start_DMA+0xca>
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	d108      	bne.n	80020f6 <HAL_TIM_PWM_Start_DMA+0xba>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2240      	movs	r2, #64	; 0x40
 80020e8:	5c9b      	ldrb	r3, [r3, r2]
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	3b01      	subs	r3, #1
 80020ee:	425a      	negs	r2, r3
 80020f0:	4153      	adcs	r3, r2
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	e007      	b.n	8002106 <HAL_TIM_PWM_Start_DMA+0xca>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2241      	movs	r2, #65	; 0x41
 80020fa:	5c9b      	ldrb	r3, [r3, r2]
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	3b01      	subs	r3, #1
 8002100:	425a      	negs	r2, r3
 8002102:	4153      	adcs	r3, r2
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d025      	beq.n	8002156 <HAL_TIM_PWM_Start_DMA+0x11a>
  {
    if ((pData == NULL) && (Length > 0U))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d105      	bne.n	800211c <HAL_TIM_PWM_Start_DMA+0xe0>
 8002110:	1cbb      	adds	r3, r7, #2
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <HAL_TIM_PWM_Start_DMA+0xe0>
    {
      return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e118      	b.n	800234e <HAL_TIM_PWM_Start_DMA+0x312>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d104      	bne.n	800212c <HAL_TIM_PWM_Start_DMA+0xf0>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	223e      	movs	r2, #62	; 0x3e
 8002126:	2102      	movs	r1, #2
 8002128:	5499      	strb	r1, [r3, r2]
 800212a:	e016      	b.n	800215a <HAL_TIM_PWM_Start_DMA+0x11e>
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2b04      	cmp	r3, #4
 8002130:	d104      	bne.n	800213c <HAL_TIM_PWM_Start_DMA+0x100>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	223f      	movs	r2, #63	; 0x3f
 8002136:	2102      	movs	r1, #2
 8002138:	5499      	strb	r1, [r3, r2]
 800213a:	e00e      	b.n	800215a <HAL_TIM_PWM_Start_DMA+0x11e>
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2b08      	cmp	r3, #8
 8002140:	d104      	bne.n	800214c <HAL_TIM_PWM_Start_DMA+0x110>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2240      	movs	r2, #64	; 0x40
 8002146:	2102      	movs	r1, #2
 8002148:	5499      	strb	r1, [r3, r2]
 800214a:	e006      	b.n	800215a <HAL_TIM_PWM_Start_DMA+0x11e>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2241      	movs	r2, #65	; 0x41
 8002150:	2102      	movs	r1, #2
 8002152:	5499      	strb	r1, [r3, r2]
 8002154:	e001      	b.n	800215a <HAL_TIM_PWM_Start_DMA+0x11e>
    }
  }
  else
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e0f9      	b.n	800234e <HAL_TIM_PWM_Start_DMA+0x312>
  }

  switch (Channel)
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2b04      	cmp	r3, #4
 800215e:	d02e      	beq.n	80021be <HAL_TIM_PWM_Start_DMA+0x182>
 8002160:	d802      	bhi.n	8002168 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002162:	2b00      	cmp	r3, #0
 8002164:	d006      	beq.n	8002174 <HAL_TIM_PWM_Start_DMA+0x138>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
      break;
    }

    default:
      break;
 8002166:	e099      	b.n	800229c <HAL_TIM_PWM_Start_DMA+0x260>
  switch (Channel)
 8002168:	2b08      	cmp	r3, #8
 800216a:	d04d      	beq.n	8002208 <HAL_TIM_PWM_Start_DMA+0x1cc>
 800216c:	2b0c      	cmp	r3, #12
 800216e:	d100      	bne.n	8002172 <HAL_TIM_PWM_Start_DMA+0x136>
 8002170:	e06f      	b.n	8002252 <HAL_TIM_PWM_Start_DMA+0x216>
      break;
 8002172:	e093      	b.n	800229c <HAL_TIM_PWM_Start_DMA+0x260>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002178:	4a77      	ldr	r2, [pc, #476]	; (8002358 <HAL_TIM_PWM_Start_DMA+0x31c>)
 800217a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	4a76      	ldr	r2, [pc, #472]	; (800235c <HAL_TIM_PWM_Start_DMA+0x320>)
 8002182:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	4a75      	ldr	r2, [pc, #468]	; (8002360 <HAL_TIM_PWM_Start_DMA+0x324>)
 800218a:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	3334      	adds	r3, #52	; 0x34
 8002198:	001a      	movs	r2, r3
 800219a:	1cbb      	adds	r3, r7, #2
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	f7fe feb1 	bl	8000f04 <HAL_DMA_Start_IT>
 80021a2:	1e03      	subs	r3, r0, #0
 80021a4:	d001      	beq.n	80021aa <HAL_TIM_PWM_Start_DMA+0x16e>
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e0d1      	b.n	800234e <HAL_TIM_PWM_Start_DMA+0x312>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68da      	ldr	r2, [r3, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2180      	movs	r1, #128	; 0x80
 80021b6:	0089      	lsls	r1, r1, #2
 80021b8:	430a      	orrs	r2, r1
 80021ba:	60da      	str	r2, [r3, #12]
      break;
 80021bc:	e06e      	b.n	800229c <HAL_TIM_PWM_Start_DMA+0x260>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c2:	4a65      	ldr	r2, [pc, #404]	; (8002358 <HAL_TIM_PWM_Start_DMA+0x31c>)
 80021c4:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ca:	4a64      	ldr	r2, [pc, #400]	; (800235c <HAL_TIM_PWM_Start_DMA+0x320>)
 80021cc:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d2:	4a63      	ldr	r2, [pc, #396]	; (8002360 <HAL_TIM_PWM_Start_DMA+0x324>)
 80021d4:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	3338      	adds	r3, #56	; 0x38
 80021e2:	001a      	movs	r2, r3
 80021e4:	1cbb      	adds	r3, r7, #2
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	f7fe fe8c 	bl	8000f04 <HAL_DMA_Start_IT>
 80021ec:	1e03      	subs	r3, r0, #0
 80021ee:	d001      	beq.n	80021f4 <HAL_TIM_PWM_Start_DMA+0x1b8>
        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0ac      	b.n	800234e <HAL_TIM_PWM_Start_DMA+0x312>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2180      	movs	r1, #128	; 0x80
 8002200:	00c9      	lsls	r1, r1, #3
 8002202:	430a      	orrs	r2, r1
 8002204:	60da      	str	r2, [r3, #12]
      break;
 8002206:	e049      	b.n	800229c <HAL_TIM_PWM_Start_DMA+0x260>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220c:	4a52      	ldr	r2, [pc, #328]	; (8002358 <HAL_TIM_PWM_Start_DMA+0x31c>)
 800220e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002214:	4a51      	ldr	r2, [pc, #324]	; (800235c <HAL_TIM_PWM_Start_DMA+0x320>)
 8002216:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221c:	4a50      	ldr	r2, [pc, #320]	; (8002360 <HAL_TIM_PWM_Start_DMA+0x324>)
 800221e:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	333c      	adds	r3, #60	; 0x3c
 800222c:	001a      	movs	r2, r3
 800222e:	1cbb      	adds	r3, r7, #2
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	f7fe fe67 	bl	8000f04 <HAL_DMA_Start_IT>
 8002236:	1e03      	subs	r3, r0, #0
 8002238:	d001      	beq.n	800223e <HAL_TIM_PWM_Start_DMA+0x202>
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e087      	b.n	800234e <HAL_TIM_PWM_Start_DMA+0x312>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68da      	ldr	r2, [r3, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2180      	movs	r1, #128	; 0x80
 800224a:	0109      	lsls	r1, r1, #4
 800224c:	430a      	orrs	r2, r1
 800224e:	60da      	str	r2, [r3, #12]
      break;
 8002250:	e024      	b.n	800229c <HAL_TIM_PWM_Start_DMA+0x260>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a40      	ldr	r2, [pc, #256]	; (8002358 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8002258:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	4a3f      	ldr	r2, [pc, #252]	; (800235c <HAL_TIM_PWM_Start_DMA+0x320>)
 8002260:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	4a3e      	ldr	r2, [pc, #248]	; (8002360 <HAL_TIM_PWM_Start_DMA+0x324>)
 8002268:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	3340      	adds	r3, #64	; 0x40
 8002276:	001a      	movs	r2, r3
 8002278:	1cbb      	adds	r3, r7, #2
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	f7fe fe42 	bl	8000f04 <HAL_DMA_Start_IT>
 8002280:	1e03      	subs	r3, r0, #0
 8002282:	d001      	beq.n	8002288 <HAL_TIM_PWM_Start_DMA+0x24c>
        return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e062      	b.n	800234e <HAL_TIM_PWM_Start_DMA+0x312>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2180      	movs	r1, #128	; 0x80
 8002294:	0149      	lsls	r1, r1, #5
 8002296:	430a      	orrs	r2, r1
 8002298:	60da      	str	r2, [r3, #12]
      break;
 800229a:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68b9      	ldr	r1, [r7, #8]
 80022a2:	2201      	movs	r2, #1
 80022a4:	0018      	movs	r0, r3
 80022a6:	f000 fd47 	bl	8002d38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a2d      	ldr	r2, [pc, #180]	; (8002364 <HAL_TIM_PWM_Start_DMA+0x328>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d00e      	beq.n	80022d2 <HAL_TIM_PWM_Start_DMA+0x296>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a2b      	ldr	r2, [pc, #172]	; (8002368 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d009      	beq.n	80022d2 <HAL_TIM_PWM_Start_DMA+0x296>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a2a      	ldr	r2, [pc, #168]	; (800236c <HAL_TIM_PWM_Start_DMA+0x330>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d004      	beq.n	80022d2 <HAL_TIM_PWM_Start_DMA+0x296>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a28      	ldr	r2, [pc, #160]	; (8002370 <HAL_TIM_PWM_Start_DMA+0x334>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d101      	bne.n	80022d6 <HAL_TIM_PWM_Start_DMA+0x29a>
 80022d2:	2301      	movs	r3, #1
 80022d4:	e000      	b.n	80022d8 <HAL_TIM_PWM_Start_DMA+0x29c>
 80022d6:	2300      	movs	r3, #0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d008      	beq.n	80022ee <HAL_TIM_PWM_Start_DMA+0x2b2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2180      	movs	r1, #128	; 0x80
 80022e8:	0209      	lsls	r1, r1, #8
 80022ea:	430a      	orrs	r2, r1
 80022ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a1c      	ldr	r2, [pc, #112]	; (8002364 <HAL_TIM_PWM_Start_DMA+0x328>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d00f      	beq.n	8002318 <HAL_TIM_PWM_Start_DMA+0x2dc>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	2380      	movs	r3, #128	; 0x80
 80022fe:	05db      	lsls	r3, r3, #23
 8002300:	429a      	cmp	r2, r3
 8002302:	d009      	beq.n	8002318 <HAL_TIM_PWM_Start_DMA+0x2dc>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a1a      	ldr	r2, [pc, #104]	; (8002374 <HAL_TIM_PWM_Start_DMA+0x338>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d004      	beq.n	8002318 <HAL_TIM_PWM_Start_DMA+0x2dc>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a15      	ldr	r2, [pc, #84]	; (8002368 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d111      	bne.n	800233c <HAL_TIM_PWM_Start_DMA+0x300>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2207      	movs	r2, #7
 8002320:	4013      	ands	r3, r2
 8002322:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	2b06      	cmp	r3, #6
 8002328:	d010      	beq.n	800234c <HAL_TIM_PWM_Start_DMA+0x310>
    {
      __HAL_TIM_ENABLE(htim);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2101      	movs	r1, #1
 8002336:	430a      	orrs	r2, r1
 8002338:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800233a:	e007      	b.n	800234c <HAL_TIM_PWM_Start_DMA+0x310>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2101      	movs	r1, #1
 8002348:	430a      	orrs	r2, r1
 800234a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	0018      	movs	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	b006      	add	sp, #24
 8002354:	bd80      	pop	{r7, pc}
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	0800272d 	.word	0x0800272d
 800235c:	080027d7 	.word	0x080027d7
 8002360:	08002699 	.word	0x08002699
 8002364:	40012c00 	.word	0x40012c00
 8002368:	40014000 	.word	0x40014000
 800236c:	40014400 	.word	0x40014400
 8002370:	40014800 	.word	0x40014800
 8002374:	40000400 	.word	0x40000400

08002378 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2b04      	cmp	r3, #4
 8002386:	d016      	beq.n	80023b6 <HAL_TIM_PWM_Stop_DMA+0x3e>
 8002388:	d802      	bhi.n	8002390 <HAL_TIM_PWM_Stop_DMA+0x18>
 800238a:	2b00      	cmp	r3, #0
 800238c:	d005      	beq.n	800239a <HAL_TIM_PWM_Stop_DMA+0x22>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
      break;
    }

    default:
      break;
 800238e:	e03c      	b.n	800240a <HAL_TIM_PWM_Stop_DMA+0x92>
  switch (Channel)
 8002390:	2b08      	cmp	r3, #8
 8002392:	d01e      	beq.n	80023d2 <HAL_TIM_PWM_Stop_DMA+0x5a>
 8002394:	2b0c      	cmp	r3, #12
 8002396:	d02a      	beq.n	80023ee <HAL_TIM_PWM_Stop_DMA+0x76>
      break;
 8002398:	e037      	b.n	800240a <HAL_TIM_PWM_Stop_DMA+0x92>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68da      	ldr	r2, [r3, #12]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	494d      	ldr	r1, [pc, #308]	; (80024dc <HAL_TIM_PWM_Stop_DMA+0x164>)
 80023a6:	400a      	ands	r2, r1
 80023a8:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	0018      	movs	r0, r3
 80023b0:	f7fe fe0e 	bl	8000fd0 <HAL_DMA_Abort_IT>
      break;
 80023b4:	e029      	b.n	800240a <HAL_TIM_PWM_Stop_DMA+0x92>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4947      	ldr	r1, [pc, #284]	; (80024e0 <HAL_TIM_PWM_Stop_DMA+0x168>)
 80023c2:	400a      	ands	r2, r1
 80023c4:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ca:	0018      	movs	r0, r3
 80023cc:	f7fe fe00 	bl	8000fd0 <HAL_DMA_Abort_IT>
      break;
 80023d0:	e01b      	b.n	800240a <HAL_TIM_PWM_Stop_DMA+0x92>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68da      	ldr	r2, [r3, #12]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4941      	ldr	r1, [pc, #260]	; (80024e4 <HAL_TIM_PWM_Stop_DMA+0x16c>)
 80023de:	400a      	ands	r2, r1
 80023e0:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e6:	0018      	movs	r0, r3
 80023e8:	f7fe fdf2 	bl	8000fd0 <HAL_DMA_Abort_IT>
      break;
 80023ec:	e00d      	b.n	800240a <HAL_TIM_PWM_Stop_DMA+0x92>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68da      	ldr	r2, [r3, #12]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	493b      	ldr	r1, [pc, #236]	; (80024e8 <HAL_TIM_PWM_Stop_DMA+0x170>)
 80023fa:	400a      	ands	r2, r1
 80023fc:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	0018      	movs	r0, r3
 8002404:	f7fe fde4 	bl	8000fd0 <HAL_DMA_Abort_IT>
      break;
 8002408:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6839      	ldr	r1, [r7, #0]
 8002410:	2200      	movs	r2, #0
 8002412:	0018      	movs	r0, r3
 8002414:	f000 fc90 	bl	8002d38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a33      	ldr	r2, [pc, #204]	; (80024ec <HAL_TIM_PWM_Stop_DMA+0x174>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d00e      	beq.n	8002440 <HAL_TIM_PWM_Stop_DMA+0xc8>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a32      	ldr	r2, [pc, #200]	; (80024f0 <HAL_TIM_PWM_Stop_DMA+0x178>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d009      	beq.n	8002440 <HAL_TIM_PWM_Stop_DMA+0xc8>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a30      	ldr	r2, [pc, #192]	; (80024f4 <HAL_TIM_PWM_Stop_DMA+0x17c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d004      	beq.n	8002440 <HAL_TIM_PWM_Stop_DMA+0xc8>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a2f      	ldr	r2, [pc, #188]	; (80024f8 <HAL_TIM_PWM_Stop_DMA+0x180>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d101      	bne.n	8002444 <HAL_TIM_PWM_Stop_DMA+0xcc>
 8002440:	2301      	movs	r3, #1
 8002442:	e000      	b.n	8002446 <HAL_TIM_PWM_Stop_DMA+0xce>
 8002444:	2300      	movs	r3, #0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d013      	beq.n	8002472 <HAL_TIM_PWM_Stop_DMA+0xfa>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	4a2a      	ldr	r2, [pc, #168]	; (80024fc <HAL_TIM_PWM_Stop_DMA+0x184>)
 8002452:	4013      	ands	r3, r2
 8002454:	d10d      	bne.n	8002472 <HAL_TIM_PWM_Stop_DMA+0xfa>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	4a28      	ldr	r2, [pc, #160]	; (8002500 <HAL_TIM_PWM_Stop_DMA+0x188>)
 800245e:	4013      	ands	r3, r2
 8002460:	d107      	bne.n	8002472 <HAL_TIM_PWM_Stop_DMA+0xfa>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4925      	ldr	r1, [pc, #148]	; (8002504 <HAL_TIM_PWM_Stop_DMA+0x18c>)
 800246e:	400a      	ands	r2, r1
 8002470:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	4a20      	ldr	r2, [pc, #128]	; (80024fc <HAL_TIM_PWM_Stop_DMA+0x184>)
 800247a:	4013      	ands	r3, r2
 800247c:	d10d      	bne.n	800249a <HAL_TIM_PWM_Stop_DMA+0x122>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	4a1e      	ldr	r2, [pc, #120]	; (8002500 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8002486:	4013      	ands	r3, r2
 8002488:	d107      	bne.n	800249a <HAL_TIM_PWM_Stop_DMA+0x122>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2101      	movs	r1, #1
 8002496:	438a      	bics	r2, r1
 8002498:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d104      	bne.n	80024aa <HAL_TIM_PWM_Stop_DMA+0x132>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	223e      	movs	r2, #62	; 0x3e
 80024a4:	2101      	movs	r1, #1
 80024a6:	5499      	strb	r1, [r3, r2]
 80024a8:	e013      	b.n	80024d2 <HAL_TIM_PWM_Stop_DMA+0x15a>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	2b04      	cmp	r3, #4
 80024ae:	d104      	bne.n	80024ba <HAL_TIM_PWM_Stop_DMA+0x142>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	223f      	movs	r2, #63	; 0x3f
 80024b4:	2101      	movs	r1, #1
 80024b6:	5499      	strb	r1, [r3, r2]
 80024b8:	e00b      	b.n	80024d2 <HAL_TIM_PWM_Stop_DMA+0x15a>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	2b08      	cmp	r3, #8
 80024be:	d104      	bne.n	80024ca <HAL_TIM_PWM_Stop_DMA+0x152>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2240      	movs	r2, #64	; 0x40
 80024c4:	2101      	movs	r1, #1
 80024c6:	5499      	strb	r1, [r3, r2]
 80024c8:	e003      	b.n	80024d2 <HAL_TIM_PWM_Stop_DMA+0x15a>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2241      	movs	r2, #65	; 0x41
 80024ce:	2101      	movs	r1, #1
 80024d0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	0018      	movs	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b002      	add	sp, #8
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	fffffdff 	.word	0xfffffdff
 80024e0:	fffffbff 	.word	0xfffffbff
 80024e4:	fffff7ff 	.word	0xfffff7ff
 80024e8:	ffffefff 	.word	0xffffefff
 80024ec:	40012c00 	.word	0x40012c00
 80024f0:	40014000 	.word	0x40014000
 80024f4:	40014400 	.word	0x40014400
 80024f8:	40014800 	.word	0x40014800
 80024fc:	00001111 	.word	0x00001111
 8002500:	00000444 	.word	0x00000444
 8002504:	ffff7fff 	.word	0xffff7fff

08002508 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	223c      	movs	r2, #60	; 0x3c
 8002518:	5c9b      	ldrb	r3, [r3, r2]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d101      	bne.n	8002522 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800251e:	2302      	movs	r3, #2
 8002520:	e09c      	b.n	800265c <HAL_TIM_PWM_ConfigChannel+0x154>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	223c      	movs	r2, #60	; 0x3c
 8002526:	2101      	movs	r1, #1
 8002528:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b04      	cmp	r3, #4
 800252e:	d029      	beq.n	8002584 <HAL_TIM_PWM_ConfigChannel+0x7c>
 8002530:	d802      	bhi.n	8002538 <HAL_TIM_PWM_ConfigChannel+0x30>
 8002532:	2b00      	cmp	r3, #0
 8002534:	d005      	beq.n	8002542 <HAL_TIM_PWM_ConfigChannel+0x3a>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8002536:	e08c      	b.n	8002652 <HAL_TIM_PWM_ConfigChannel+0x14a>
  switch (Channel)
 8002538:	2b08      	cmp	r3, #8
 800253a:	d046      	beq.n	80025ca <HAL_TIM_PWM_ConfigChannel+0xc2>
 800253c:	2b0c      	cmp	r3, #12
 800253e:	d065      	beq.n	800260c <HAL_TIM_PWM_ConfigChannel+0x104>
      break;
 8002540:	e087      	b.n	8002652 <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	0011      	movs	r1, r2
 800254a:	0018      	movs	r0, r3
 800254c:	f000 f9f8 	bl	8002940 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	699a      	ldr	r2, [r3, #24]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2108      	movs	r1, #8
 800255c:	430a      	orrs	r2, r1
 800255e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	699a      	ldr	r2, [r3, #24]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2104      	movs	r1, #4
 800256c:	438a      	bics	r2, r1
 800256e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6999      	ldr	r1, [r3, #24]
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	691a      	ldr	r2, [r3, #16]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	619a      	str	r2, [r3, #24]
      break;
 8002582:	e066      	b.n	8002652 <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68ba      	ldr	r2, [r7, #8]
 800258a:	0011      	movs	r1, r2
 800258c:	0018      	movs	r0, r3
 800258e:	f000 fa5f 	bl	8002a50 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	699a      	ldr	r2, [r3, #24]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2180      	movs	r1, #128	; 0x80
 800259e:	0109      	lsls	r1, r1, #4
 80025a0:	430a      	orrs	r2, r1
 80025a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	699a      	ldr	r2, [r3, #24]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	492d      	ldr	r1, [pc, #180]	; (8002664 <HAL_TIM_PWM_ConfigChannel+0x15c>)
 80025b0:	400a      	ands	r2, r1
 80025b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6999      	ldr	r1, [r3, #24]
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	021a      	lsls	r2, r3, #8
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	619a      	str	r2, [r3, #24]
      break;
 80025c8:	e043      	b.n	8002652 <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	0011      	movs	r1, r2
 80025d2:	0018      	movs	r0, r3
 80025d4:	f000 fac0 	bl	8002b58 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	69da      	ldr	r2, [r3, #28]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2108      	movs	r1, #8
 80025e4:	430a      	orrs	r2, r1
 80025e6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	69da      	ldr	r2, [r3, #28]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2104      	movs	r1, #4
 80025f4:	438a      	bics	r2, r1
 80025f6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	69d9      	ldr	r1, [r3, #28]
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	691a      	ldr	r2, [r3, #16]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	61da      	str	r2, [r3, #28]
      break;
 800260a:	e022      	b.n	8002652 <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68ba      	ldr	r2, [r7, #8]
 8002612:	0011      	movs	r1, r2
 8002614:	0018      	movs	r0, r3
 8002616:	f000 fb25 	bl	8002c64 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	69da      	ldr	r2, [r3, #28]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2180      	movs	r1, #128	; 0x80
 8002626:	0109      	lsls	r1, r1, #4
 8002628:	430a      	orrs	r2, r1
 800262a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	69da      	ldr	r2, [r3, #28]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	490b      	ldr	r1, [pc, #44]	; (8002664 <HAL_TIM_PWM_ConfigChannel+0x15c>)
 8002638:	400a      	ands	r2, r1
 800263a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	69d9      	ldr	r1, [r3, #28]
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	021a      	lsls	r2, r3, #8
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	61da      	str	r2, [r3, #28]
      break;
 8002650:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	223c      	movs	r2, #60	; 0x3c
 8002656:	2100      	movs	r1, #0
 8002658:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	0018      	movs	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	b004      	add	sp, #16
 8002662:	bd80      	pop	{r7, pc}
 8002664:	fffffbff 	.word	0xfffffbff

08002668 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002670:	46c0      	nop			; (mov r8, r8)
 8002672:	46bd      	mov	sp, r7
 8002674:	b002      	add	sp, #8
 8002676:	bd80      	pop	{r7, pc}

08002678 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002680:	46c0      	nop			; (mov r8, r8)
 8002682:	46bd      	mov	sp, r7
 8002684:	b002      	add	sp, #8
 8002686:	bd80      	pop	{r7, pc}

08002688 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002690:	46c0      	nop			; (mov r8, r8)
 8002692:	46bd      	mov	sp, r7
 8002694:	b002      	add	sp, #8
 8002696:	bd80      	pop	{r7, pc}

08002698 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d107      	bne.n	80026c0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2201      	movs	r2, #1
 80026b4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	223e      	movs	r2, #62	; 0x3e
 80026ba:	2101      	movs	r1, #1
 80026bc:	5499      	strb	r1, [r3, r2]
 80026be:	e02a      	b.n	8002716 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d107      	bne.n	80026da <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2202      	movs	r2, #2
 80026ce:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	223f      	movs	r2, #63	; 0x3f
 80026d4:	2101      	movs	r1, #1
 80026d6:	5499      	strb	r1, [r3, r2]
 80026d8:	e01d      	b.n	8002716 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d107      	bne.n	80026f4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2204      	movs	r2, #4
 80026e8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2240      	movs	r2, #64	; 0x40
 80026ee:	2101      	movs	r1, #1
 80026f0:	5499      	strb	r1, [r3, r2]
 80026f2:	e010      	b.n	8002716 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d107      	bne.n	800270e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2208      	movs	r2, #8
 8002702:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2241      	movs	r2, #65	; 0x41
 8002708:	2101      	movs	r1, #1
 800270a:	5499      	strb	r1, [r3, r2]
 800270c:	e003      	b.n	8002716 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	223d      	movs	r2, #61	; 0x3d
 8002712:	2101      	movs	r1, #1
 8002714:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	0018      	movs	r0, r3
 800271a:	f7ff ffb5 	bl	8002688 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	771a      	strb	r2, [r3, #28]
}
 8002724:	46c0      	nop			; (mov r8, r8)
 8002726:	46bd      	mov	sp, r7
 8002728:	b004      	add	sp, #16
 800272a:	bd80      	pop	{r7, pc}

0800272c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	429a      	cmp	r2, r3
 8002742:	d10b      	bne.n	800275c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2201      	movs	r2, #1
 8002748:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d136      	bne.n	80027c0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	223e      	movs	r2, #62	; 0x3e
 8002756:	2101      	movs	r1, #1
 8002758:	5499      	strb	r1, [r3, r2]
 800275a:	e031      	b.n	80027c0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	429a      	cmp	r2, r3
 8002764:	d10b      	bne.n	800277e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2202      	movs	r2, #2
 800276a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d125      	bne.n	80027c0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	223f      	movs	r2, #63	; 0x3f
 8002778:	2101      	movs	r1, #1
 800277a:	5499      	strb	r1, [r3, r2]
 800277c:	e020      	b.n	80027c0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	429a      	cmp	r2, r3
 8002786:	d10b      	bne.n	80027a0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2204      	movs	r2, #4
 800278c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d114      	bne.n	80027c0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2240      	movs	r2, #64	; 0x40
 800279a:	2101      	movs	r1, #1
 800279c:	5499      	strb	r1, [r3, r2]
 800279e:	e00f      	b.n	80027c0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d10a      	bne.n	80027c0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2208      	movs	r2, #8
 80027ae:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d103      	bne.n	80027c0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2241      	movs	r2, #65	; 0x41
 80027bc:	2101      	movs	r1, #1
 80027be:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	0018      	movs	r0, r3
 80027c4:	f7ff ff50 	bl	8002668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	771a      	strb	r2, [r3, #28]
}
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	46bd      	mov	sp, r7
 80027d2:	b004      	add	sp, #16
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b084      	sub	sp, #16
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d103      	bne.n	80027f6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2201      	movs	r2, #1
 80027f2:	771a      	strb	r2, [r3, #28]
 80027f4:	e019      	b.n	800282a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d103      	bne.n	8002808 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2202      	movs	r2, #2
 8002804:	771a      	strb	r2, [r3, #28]
 8002806:	e010      	b.n	800282a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	429a      	cmp	r2, r3
 8002810:	d103      	bne.n	800281a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2204      	movs	r2, #4
 8002816:	771a      	strb	r2, [r3, #28]
 8002818:	e007      	b.n	800282a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	429a      	cmp	r2, r3
 8002822:	d102      	bne.n	800282a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2208      	movs	r2, #8
 8002828:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	0018      	movs	r0, r3
 800282e:	f7ff ff23 	bl	8002678 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	771a      	strb	r2, [r3, #28]
}
 8002838:	46c0      	nop			; (mov r8, r8)
 800283a:	46bd      	mov	sp, r7
 800283c:	b004      	add	sp, #16
 800283e:	bd80      	pop	{r7, pc}

08002840 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a34      	ldr	r2, [pc, #208]	; (8002924 <TIM_Base_SetConfig+0xe4>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d008      	beq.n	800286a <TIM_Base_SetConfig+0x2a>
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	2380      	movs	r3, #128	; 0x80
 800285c:	05db      	lsls	r3, r3, #23
 800285e:	429a      	cmp	r2, r3
 8002860:	d003      	beq.n	800286a <TIM_Base_SetConfig+0x2a>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a30      	ldr	r2, [pc, #192]	; (8002928 <TIM_Base_SetConfig+0xe8>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d108      	bne.n	800287c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2270      	movs	r2, #112	; 0x70
 800286e:	4393      	bics	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	4313      	orrs	r3, r2
 800287a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a29      	ldr	r2, [pc, #164]	; (8002924 <TIM_Base_SetConfig+0xe4>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d018      	beq.n	80028b6 <TIM_Base_SetConfig+0x76>
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	2380      	movs	r3, #128	; 0x80
 8002888:	05db      	lsls	r3, r3, #23
 800288a:	429a      	cmp	r2, r3
 800288c:	d013      	beq.n	80028b6 <TIM_Base_SetConfig+0x76>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a25      	ldr	r2, [pc, #148]	; (8002928 <TIM_Base_SetConfig+0xe8>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d00f      	beq.n	80028b6 <TIM_Base_SetConfig+0x76>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a24      	ldr	r2, [pc, #144]	; (800292c <TIM_Base_SetConfig+0xec>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d00b      	beq.n	80028b6 <TIM_Base_SetConfig+0x76>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a23      	ldr	r2, [pc, #140]	; (8002930 <TIM_Base_SetConfig+0xf0>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d007      	beq.n	80028b6 <TIM_Base_SetConfig+0x76>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a22      	ldr	r2, [pc, #136]	; (8002934 <TIM_Base_SetConfig+0xf4>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d003      	beq.n	80028b6 <TIM_Base_SetConfig+0x76>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a21      	ldr	r2, [pc, #132]	; (8002938 <TIM_Base_SetConfig+0xf8>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d108      	bne.n	80028c8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	4a20      	ldr	r2, [pc, #128]	; (800293c <TIM_Base_SetConfig+0xfc>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2280      	movs	r2, #128	; 0x80
 80028cc:	4393      	bics	r3, r2
 80028ce:	001a      	movs	r2, r3
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a0c      	ldr	r2, [pc, #48]	; (8002924 <TIM_Base_SetConfig+0xe4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d00b      	beq.n	800290e <TIM_Base_SetConfig+0xce>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a0d      	ldr	r2, [pc, #52]	; (8002930 <TIM_Base_SetConfig+0xf0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d007      	beq.n	800290e <TIM_Base_SetConfig+0xce>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a0c      	ldr	r2, [pc, #48]	; (8002934 <TIM_Base_SetConfig+0xf4>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d003      	beq.n	800290e <TIM_Base_SetConfig+0xce>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a0b      	ldr	r2, [pc, #44]	; (8002938 <TIM_Base_SetConfig+0xf8>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d103      	bne.n	8002916 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	691a      	ldr	r2, [r3, #16]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	615a      	str	r2, [r3, #20]
}
 800291c:	46c0      	nop			; (mov r8, r8)
 800291e:	46bd      	mov	sp, r7
 8002920:	b004      	add	sp, #16
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40012c00 	.word	0x40012c00
 8002928:	40000400 	.word	0x40000400
 800292c:	40002000 	.word	0x40002000
 8002930:	40014000 	.word	0x40014000
 8002934:	40014400 	.word	0x40014400
 8002938:	40014800 	.word	0x40014800
 800293c:	fffffcff 	.word	0xfffffcff

08002940 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	2201      	movs	r2, #1
 8002950:	4393      	bics	r3, r2
 8002952:	001a      	movs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2270      	movs	r2, #112	; 0x70
 800296e:	4393      	bics	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2203      	movs	r2, #3
 8002976:	4393      	bics	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4313      	orrs	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	2202      	movs	r2, #2
 8002988:	4393      	bics	r3, r2
 800298a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	4313      	orrs	r3, r2
 8002994:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a27      	ldr	r2, [pc, #156]	; (8002a38 <TIM_OC1_SetConfig+0xf8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d00b      	beq.n	80029b6 <TIM_OC1_SetConfig+0x76>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a26      	ldr	r2, [pc, #152]	; (8002a3c <TIM_OC1_SetConfig+0xfc>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d007      	beq.n	80029b6 <TIM_OC1_SetConfig+0x76>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a25      	ldr	r2, [pc, #148]	; (8002a40 <TIM_OC1_SetConfig+0x100>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d003      	beq.n	80029b6 <TIM_OC1_SetConfig+0x76>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a24      	ldr	r2, [pc, #144]	; (8002a44 <TIM_OC1_SetConfig+0x104>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d10c      	bne.n	80029d0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2208      	movs	r2, #8
 80029ba:	4393      	bics	r3, r2
 80029bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	2204      	movs	r2, #4
 80029cc:	4393      	bics	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a19      	ldr	r2, [pc, #100]	; (8002a38 <TIM_OC1_SetConfig+0xf8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d00b      	beq.n	80029f0 <TIM_OC1_SetConfig+0xb0>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a18      	ldr	r2, [pc, #96]	; (8002a3c <TIM_OC1_SetConfig+0xfc>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d007      	beq.n	80029f0 <TIM_OC1_SetConfig+0xb0>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a17      	ldr	r2, [pc, #92]	; (8002a40 <TIM_OC1_SetConfig+0x100>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d003      	beq.n	80029f0 <TIM_OC1_SetConfig+0xb0>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a16      	ldr	r2, [pc, #88]	; (8002a44 <TIM_OC1_SetConfig+0x104>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d111      	bne.n	8002a14 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	4a15      	ldr	r2, [pc, #84]	; (8002a48 <TIM_OC1_SetConfig+0x108>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4a14      	ldr	r2, [pc, #80]	; (8002a4c <TIM_OC1_SetConfig+0x10c>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	621a      	str	r2, [r3, #32]
}
 8002a2e:	46c0      	nop			; (mov r8, r8)
 8002a30:	46bd      	mov	sp, r7
 8002a32:	b006      	add	sp, #24
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	46c0      	nop			; (mov r8, r8)
 8002a38:	40012c00 	.word	0x40012c00
 8002a3c:	40014000 	.word	0x40014000
 8002a40:	40014400 	.word	0x40014400
 8002a44:	40014800 	.word	0x40014800
 8002a48:	fffffeff 	.word	0xfffffeff
 8002a4c:	fffffdff 	.word	0xfffffdff

08002a50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	2210      	movs	r2, #16
 8002a60:	4393      	bics	r3, r2
 8002a62:	001a      	movs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	4a2e      	ldr	r2, [pc, #184]	; (8002b38 <TIM_OC2_SetConfig+0xe8>)
 8002a7e:	4013      	ands	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4a2d      	ldr	r2, [pc, #180]	; (8002b3c <TIM_OC2_SetConfig+0xec>)
 8002a86:	4013      	ands	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	021b      	lsls	r3, r3, #8
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	4393      	bics	r3, r2
 8002a9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a24      	ldr	r2, [pc, #144]	; (8002b40 <TIM_OC2_SetConfig+0xf0>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d10d      	bne.n	8002ace <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	2280      	movs	r2, #128	; 0x80
 8002ab6:	4393      	bics	r3, r2
 8002ab8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	011b      	lsls	r3, r3, #4
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2240      	movs	r2, #64	; 0x40
 8002aca:	4393      	bics	r3, r2
 8002acc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a1b      	ldr	r2, [pc, #108]	; (8002b40 <TIM_OC2_SetConfig+0xf0>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d00b      	beq.n	8002aee <TIM_OC2_SetConfig+0x9e>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a1a      	ldr	r2, [pc, #104]	; (8002b44 <TIM_OC2_SetConfig+0xf4>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d007      	beq.n	8002aee <TIM_OC2_SetConfig+0x9e>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a19      	ldr	r2, [pc, #100]	; (8002b48 <TIM_OC2_SetConfig+0xf8>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d003      	beq.n	8002aee <TIM_OC2_SetConfig+0x9e>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a18      	ldr	r2, [pc, #96]	; (8002b4c <TIM_OC2_SetConfig+0xfc>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d113      	bne.n	8002b16 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	4a17      	ldr	r2, [pc, #92]	; (8002b50 <TIM_OC2_SetConfig+0x100>)
 8002af2:	4013      	ands	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4a16      	ldr	r2, [pc, #88]	; (8002b54 <TIM_OC2_SetConfig+0x104>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	621a      	str	r2, [r3, #32]
}
 8002b30:	46c0      	nop			; (mov r8, r8)
 8002b32:	46bd      	mov	sp, r7
 8002b34:	b006      	add	sp, #24
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	ffff8fff 	.word	0xffff8fff
 8002b3c:	fffffcff 	.word	0xfffffcff
 8002b40:	40012c00 	.word	0x40012c00
 8002b44:	40014000 	.word	0x40014000
 8002b48:	40014400 	.word	0x40014400
 8002b4c:	40014800 	.word	0x40014800
 8002b50:	fffffbff 	.word	0xfffffbff
 8002b54:	fffff7ff 	.word	0xfffff7ff

08002b58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	4a35      	ldr	r2, [pc, #212]	; (8002c3c <TIM_OC3_SetConfig+0xe4>)
 8002b68:	401a      	ands	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2270      	movs	r2, #112	; 0x70
 8002b84:	4393      	bics	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	4393      	bics	r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	4a28      	ldr	r2, [pc, #160]	; (8002c40 <TIM_OC3_SetConfig+0xe8>)
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	021b      	lsls	r3, r3, #8
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a24      	ldr	r2, [pc, #144]	; (8002c44 <TIM_OC3_SetConfig+0xec>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d10d      	bne.n	8002bd2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	4a23      	ldr	r2, [pc, #140]	; (8002c48 <TIM_OC3_SetConfig+0xf0>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	021b      	lsls	r3, r3, #8
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	4a1f      	ldr	r2, [pc, #124]	; (8002c4c <TIM_OC3_SetConfig+0xf4>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a1b      	ldr	r2, [pc, #108]	; (8002c44 <TIM_OC3_SetConfig+0xec>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d00b      	beq.n	8002bf2 <TIM_OC3_SetConfig+0x9a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a1c      	ldr	r2, [pc, #112]	; (8002c50 <TIM_OC3_SetConfig+0xf8>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d007      	beq.n	8002bf2 <TIM_OC3_SetConfig+0x9a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a1b      	ldr	r2, [pc, #108]	; (8002c54 <TIM_OC3_SetConfig+0xfc>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d003      	beq.n	8002bf2 <TIM_OC3_SetConfig+0x9a>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a1a      	ldr	r2, [pc, #104]	; (8002c58 <TIM_OC3_SetConfig+0x100>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d113      	bne.n	8002c1a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	4a19      	ldr	r2, [pc, #100]	; (8002c5c <TIM_OC3_SetConfig+0x104>)
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	4a18      	ldr	r2, [pc, #96]	; (8002c60 <TIM_OC3_SetConfig+0x108>)
 8002bfe:	4013      	ands	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	621a      	str	r2, [r3, #32]
}
 8002c34:	46c0      	nop			; (mov r8, r8)
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b006      	add	sp, #24
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	fffffeff 	.word	0xfffffeff
 8002c40:	fffffdff 	.word	0xfffffdff
 8002c44:	40012c00 	.word	0x40012c00
 8002c48:	fffff7ff 	.word	0xfffff7ff
 8002c4c:	fffffbff 	.word	0xfffffbff
 8002c50:	40014000 	.word	0x40014000
 8002c54:	40014400 	.word	0x40014400
 8002c58:	40014800 	.word	0x40014800
 8002c5c:	ffffefff 	.word	0xffffefff
 8002c60:	ffffdfff 	.word	0xffffdfff

08002c64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	4a28      	ldr	r2, [pc, #160]	; (8002d14 <TIM_OC4_SetConfig+0xb0>)
 8002c74:	401a      	ands	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4a22      	ldr	r2, [pc, #136]	; (8002d18 <TIM_OC4_SetConfig+0xb4>)
 8002c90:	4013      	ands	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4a21      	ldr	r2, [pc, #132]	; (8002d1c <TIM_OC4_SetConfig+0xb8>)
 8002c98:	4013      	ands	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	021b      	lsls	r3, r3, #8
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	4a1d      	ldr	r2, [pc, #116]	; (8002d20 <TIM_OC4_SetConfig+0xbc>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	031b      	lsls	r3, r3, #12
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a19      	ldr	r2, [pc, #100]	; (8002d24 <TIM_OC4_SetConfig+0xc0>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d00b      	beq.n	8002cdc <TIM_OC4_SetConfig+0x78>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a18      	ldr	r2, [pc, #96]	; (8002d28 <TIM_OC4_SetConfig+0xc4>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d007      	beq.n	8002cdc <TIM_OC4_SetConfig+0x78>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a17      	ldr	r2, [pc, #92]	; (8002d2c <TIM_OC4_SetConfig+0xc8>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d003      	beq.n	8002cdc <TIM_OC4_SetConfig+0x78>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a16      	ldr	r2, [pc, #88]	; (8002d30 <TIM_OC4_SetConfig+0xcc>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d109      	bne.n	8002cf0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	4a15      	ldr	r2, [pc, #84]	; (8002d34 <TIM_OC4_SetConfig+0xd0>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	019b      	lsls	r3, r3, #6
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	621a      	str	r2, [r3, #32]
}
 8002d0a:	46c0      	nop			; (mov r8, r8)
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	b006      	add	sp, #24
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	ffffefff 	.word	0xffffefff
 8002d18:	ffff8fff 	.word	0xffff8fff
 8002d1c:	fffffcff 	.word	0xfffffcff
 8002d20:	ffffdfff 	.word	0xffffdfff
 8002d24:	40012c00 	.word	0x40012c00
 8002d28:	40014000 	.word	0x40014000
 8002d2c:	40014400 	.word	0x40014400
 8002d30:	40014800 	.word	0x40014800
 8002d34:	ffffbfff 	.word	0xffffbfff

08002d38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	221f      	movs	r2, #31
 8002d48:	4013      	ands	r3, r2
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	409a      	lsls	r2, r3
 8002d4e:	0013      	movs	r3, r2
 8002d50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	43d2      	mvns	r2, r2
 8002d5a:	401a      	ands	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6a1a      	ldr	r2, [r3, #32]
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	211f      	movs	r1, #31
 8002d68:	400b      	ands	r3, r1
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	4099      	lsls	r1, r3
 8002d6e:	000b      	movs	r3, r1
 8002d70:	431a      	orrs	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	621a      	str	r2, [r3, #32]
}
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	b006      	add	sp, #24
 8002d7c:	bd80      	pop	{r7, pc}
	...

08002d80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	223c      	movs	r2, #60	; 0x3c
 8002d8e:	5c9b      	ldrb	r3, [r3, r2]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d101      	bne.n	8002d98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d94:	2302      	movs	r3, #2
 8002d96:	e047      	b.n	8002e28 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	223c      	movs	r2, #60	; 0x3c
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	223d      	movs	r2, #61	; 0x3d
 8002da4:	2102      	movs	r1, #2
 8002da6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2270      	movs	r2, #112	; 0x70
 8002dbc:	4393      	bics	r3, r2
 8002dbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a16      	ldr	r2, [pc, #88]	; (8002e30 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d00f      	beq.n	8002dfc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	2380      	movs	r3, #128	; 0x80
 8002de2:	05db      	lsls	r3, r3, #23
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d009      	beq.n	8002dfc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a11      	ldr	r2, [pc, #68]	; (8002e34 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a10      	ldr	r2, [pc, #64]	; (8002e38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d10c      	bne.n	8002e16 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2280      	movs	r2, #128	; 0x80
 8002e00:	4393      	bics	r3, r2
 8002e02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	223d      	movs	r2, #61	; 0x3d
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	223c      	movs	r2, #60	; 0x3c
 8002e22:	2100      	movs	r1, #0
 8002e24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	0018      	movs	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	b004      	add	sp, #16
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40012c00 	.word	0x40012c00
 8002e34:	40000400 	.word	0x40000400
 8002e38:	40014000 	.word	0x40014000

08002e3c <__errno>:
 8002e3c:	4b01      	ldr	r3, [pc, #4]	; (8002e44 <__errno+0x8>)
 8002e3e:	6818      	ldr	r0, [r3, #0]
 8002e40:	4770      	bx	lr
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	2000000c 	.word	0x2000000c

08002e48 <__libc_init_array>:
 8002e48:	b570      	push	{r4, r5, r6, lr}
 8002e4a:	2600      	movs	r6, #0
 8002e4c:	4d0c      	ldr	r5, [pc, #48]	; (8002e80 <__libc_init_array+0x38>)
 8002e4e:	4c0d      	ldr	r4, [pc, #52]	; (8002e84 <__libc_init_array+0x3c>)
 8002e50:	1b64      	subs	r4, r4, r5
 8002e52:	10a4      	asrs	r4, r4, #2
 8002e54:	42a6      	cmp	r6, r4
 8002e56:	d109      	bne.n	8002e6c <__libc_init_array+0x24>
 8002e58:	2600      	movs	r6, #0
 8002e5a:	f000 f8a7 	bl	8002fac <_init>
 8002e5e:	4d0a      	ldr	r5, [pc, #40]	; (8002e88 <__libc_init_array+0x40>)
 8002e60:	4c0a      	ldr	r4, [pc, #40]	; (8002e8c <__libc_init_array+0x44>)
 8002e62:	1b64      	subs	r4, r4, r5
 8002e64:	10a4      	asrs	r4, r4, #2
 8002e66:	42a6      	cmp	r6, r4
 8002e68:	d105      	bne.n	8002e76 <__libc_init_array+0x2e>
 8002e6a:	bd70      	pop	{r4, r5, r6, pc}
 8002e6c:	00b3      	lsls	r3, r6, #2
 8002e6e:	58eb      	ldr	r3, [r5, r3]
 8002e70:	4798      	blx	r3
 8002e72:	3601      	adds	r6, #1
 8002e74:	e7ee      	b.n	8002e54 <__libc_init_array+0xc>
 8002e76:	00b3      	lsls	r3, r6, #2
 8002e78:	58eb      	ldr	r3, [r5, r3]
 8002e7a:	4798      	blx	r3
 8002e7c:	3601      	adds	r6, #1
 8002e7e:	e7f2      	b.n	8002e66 <__libc_init_array+0x1e>
 8002e80:	08002ff4 	.word	0x08002ff4
 8002e84:	08002ff4 	.word	0x08002ff4
 8002e88:	08002ff4 	.word	0x08002ff4
 8002e8c:	08002ff8 	.word	0x08002ff8

08002e90 <malloc>:
 8002e90:	b510      	push	{r4, lr}
 8002e92:	4b03      	ldr	r3, [pc, #12]	; (8002ea0 <malloc+0x10>)
 8002e94:	0001      	movs	r1, r0
 8002e96:	6818      	ldr	r0, [r3, #0]
 8002e98:	f000 f816 	bl	8002ec8 <_malloc_r>
 8002e9c:	bd10      	pop	{r4, pc}
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	2000000c 	.word	0x2000000c

08002ea4 <memcpy>:
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	b510      	push	{r4, lr}
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d100      	bne.n	8002eae <memcpy+0xa>
 8002eac:	bd10      	pop	{r4, pc}
 8002eae:	5ccc      	ldrb	r4, [r1, r3]
 8002eb0:	54c4      	strb	r4, [r0, r3]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	e7f8      	b.n	8002ea8 <memcpy+0x4>

08002eb6 <memset>:
 8002eb6:	0003      	movs	r3, r0
 8002eb8:	1812      	adds	r2, r2, r0
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d100      	bne.n	8002ec0 <memset+0xa>
 8002ebe:	4770      	bx	lr
 8002ec0:	7019      	strb	r1, [r3, #0]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	e7f9      	b.n	8002eba <memset+0x4>
	...

08002ec8 <_malloc_r>:
 8002ec8:	2303      	movs	r3, #3
 8002eca:	b570      	push	{r4, r5, r6, lr}
 8002ecc:	1ccd      	adds	r5, r1, #3
 8002ece:	439d      	bics	r5, r3
 8002ed0:	3508      	adds	r5, #8
 8002ed2:	0006      	movs	r6, r0
 8002ed4:	2d0c      	cmp	r5, #12
 8002ed6:	d21e      	bcs.n	8002f16 <_malloc_r+0x4e>
 8002ed8:	250c      	movs	r5, #12
 8002eda:	42a9      	cmp	r1, r5
 8002edc:	d81d      	bhi.n	8002f1a <_malloc_r+0x52>
 8002ede:	0030      	movs	r0, r6
 8002ee0:	f000 f862 	bl	8002fa8 <__malloc_lock>
 8002ee4:	4a25      	ldr	r2, [pc, #148]	; (8002f7c <_malloc_r+0xb4>)
 8002ee6:	6814      	ldr	r4, [r2, #0]
 8002ee8:	0021      	movs	r1, r4
 8002eea:	2900      	cmp	r1, #0
 8002eec:	d119      	bne.n	8002f22 <_malloc_r+0x5a>
 8002eee:	4c24      	ldr	r4, [pc, #144]	; (8002f80 <_malloc_r+0xb8>)
 8002ef0:	6823      	ldr	r3, [r4, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d103      	bne.n	8002efe <_malloc_r+0x36>
 8002ef6:	0030      	movs	r0, r6
 8002ef8:	f000 f844 	bl	8002f84 <_sbrk_r>
 8002efc:	6020      	str	r0, [r4, #0]
 8002efe:	0029      	movs	r1, r5
 8002f00:	0030      	movs	r0, r6
 8002f02:	f000 f83f 	bl	8002f84 <_sbrk_r>
 8002f06:	1c43      	adds	r3, r0, #1
 8002f08:	d12b      	bne.n	8002f62 <_malloc_r+0x9a>
 8002f0a:	230c      	movs	r3, #12
 8002f0c:	0030      	movs	r0, r6
 8002f0e:	6033      	str	r3, [r6, #0]
 8002f10:	f000 f84b 	bl	8002faa <__malloc_unlock>
 8002f14:	e003      	b.n	8002f1e <_malloc_r+0x56>
 8002f16:	2d00      	cmp	r5, #0
 8002f18:	dadf      	bge.n	8002eda <_malloc_r+0x12>
 8002f1a:	230c      	movs	r3, #12
 8002f1c:	6033      	str	r3, [r6, #0]
 8002f1e:	2000      	movs	r0, #0
 8002f20:	bd70      	pop	{r4, r5, r6, pc}
 8002f22:	680b      	ldr	r3, [r1, #0]
 8002f24:	1b5b      	subs	r3, r3, r5
 8002f26:	d419      	bmi.n	8002f5c <_malloc_r+0x94>
 8002f28:	2b0b      	cmp	r3, #11
 8002f2a:	d903      	bls.n	8002f34 <_malloc_r+0x6c>
 8002f2c:	600b      	str	r3, [r1, #0]
 8002f2e:	18cc      	adds	r4, r1, r3
 8002f30:	6025      	str	r5, [r4, #0]
 8002f32:	e003      	b.n	8002f3c <_malloc_r+0x74>
 8002f34:	684b      	ldr	r3, [r1, #4]
 8002f36:	428c      	cmp	r4, r1
 8002f38:	d10d      	bne.n	8002f56 <_malloc_r+0x8e>
 8002f3a:	6013      	str	r3, [r2, #0]
 8002f3c:	0030      	movs	r0, r6
 8002f3e:	f000 f834 	bl	8002faa <__malloc_unlock>
 8002f42:	0020      	movs	r0, r4
 8002f44:	2207      	movs	r2, #7
 8002f46:	300b      	adds	r0, #11
 8002f48:	1d23      	adds	r3, r4, #4
 8002f4a:	4390      	bics	r0, r2
 8002f4c:	1ac3      	subs	r3, r0, r3
 8002f4e:	d0e7      	beq.n	8002f20 <_malloc_r+0x58>
 8002f50:	425a      	negs	r2, r3
 8002f52:	50e2      	str	r2, [r4, r3]
 8002f54:	e7e4      	b.n	8002f20 <_malloc_r+0x58>
 8002f56:	6063      	str	r3, [r4, #4]
 8002f58:	000c      	movs	r4, r1
 8002f5a:	e7ef      	b.n	8002f3c <_malloc_r+0x74>
 8002f5c:	000c      	movs	r4, r1
 8002f5e:	6849      	ldr	r1, [r1, #4]
 8002f60:	e7c3      	b.n	8002eea <_malloc_r+0x22>
 8002f62:	2303      	movs	r3, #3
 8002f64:	1cc4      	adds	r4, r0, #3
 8002f66:	439c      	bics	r4, r3
 8002f68:	42a0      	cmp	r0, r4
 8002f6a:	d0e1      	beq.n	8002f30 <_malloc_r+0x68>
 8002f6c:	1a21      	subs	r1, r4, r0
 8002f6e:	0030      	movs	r0, r6
 8002f70:	f000 f808 	bl	8002f84 <_sbrk_r>
 8002f74:	1c43      	adds	r3, r0, #1
 8002f76:	d1db      	bne.n	8002f30 <_malloc_r+0x68>
 8002f78:	e7c7      	b.n	8002f0a <_malloc_r+0x42>
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	20000094 	.word	0x20000094
 8002f80:	20000098 	.word	0x20000098

08002f84 <_sbrk_r>:
 8002f84:	2300      	movs	r3, #0
 8002f86:	b570      	push	{r4, r5, r6, lr}
 8002f88:	4c06      	ldr	r4, [pc, #24]	; (8002fa4 <_sbrk_r+0x20>)
 8002f8a:	0005      	movs	r5, r0
 8002f8c:	0008      	movs	r0, r1
 8002f8e:	6023      	str	r3, [r4, #0]
 8002f90:	f7fd fda6 	bl	8000ae0 <_sbrk>
 8002f94:	1c43      	adds	r3, r0, #1
 8002f96:	d103      	bne.n	8002fa0 <_sbrk_r+0x1c>
 8002f98:	6823      	ldr	r3, [r4, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d000      	beq.n	8002fa0 <_sbrk_r+0x1c>
 8002f9e:	602b      	str	r3, [r5, #0]
 8002fa0:	bd70      	pop	{r4, r5, r6, pc}
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	20000180 	.word	0x20000180

08002fa8 <__malloc_lock>:
 8002fa8:	4770      	bx	lr

08002faa <__malloc_unlock>:
 8002faa:	4770      	bx	lr

08002fac <_init>:
 8002fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fb2:	bc08      	pop	{r3}
 8002fb4:	469e      	mov	lr, r3
 8002fb6:	4770      	bx	lr

08002fb8 <_fini>:
 8002fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fbe:	bc08      	pop	{r3}
 8002fc0:	469e      	mov	lr, r3
 8002fc2:	4770      	bx	lr
