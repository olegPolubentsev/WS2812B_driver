
WS2812B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025f0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080026b0  080026b0  000126b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026e0  080026e0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080026e0  080026e0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026e0  080026e0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026e0  080026e0  000126e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026e4  080026e4  000126e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080026e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000010  080026f8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  080026f8  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d85  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014c4  00000000  00000000  00027dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000948  00000000  00000000  00029288  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000890  00000000  00000000  00029bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000184ab  00000000  00000000  0002a460  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007df1  00000000  00000000  0004290b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f6c1  00000000  00000000  0004a6fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d9dbd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020e4  00000000  00000000  000d9e38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002698 	.word	0x08002698

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08002698 	.word	0x08002698

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fa85 	bl	8000734 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f823 	bl	8000274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f8fd 	bl	800042c <MX_GPIO_Init>
  MX_DMA_Init();
 8000232:	f000 f8dd 	bl	80003f0 <MX_DMA_Init>
  MX_TIM3_Init();
 8000236:	f000 f859 	bl	80002ec <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_1);
 800023a:	4b0b      	ldr	r3, [pc, #44]	; (8000268 <main+0x48>)
 800023c:	2100      	movs	r1, #0
 800023e:	0018      	movs	r0, r3
 8000240:	f001 fc40 	bl	8001ac4 <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
    for(i=0; i<hz; i++)
 8000244:	2300      	movs	r3, #0
 8000246:	607b      	str	r3, [r7, #4]
 8000248:	e008      	b.n	800025c <main+0x3c>
    {
    	TIM3->CCR1 = i;
 800024a:	4b08      	ldr	r3, [pc, #32]	; (800026c <main+0x4c>)
 800024c:	687a      	ldr	r2, [r7, #4]
 800024e:	635a      	str	r2, [r3, #52]	; 0x34
    	HAL_Delay(4);
 8000250:	2004      	movs	r0, #4
 8000252:	f000 fad3 	bl	80007fc <HAL_Delay>
    for(i=0; i<hz; i++)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	3301      	adds	r3, #1
 800025a:	607b      	str	r3, [r7, #4]
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <main+0x50>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	429a      	cmp	r2, r3
 8000264:	d3f1      	bcc.n	800024a <main+0x2a>
 8000266:	e7ed      	b.n	8000244 <main+0x24>
 8000268:	2000002c 	.word	0x2000002c
 800026c:	40000400 	.word	0x40000400
 8000270:	20000000 	.word	0x20000000

08000274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000274:	b590      	push	{r4, r7, lr}
 8000276:	b093      	sub	sp, #76	; 0x4c
 8000278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027a:	2414      	movs	r4, #20
 800027c:	193b      	adds	r3, r7, r4
 800027e:	0018      	movs	r0, r3
 8000280:	2334      	movs	r3, #52	; 0x34
 8000282:	001a      	movs	r2, r3
 8000284:	2100      	movs	r1, #0
 8000286:	f002 f9ff 	bl	8002688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	0018      	movs	r0, r3
 800028e:	2310      	movs	r3, #16
 8000290:	001a      	movs	r2, r3
 8000292:	2100      	movs	r1, #0
 8000294:	f002 f9f8 	bl	8002688 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000298:	193b      	adds	r3, r7, r4
 800029a:	2220      	movs	r2, #32
 800029c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800029e:	193b      	adds	r3, r7, r4
 80002a0:	2201      	movs	r2, #1
 80002a2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002a4:	193b      	adds	r3, r7, r4
 80002a6:	2200      	movs	r2, #0
 80002a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002aa:	193b      	adds	r3, r7, r4
 80002ac:	0018      	movs	r0, r3
 80002ae:	f000 fe81 	bl	8000fb4 <HAL_RCC_OscConfig>
 80002b2:	1e03      	subs	r3, r0, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002b6:	f000 f91f 	bl	80004f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	2207      	movs	r2, #7
 80002be:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2203      	movs	r2, #3
 80002c4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2200      	movs	r2, #0
 80002ca:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2200      	movs	r2, #0
 80002d0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2101      	movs	r1, #1
 80002d6:	0018      	movs	r0, r3
 80002d8:	f001 f9f2 	bl	80016c0 <HAL_RCC_ClockConfig>
 80002dc:	1e03      	subs	r3, r0, #0
 80002de:	d001      	beq.n	80002e4 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80002e0:	f000 f90a 	bl	80004f8 <Error_Handler>
  }
}
 80002e4:	46c0      	nop			; (mov r8, r8)
 80002e6:	46bd      	mov	sp, r7
 80002e8:	b013      	add	sp, #76	; 0x4c
 80002ea:	bd90      	pop	{r4, r7, pc}

080002ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b08e      	sub	sp, #56	; 0x38
 80002f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002f2:	2328      	movs	r3, #40	; 0x28
 80002f4:	18fb      	adds	r3, r7, r3
 80002f6:	0018      	movs	r0, r3
 80002f8:	2310      	movs	r3, #16
 80002fa:	001a      	movs	r2, r3
 80002fc:	2100      	movs	r1, #0
 80002fe:	f002 f9c3 	bl	8002688 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000302:	2320      	movs	r3, #32
 8000304:	18fb      	adds	r3, r7, r3
 8000306:	0018      	movs	r0, r3
 8000308:	2308      	movs	r3, #8
 800030a:	001a      	movs	r2, r3
 800030c:	2100      	movs	r1, #0
 800030e:	f002 f9bb 	bl	8002688 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	0018      	movs	r0, r3
 8000316:	231c      	movs	r3, #28
 8000318:	001a      	movs	r2, r3
 800031a:	2100      	movs	r1, #0
 800031c:	f002 f9b4 	bl	8002688 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000320:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <MX_TIM3_Init+0xf8>)
 8000322:	4a31      	ldr	r2, [pc, #196]	; (80003e8 <MX_TIM3_Init+0xfc>)
 8000324:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000326:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <MX_TIM3_Init+0xf8>)
 8000328:	2200      	movs	r2, #0
 800032a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800032c:	4b2d      	ldr	r3, [pc, #180]	; (80003e4 <MX_TIM3_Init+0xf8>)
 800032e:	2200      	movs	r2, #0
 8000330:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = hz;
 8000332:	4b2e      	ldr	r3, [pc, #184]	; (80003ec <MX_TIM3_Init+0x100>)
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	4b2b      	ldr	r3, [pc, #172]	; (80003e4 <MX_TIM3_Init+0xf8>)
 8000338:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800033a:	4b2a      	ldr	r3, [pc, #168]	; (80003e4 <MX_TIM3_Init+0xf8>)
 800033c:	2200      	movs	r2, #0
 800033e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000340:	4b28      	ldr	r3, [pc, #160]	; (80003e4 <MX_TIM3_Init+0xf8>)
 8000342:	2200      	movs	r2, #0
 8000344:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000346:	4b27      	ldr	r3, [pc, #156]	; (80003e4 <MX_TIM3_Init+0xf8>)
 8000348:	0018      	movs	r0, r3
 800034a:	f001 fb13 	bl	8001974 <HAL_TIM_Base_Init>
 800034e:	1e03      	subs	r3, r0, #0
 8000350:	d001      	beq.n	8000356 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000352:	f000 f8d1 	bl	80004f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000356:	2128      	movs	r1, #40	; 0x28
 8000358:	187b      	adds	r3, r7, r1
 800035a:	2280      	movs	r2, #128	; 0x80
 800035c:	0152      	lsls	r2, r2, #5
 800035e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000360:	187a      	adds	r2, r7, r1
 8000362:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <MX_TIM3_Init+0xf8>)
 8000364:	0011      	movs	r1, r2
 8000366:	0018      	movs	r0, r3
 8000368:	f001 fd14 	bl	8001d94 <HAL_TIM_ConfigClockSource>
 800036c:	1e03      	subs	r3, r0, #0
 800036e:	d001      	beq.n	8000374 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000370:	f000 f8c2 	bl	80004f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000374:	4b1b      	ldr	r3, [pc, #108]	; (80003e4 <MX_TIM3_Init+0xf8>)
 8000376:	0018      	movs	r0, r3
 8000378:	f001 fb4c 	bl	8001a14 <HAL_TIM_PWM_Init>
 800037c:	1e03      	subs	r3, r0, #0
 800037e:	d001      	beq.n	8000384 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000380:	f000 f8ba 	bl	80004f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000384:	2120      	movs	r1, #32
 8000386:	187b      	adds	r3, r7, r1
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800038c:	187b      	adds	r3, r7, r1
 800038e:	2200      	movs	r2, #0
 8000390:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000392:	187a      	adds	r2, r7, r1
 8000394:	4b13      	ldr	r3, [pc, #76]	; (80003e4 <MX_TIM3_Init+0xf8>)
 8000396:	0011      	movs	r1, r2
 8000398:	0018      	movs	r0, r3
 800039a:	f002 f8f3 	bl	8002584 <HAL_TIMEx_MasterConfigSynchronization>
 800039e:	1e03      	subs	r3, r0, #0
 80003a0:	d001      	beq.n	80003a6 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80003a2:	f000 f8a9 	bl	80004f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2260      	movs	r2, #96	; 0x60
 80003aa:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	2200      	movs	r2, #0
 80003b0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	2200      	movs	r2, #0
 80003bc:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003be:	1d39      	adds	r1, r7, #4
 80003c0:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <MX_TIM3_Init+0xf8>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	0018      	movs	r0, r3
 80003c6:	f001 fc35 	bl	8001c34 <HAL_TIM_PWM_ConfigChannel>
 80003ca:	1e03      	subs	r3, r0, #0
 80003cc:	d001      	beq.n	80003d2 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80003ce:	f000 f893 	bl	80004f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80003d2:	4b04      	ldr	r3, [pc, #16]	; (80003e4 <MX_TIM3_Init+0xf8>)
 80003d4:	0018      	movs	r0, r3
 80003d6:	f000 f907 	bl	80005e8 <HAL_TIM_MspPostInit>

}
 80003da:	46c0      	nop			; (mov r8, r8)
 80003dc:	46bd      	mov	sp, r7
 80003de:	b00e      	add	sp, #56	; 0x38
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	2000002c 	.word	0x2000002c
 80003e8:	40000400 	.word	0x40000400
 80003ec:	20000000 	.word	0x20000000

080003f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003f6:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <MX_DMA_Init+0x38>)
 80003f8:	695a      	ldr	r2, [r3, #20]
 80003fa:	4b0b      	ldr	r3, [pc, #44]	; (8000428 <MX_DMA_Init+0x38>)
 80003fc:	2101      	movs	r1, #1
 80003fe:	430a      	orrs	r2, r1
 8000400:	615a      	str	r2, [r3, #20]
 8000402:	4b09      	ldr	r3, [pc, #36]	; (8000428 <MX_DMA_Init+0x38>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	2201      	movs	r2, #1
 8000408:	4013      	ands	r3, r2
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 800040e:	2200      	movs	r2, #0
 8000410:	2100      	movs	r1, #0
 8000412:	200b      	movs	r0, #11
 8000414:	f000 fac0 	bl	8000998 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8000418:	200b      	movs	r0, #11
 800041a:	f000 fad2 	bl	80009c2 <HAL_NVIC_EnableIRQ>

}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	b002      	add	sp, #8
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	40021000 	.word	0x40021000

0800042c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800042c:	b590      	push	{r4, r7, lr}
 800042e:	b089      	sub	sp, #36	; 0x24
 8000430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000432:	240c      	movs	r4, #12
 8000434:	193b      	adds	r3, r7, r4
 8000436:	0018      	movs	r0, r3
 8000438:	2314      	movs	r3, #20
 800043a:	001a      	movs	r2, r3
 800043c:	2100      	movs	r1, #0
 800043e:	f002 f923 	bl	8002688 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000442:	4b2a      	ldr	r3, [pc, #168]	; (80004ec <MX_GPIO_Init+0xc0>)
 8000444:	695a      	ldr	r2, [r3, #20]
 8000446:	4b29      	ldr	r3, [pc, #164]	; (80004ec <MX_GPIO_Init+0xc0>)
 8000448:	2180      	movs	r1, #128	; 0x80
 800044a:	0289      	lsls	r1, r1, #10
 800044c:	430a      	orrs	r2, r1
 800044e:	615a      	str	r2, [r3, #20]
 8000450:	4b26      	ldr	r3, [pc, #152]	; (80004ec <MX_GPIO_Init+0xc0>)
 8000452:	695a      	ldr	r2, [r3, #20]
 8000454:	2380      	movs	r3, #128	; 0x80
 8000456:	029b      	lsls	r3, r3, #10
 8000458:	4013      	ands	r3, r2
 800045a:	60bb      	str	r3, [r7, #8]
 800045c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800045e:	4b23      	ldr	r3, [pc, #140]	; (80004ec <MX_GPIO_Init+0xc0>)
 8000460:	695a      	ldr	r2, [r3, #20]
 8000462:	4b22      	ldr	r3, [pc, #136]	; (80004ec <MX_GPIO_Init+0xc0>)
 8000464:	2180      	movs	r1, #128	; 0x80
 8000466:	02c9      	lsls	r1, r1, #11
 8000468:	430a      	orrs	r2, r1
 800046a:	615a      	str	r2, [r3, #20]
 800046c:	4b1f      	ldr	r3, [pc, #124]	; (80004ec <MX_GPIO_Init+0xc0>)
 800046e:	695a      	ldr	r2, [r3, #20]
 8000470:	2380      	movs	r3, #128	; 0x80
 8000472:	02db      	lsls	r3, r3, #11
 8000474:	4013      	ands	r3, r2
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800047a:	2380      	movs	r3, #128	; 0x80
 800047c:	01db      	lsls	r3, r3, #7
 800047e:	481c      	ldr	r0, [pc, #112]	; (80004f0 <MX_GPIO_Init+0xc4>)
 8000480:	2200      	movs	r2, #0
 8000482:	0019      	movs	r1, r3
 8000484:	f000 fd38 	bl	8000ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000488:	193b      	adds	r3, r7, r4
 800048a:	2280      	movs	r2, #128	; 0x80
 800048c:	01d2      	lsls	r2, r2, #7
 800048e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000490:	193b      	adds	r3, r7, r4
 8000492:	2201      	movs	r2, #1
 8000494:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000496:	193b      	adds	r3, r7, r4
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049c:	193b      	adds	r3, r7, r4
 800049e:	2200      	movs	r2, #0
 80004a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a2:	193b      	adds	r3, r7, r4
 80004a4:	4a12      	ldr	r2, [pc, #72]	; (80004f0 <MX_GPIO_Init+0xc4>)
 80004a6:	0019      	movs	r1, r3
 80004a8:	0010      	movs	r0, r2
 80004aa:	f000 fbad 	bl	8000c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80004ae:	0021      	movs	r1, r4
 80004b0:	187b      	adds	r3, r7, r1
 80004b2:	2280      	movs	r2, #128	; 0x80
 80004b4:	0112      	lsls	r2, r2, #4
 80004b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	4a0e      	ldr	r2, [pc, #56]	; (80004f4 <MX_GPIO_Init+0xc8>)
 80004bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	2201      	movs	r2, #1
 80004c2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c4:	187a      	adds	r2, r7, r1
 80004c6:	2390      	movs	r3, #144	; 0x90
 80004c8:	05db      	lsls	r3, r3, #23
 80004ca:	0011      	movs	r1, r2
 80004cc:	0018      	movs	r0, r3
 80004ce:	f000 fb9b 	bl	8000c08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80004d2:	2200      	movs	r2, #0
 80004d4:	2100      	movs	r1, #0
 80004d6:	2007      	movs	r0, #7
 80004d8:	f000 fa5e 	bl	8000998 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80004dc:	2007      	movs	r0, #7
 80004de:	f000 fa70 	bl	80009c2 <HAL_NVIC_EnableIRQ>

}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b009      	add	sp, #36	; 0x24
 80004e8:	bd90      	pop	{r4, r7, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	40021000 	.word	0x40021000
 80004f0:	48000400 	.word	0x48000400
 80004f4:	10210000 	.word	0x10210000

080004f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004fc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004fe:	e7fe      	b.n	80004fe <Error_Handler+0x6>

08000500 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000506:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <HAL_MspInit+0x44>)
 8000508:	699a      	ldr	r2, [r3, #24]
 800050a:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <HAL_MspInit+0x44>)
 800050c:	2101      	movs	r1, #1
 800050e:	430a      	orrs	r2, r1
 8000510:	619a      	str	r2, [r3, #24]
 8000512:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <HAL_MspInit+0x44>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	2201      	movs	r2, #1
 8000518:	4013      	ands	r3, r2
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800051e:	4b09      	ldr	r3, [pc, #36]	; (8000544 <HAL_MspInit+0x44>)
 8000520:	69da      	ldr	r2, [r3, #28]
 8000522:	4b08      	ldr	r3, [pc, #32]	; (8000544 <HAL_MspInit+0x44>)
 8000524:	2180      	movs	r1, #128	; 0x80
 8000526:	0549      	lsls	r1, r1, #21
 8000528:	430a      	orrs	r2, r1
 800052a:	61da      	str	r2, [r3, #28]
 800052c:	4b05      	ldr	r3, [pc, #20]	; (8000544 <HAL_MspInit+0x44>)
 800052e:	69da      	ldr	r2, [r3, #28]
 8000530:	2380      	movs	r3, #128	; 0x80
 8000532:	055b      	lsls	r3, r3, #21
 8000534:	4013      	ands	r3, r2
 8000536:	603b      	str	r3, [r7, #0]
 8000538:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	46bd      	mov	sp, r7
 800053e:	b002      	add	sp, #8
 8000540:	bd80      	pop	{r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	40021000 	.word	0x40021000

08000548 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a20      	ldr	r2, [pc, #128]	; (80005d8 <HAL_TIM_Base_MspInit+0x90>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d139      	bne.n	80005ce <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800055a:	4b20      	ldr	r3, [pc, #128]	; (80005dc <HAL_TIM_Base_MspInit+0x94>)
 800055c:	69da      	ldr	r2, [r3, #28]
 800055e:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <HAL_TIM_Base_MspInit+0x94>)
 8000560:	2102      	movs	r1, #2
 8000562:	430a      	orrs	r2, r1
 8000564:	61da      	str	r2, [r3, #28]
 8000566:	4b1d      	ldr	r3, [pc, #116]	; (80005dc <HAL_TIM_Base_MspInit+0x94>)
 8000568:	69db      	ldr	r3, [r3, #28]
 800056a:	2202      	movs	r2, #2
 800056c:	4013      	ands	r3, r2
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel4;
 8000572:	4b1b      	ldr	r3, [pc, #108]	; (80005e0 <HAL_TIM_Base_MspInit+0x98>)
 8000574:	4a1b      	ldr	r2, [pc, #108]	; (80005e4 <HAL_TIM_Base_MspInit+0x9c>)
 8000576:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000578:	4b19      	ldr	r3, [pc, #100]	; (80005e0 <HAL_TIM_Base_MspInit+0x98>)
 800057a:	2210      	movs	r2, #16
 800057c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800057e:	4b18      	ldr	r3, [pc, #96]	; (80005e0 <HAL_TIM_Base_MspInit+0x98>)
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8000584:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <HAL_TIM_Base_MspInit+0x98>)
 8000586:	2280      	movs	r2, #128	; 0x80
 8000588:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800058a:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <HAL_TIM_Base_MspInit+0x98>)
 800058c:	2280      	movs	r2, #128	; 0x80
 800058e:	0092      	lsls	r2, r2, #2
 8000590:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000592:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <HAL_TIM_Base_MspInit+0x98>)
 8000594:	2280      	movs	r2, #128	; 0x80
 8000596:	0112      	lsls	r2, r2, #4
 8000598:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 800059a:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <HAL_TIM_Base_MspInit+0x98>)
 800059c:	2200      	movs	r2, #0
 800059e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 80005a0:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <HAL_TIM_Base_MspInit+0x98>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_TIM_Base_MspInit+0x98>)
 80005a8:	0018      	movs	r0, r3
 80005aa:	f000 fa27 	bl	80009fc <HAL_DMA_Init>
 80005ae:	1e03      	subs	r3, r0, #0
 80005b0:	d001      	beq.n	80005b6 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 80005b2:	f7ff ffa1 	bl	80004f8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4a09      	ldr	r2, [pc, #36]	; (80005e0 <HAL_TIM_Base_MspInit+0x98>)
 80005ba:	625a      	str	r2, [r3, #36]	; 0x24
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <HAL_TIM_Base_MspInit+0x98>)
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4a06      	ldr	r2, [pc, #24]	; (80005e0 <HAL_TIM_Base_MspInit+0x98>)
 80005c6:	639a      	str	r2, [r3, #56]	; 0x38
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <HAL_TIM_Base_MspInit+0x98>)
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	46bd      	mov	sp, r7
 80005d2:	b004      	add	sp, #16
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	40000400 	.word	0x40000400
 80005dc:	40021000 	.word	0x40021000
 80005e0:	20000074 	.word	0x20000074
 80005e4:	40020044 	.word	0x40020044

080005e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f0:	230c      	movs	r3, #12
 80005f2:	18fb      	adds	r3, r7, r3
 80005f4:	0018      	movs	r0, r3
 80005f6:	2314      	movs	r3, #20
 80005f8:	001a      	movs	r2, r3
 80005fa:	2100      	movs	r1, #0
 80005fc:	f002 f844 	bl	8002688 <memset>
  if(htim->Instance==TIM3)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a15      	ldr	r2, [pc, #84]	; (800065c <HAL_TIM_MspPostInit+0x74>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d124      	bne.n	8000654 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	4b15      	ldr	r3, [pc, #84]	; (8000660 <HAL_TIM_MspPostInit+0x78>)
 800060c:	695a      	ldr	r2, [r3, #20]
 800060e:	4b14      	ldr	r3, [pc, #80]	; (8000660 <HAL_TIM_MspPostInit+0x78>)
 8000610:	2180      	movs	r1, #128	; 0x80
 8000612:	0289      	lsls	r1, r1, #10
 8000614:	430a      	orrs	r2, r1
 8000616:	615a      	str	r2, [r3, #20]
 8000618:	4b11      	ldr	r3, [pc, #68]	; (8000660 <HAL_TIM_MspPostInit+0x78>)
 800061a:	695a      	ldr	r2, [r3, #20]
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	029b      	lsls	r3, r3, #10
 8000620:	4013      	ands	r3, r2
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000626:	210c      	movs	r1, #12
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2240      	movs	r2, #64	; 0x40
 800062c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2202      	movs	r2, #2
 8000632:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063a:	187b      	adds	r3, r7, r1
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000640:	187b      	adds	r3, r7, r1
 8000642:	2201      	movs	r2, #1
 8000644:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000646:	187a      	adds	r2, r7, r1
 8000648:	2390      	movs	r3, #144	; 0x90
 800064a:	05db      	lsls	r3, r3, #23
 800064c:	0011      	movs	r1, r2
 800064e:	0018      	movs	r0, r3
 8000650:	f000 fada 	bl	8000c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000654:	46c0      	nop			; (mov r8, r8)
 8000656:	46bd      	mov	sp, r7
 8000658:	b008      	add	sp, #32
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40000400 	.word	0x40000400
 8000660:	40021000 	.word	0x40021000

08000664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000668:	e7fe      	b.n	8000668 <NMI_Handler+0x4>

0800066a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800066e:	e7fe      	b.n	800066e <HardFault_Handler+0x4>

08000670 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000674:	46c0      	nop			; (mov r8, r8)
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000688:	f000 f89c 	bl	80007c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800068c:	46c0      	nop			; (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000698:	2380      	movs	r3, #128	; 0x80
 800069a:	011b      	lsls	r3, r3, #4
 800069c:	0018      	movs	r0, r3
 800069e:	f000 fc63 	bl	8000f68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */
  HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_14);
 80006a2:	2380      	movs	r3, #128	; 0x80
 80006a4:	01db      	lsls	r3, r3, #7
 80006a6:	4a04      	ldr	r2, [pc, #16]	; (80006b8 <EXTI4_15_IRQHandler+0x24>)
 80006a8:	0019      	movs	r1, r3
 80006aa:	0010      	movs	r0, r2
 80006ac:	f000 fc41 	bl	8000f32 <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80006b0:	46c0      	nop			; (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	48000400 	.word	0x48000400

080006bc <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, 5, 6 and 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80006c0:	4b03      	ldr	r3, [pc, #12]	; (80006d0 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 80006c2:	0018      	movs	r0, r3
 80006c4:	f000 f9e2 	bl	8000a8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80006c8:	46c0      	nop			; (mov r8, r8)
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	20000074 	.word	0x20000074

080006d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <Reset_Handler>:
 80006e0:	480d      	ldr	r0, [pc, #52]	; (8000718 <LoopForever+0x2>)
 80006e2:	4685      	mov	sp, r0
 80006e4:	480d      	ldr	r0, [pc, #52]	; (800071c <LoopForever+0x6>)
 80006e6:	490e      	ldr	r1, [pc, #56]	; (8000720 <LoopForever+0xa>)
 80006e8:	4a0e      	ldr	r2, [pc, #56]	; (8000724 <LoopForever+0xe>)
 80006ea:	2300      	movs	r3, #0
 80006ec:	e002      	b.n	80006f4 <LoopCopyDataInit>

080006ee <CopyDataInit>:
 80006ee:	58d4      	ldr	r4, [r2, r3]
 80006f0:	50c4      	str	r4, [r0, r3]
 80006f2:	3304      	adds	r3, #4

080006f4 <LoopCopyDataInit>:
 80006f4:	18c4      	adds	r4, r0, r3
 80006f6:	428c      	cmp	r4, r1
 80006f8:	d3f9      	bcc.n	80006ee <CopyDataInit>
 80006fa:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <LoopForever+0x12>)
 80006fc:	4c0b      	ldr	r4, [pc, #44]	; (800072c <LoopForever+0x16>)
 80006fe:	2300      	movs	r3, #0
 8000700:	e001      	b.n	8000706 <LoopFillZerobss>

08000702 <FillZerobss>:
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	3204      	adds	r2, #4

08000706 <LoopFillZerobss>:
 8000706:	42a2      	cmp	r2, r4
 8000708:	d3fb      	bcc.n	8000702 <FillZerobss>
 800070a:	f7ff ffe3 	bl	80006d4 <SystemInit>
 800070e:	f001 ff97 	bl	8002640 <__libc_init_array>
 8000712:	f7ff fd85 	bl	8000220 <main>

08000716 <LoopForever>:
 8000716:	e7fe      	b.n	8000716 <LoopForever>
 8000718:	20004000 	.word	0x20004000
 800071c:	20000000 	.word	0x20000000
 8000720:	20000010 	.word	0x20000010
 8000724:	080026e8 	.word	0x080026e8
 8000728:	20000010 	.word	0x20000010
 800072c:	200000bc 	.word	0x200000bc

08000730 <ADC1_COMP_IRQHandler>:
 8000730:	e7fe      	b.n	8000730 <ADC1_COMP_IRQHandler>
	...

08000734 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000738:	4b07      	ldr	r3, [pc, #28]	; (8000758 <HAL_Init+0x24>)
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <HAL_Init+0x24>)
 800073e:	2110      	movs	r1, #16
 8000740:	430a      	orrs	r2, r1
 8000742:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000744:	2000      	movs	r0, #0
 8000746:	f000 f809 	bl	800075c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800074a:	f7ff fed9 	bl	8000500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800074e:	2300      	movs	r3, #0
}
 8000750:	0018      	movs	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	40022000 	.word	0x40022000

0800075c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800075c:	b590      	push	{r4, r7, lr}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <HAL_InitTick+0x5c>)
 8000766:	681c      	ldr	r4, [r3, #0]
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <HAL_InitTick+0x60>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	0019      	movs	r1, r3
 800076e:	23fa      	movs	r3, #250	; 0xfa
 8000770:	0098      	lsls	r0, r3, #2
 8000772:	f7ff fcc9 	bl	8000108 <__udivsi3>
 8000776:	0003      	movs	r3, r0
 8000778:	0019      	movs	r1, r3
 800077a:	0020      	movs	r0, r4
 800077c:	f7ff fcc4 	bl	8000108 <__udivsi3>
 8000780:	0003      	movs	r3, r0
 8000782:	0018      	movs	r0, r3
 8000784:	f000 f92d 	bl	80009e2 <HAL_SYSTICK_Config>
 8000788:	1e03      	subs	r3, r0, #0
 800078a:	d001      	beq.n	8000790 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800078c:	2301      	movs	r3, #1
 800078e:	e00f      	b.n	80007b0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b03      	cmp	r3, #3
 8000794:	d80b      	bhi.n	80007ae <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000796:	6879      	ldr	r1, [r7, #4]
 8000798:	2301      	movs	r3, #1
 800079a:	425b      	negs	r3, r3
 800079c:	2200      	movs	r2, #0
 800079e:	0018      	movs	r0, r3
 80007a0:	f000 f8fa 	bl	8000998 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <HAL_InitTick+0x64>)
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80007aa:	2300      	movs	r3, #0
 80007ac:	e000      	b.n	80007b0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007ae:	2301      	movs	r3, #1
}
 80007b0:	0018      	movs	r0, r3
 80007b2:	46bd      	mov	sp, r7
 80007b4:	b003      	add	sp, #12
 80007b6:	bd90      	pop	{r4, r7, pc}
 80007b8:	20000004 	.word	0x20000004
 80007bc:	2000000c 	.word	0x2000000c
 80007c0:	20000008 	.word	0x20000008

080007c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <HAL_IncTick+0x1c>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	001a      	movs	r2, r3
 80007ce:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <HAL_IncTick+0x20>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	18d2      	adds	r2, r2, r3
 80007d4:	4b03      	ldr	r3, [pc, #12]	; (80007e4 <HAL_IncTick+0x20>)
 80007d6:	601a      	str	r2, [r3, #0]
}
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	2000000c 	.word	0x2000000c
 80007e4:	200000b8 	.word	0x200000b8

080007e8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  return uwTick;
 80007ec:	4b02      	ldr	r3, [pc, #8]	; (80007f8 <HAL_GetTick+0x10>)
 80007ee:	681b      	ldr	r3, [r3, #0]
}
 80007f0:	0018      	movs	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	200000b8 	.word	0x200000b8

080007fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000804:	f7ff fff0 	bl	80007e8 <HAL_GetTick>
 8000808:	0003      	movs	r3, r0
 800080a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	3301      	adds	r3, #1
 8000814:	d005      	beq.n	8000822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <HAL_Delay+0x40>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	001a      	movs	r2, r3
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	189b      	adds	r3, r3, r2
 8000820:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	f7ff ffe0 	bl	80007e8 <HAL_GetTick>
 8000828:	0002      	movs	r2, r0
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	68fa      	ldr	r2, [r7, #12]
 8000830:	429a      	cmp	r2, r3
 8000832:	d8f7      	bhi.n	8000824 <HAL_Delay+0x28>
  {
  }
}
 8000834:	46c0      	nop			; (mov r8, r8)
 8000836:	46bd      	mov	sp, r7
 8000838:	b004      	add	sp, #16
 800083a:	bd80      	pop	{r7, pc}
 800083c:	2000000c 	.word	0x2000000c

08000840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	0002      	movs	r2, r0
 8000848:	1dfb      	adds	r3, r7, #7
 800084a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800084c:	1dfb      	adds	r3, r7, #7
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b7f      	cmp	r3, #127	; 0x7f
 8000852:	d809      	bhi.n	8000868 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000854:	1dfb      	adds	r3, r7, #7
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	001a      	movs	r2, r3
 800085a:	231f      	movs	r3, #31
 800085c:	401a      	ands	r2, r3
 800085e:	4b04      	ldr	r3, [pc, #16]	; (8000870 <__NVIC_EnableIRQ+0x30>)
 8000860:	2101      	movs	r1, #1
 8000862:	4091      	lsls	r1, r2
 8000864:	000a      	movs	r2, r1
 8000866:	601a      	str	r2, [r3, #0]
  }
}
 8000868:	46c0      	nop			; (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	b002      	add	sp, #8
 800086e:	bd80      	pop	{r7, pc}
 8000870:	e000e100 	.word	0xe000e100

08000874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	0002      	movs	r2, r0
 800087c:	6039      	str	r1, [r7, #0]
 800087e:	1dfb      	adds	r3, r7, #7
 8000880:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b7f      	cmp	r3, #127	; 0x7f
 8000888:	d828      	bhi.n	80008dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800088a:	4a2f      	ldr	r2, [pc, #188]	; (8000948 <__NVIC_SetPriority+0xd4>)
 800088c:	1dfb      	adds	r3, r7, #7
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b25b      	sxtb	r3, r3
 8000892:	089b      	lsrs	r3, r3, #2
 8000894:	33c0      	adds	r3, #192	; 0xc0
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	589b      	ldr	r3, [r3, r2]
 800089a:	1dfa      	adds	r2, r7, #7
 800089c:	7812      	ldrb	r2, [r2, #0]
 800089e:	0011      	movs	r1, r2
 80008a0:	2203      	movs	r2, #3
 80008a2:	400a      	ands	r2, r1
 80008a4:	00d2      	lsls	r2, r2, #3
 80008a6:	21ff      	movs	r1, #255	; 0xff
 80008a8:	4091      	lsls	r1, r2
 80008aa:	000a      	movs	r2, r1
 80008ac:	43d2      	mvns	r2, r2
 80008ae:	401a      	ands	r2, r3
 80008b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	019b      	lsls	r3, r3, #6
 80008b6:	22ff      	movs	r2, #255	; 0xff
 80008b8:	401a      	ands	r2, r3
 80008ba:	1dfb      	adds	r3, r7, #7
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	0018      	movs	r0, r3
 80008c0:	2303      	movs	r3, #3
 80008c2:	4003      	ands	r3, r0
 80008c4:	00db      	lsls	r3, r3, #3
 80008c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008c8:	481f      	ldr	r0, [pc, #124]	; (8000948 <__NVIC_SetPriority+0xd4>)
 80008ca:	1dfb      	adds	r3, r7, #7
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	b25b      	sxtb	r3, r3
 80008d0:	089b      	lsrs	r3, r3, #2
 80008d2:	430a      	orrs	r2, r1
 80008d4:	33c0      	adds	r3, #192	; 0xc0
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008da:	e031      	b.n	8000940 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008dc:	4a1b      	ldr	r2, [pc, #108]	; (800094c <__NVIC_SetPriority+0xd8>)
 80008de:	1dfb      	adds	r3, r7, #7
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	0019      	movs	r1, r3
 80008e4:	230f      	movs	r3, #15
 80008e6:	400b      	ands	r3, r1
 80008e8:	3b08      	subs	r3, #8
 80008ea:	089b      	lsrs	r3, r3, #2
 80008ec:	3306      	adds	r3, #6
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	18d3      	adds	r3, r2, r3
 80008f2:	3304      	adds	r3, #4
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	1dfa      	adds	r2, r7, #7
 80008f8:	7812      	ldrb	r2, [r2, #0]
 80008fa:	0011      	movs	r1, r2
 80008fc:	2203      	movs	r2, #3
 80008fe:	400a      	ands	r2, r1
 8000900:	00d2      	lsls	r2, r2, #3
 8000902:	21ff      	movs	r1, #255	; 0xff
 8000904:	4091      	lsls	r1, r2
 8000906:	000a      	movs	r2, r1
 8000908:	43d2      	mvns	r2, r2
 800090a:	401a      	ands	r2, r3
 800090c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	019b      	lsls	r3, r3, #6
 8000912:	22ff      	movs	r2, #255	; 0xff
 8000914:	401a      	ands	r2, r3
 8000916:	1dfb      	adds	r3, r7, #7
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	0018      	movs	r0, r3
 800091c:	2303      	movs	r3, #3
 800091e:	4003      	ands	r3, r0
 8000920:	00db      	lsls	r3, r3, #3
 8000922:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000924:	4809      	ldr	r0, [pc, #36]	; (800094c <__NVIC_SetPriority+0xd8>)
 8000926:	1dfb      	adds	r3, r7, #7
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	001c      	movs	r4, r3
 800092c:	230f      	movs	r3, #15
 800092e:	4023      	ands	r3, r4
 8000930:	3b08      	subs	r3, #8
 8000932:	089b      	lsrs	r3, r3, #2
 8000934:	430a      	orrs	r2, r1
 8000936:	3306      	adds	r3, #6
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	18c3      	adds	r3, r0, r3
 800093c:	3304      	adds	r3, #4
 800093e:	601a      	str	r2, [r3, #0]
}
 8000940:	46c0      	nop			; (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	b003      	add	sp, #12
 8000946:	bd90      	pop	{r4, r7, pc}
 8000948:	e000e100 	.word	0xe000e100
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	3b01      	subs	r3, #1
 800095c:	4a0c      	ldr	r2, [pc, #48]	; (8000990 <SysTick_Config+0x40>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d901      	bls.n	8000966 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000962:	2301      	movs	r3, #1
 8000964:	e010      	b.n	8000988 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <SysTick_Config+0x44>)
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	3a01      	subs	r2, #1
 800096c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800096e:	2301      	movs	r3, #1
 8000970:	425b      	negs	r3, r3
 8000972:	2103      	movs	r1, #3
 8000974:	0018      	movs	r0, r3
 8000976:	f7ff ff7d 	bl	8000874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <SysTick_Config+0x44>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000980:	4b04      	ldr	r3, [pc, #16]	; (8000994 <SysTick_Config+0x44>)
 8000982:	2207      	movs	r2, #7
 8000984:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000986:	2300      	movs	r3, #0
}
 8000988:	0018      	movs	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	b002      	add	sp, #8
 800098e:	bd80      	pop	{r7, pc}
 8000990:	00ffffff 	.word	0x00ffffff
 8000994:	e000e010 	.word	0xe000e010

08000998 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	60b9      	str	r1, [r7, #8]
 80009a0:	607a      	str	r2, [r7, #4]
 80009a2:	210f      	movs	r1, #15
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	1c02      	adds	r2, r0, #0
 80009a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009aa:	68ba      	ldr	r2, [r7, #8]
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	b25b      	sxtb	r3, r3
 80009b2:	0011      	movs	r1, r2
 80009b4:	0018      	movs	r0, r3
 80009b6:	f7ff ff5d 	bl	8000874 <__NVIC_SetPriority>
}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	46bd      	mov	sp, r7
 80009be:	b004      	add	sp, #16
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b082      	sub	sp, #8
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	0002      	movs	r2, r0
 80009ca:	1dfb      	adds	r3, r7, #7
 80009cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009ce:	1dfb      	adds	r3, r7, #7
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	b25b      	sxtb	r3, r3
 80009d4:	0018      	movs	r0, r3
 80009d6:	f7ff ff33 	bl	8000840 <__NVIC_EnableIRQ>
}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	b002      	add	sp, #8
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b082      	sub	sp, #8
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	0018      	movs	r0, r3
 80009ee:	f7ff ffaf 	bl	8000950 <SysTick_Config>
 80009f2:	0003      	movs	r3, r0
}
 80009f4:	0018      	movs	r0, r3
 80009f6:	46bd      	mov	sp, r7
 80009f8:	b002      	add	sp, #8
 80009fa:	bd80      	pop	{r7, pc}

080009fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d101      	bne.n	8000a12 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e036      	b.n	8000a80 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2221      	movs	r2, #33	; 0x21
 8000a16:	2102      	movs	r1, #2
 8000a18:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	4a18      	ldr	r2, [pc, #96]	; (8000a88 <HAL_DMA_Init+0x8c>)
 8000a26:	4013      	ands	r3, r2
 8000a28:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000a32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	695b      	ldr	r3, [r3, #20]
 8000a44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	69db      	ldr	r3, [r3, #28]
 8000a50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	68fa      	ldr	r2, [r7, #12]
 8000a5e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	0018      	movs	r0, r3
 8000a64:	f000 f8b4 	bl	8000bd0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2221      	movs	r2, #33	; 0x21
 8000a72:	2101      	movs	r1, #1
 8000a74:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2220      	movs	r2, #32
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000a7e:	2300      	movs	r3, #0
}  
 8000a80:	0018      	movs	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	b004      	add	sp, #16
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	ffffc00f 	.word	0xffffc00f

08000a8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	2204      	movs	r2, #4
 8000aaa:	409a      	lsls	r2, r3
 8000aac:	0013      	movs	r3, r2
 8000aae:	68fa      	ldr	r2, [r7, #12]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	d024      	beq.n	8000afe <HAL_DMA_IRQHandler+0x72>
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	2204      	movs	r2, #4
 8000ab8:	4013      	ands	r3, r2
 8000aba:	d020      	beq.n	8000afe <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	2220      	movs	r2, #32
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	d107      	bne.n	8000ad8 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2104      	movs	r1, #4
 8000ad4:	438a      	bics	r2, r1
 8000ad6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ae0:	2104      	movs	r1, #4
 8000ae2:	4091      	lsls	r1, r2
 8000ae4:	000a      	movs	r2, r1
 8000ae6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d100      	bne.n	8000af2 <HAL_DMA_IRQHandler+0x66>
 8000af0:	e06a      	b.n	8000bc8 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	0010      	movs	r0, r2
 8000afa:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000afc:	e064      	b.n	8000bc8 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	2202      	movs	r2, #2
 8000b04:	409a      	lsls	r2, r3
 8000b06:	0013      	movs	r3, r2
 8000b08:	68fa      	ldr	r2, [r7, #12]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	d02b      	beq.n	8000b66 <HAL_DMA_IRQHandler+0xda>
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	2202      	movs	r2, #2
 8000b12:	4013      	ands	r3, r2
 8000b14:	d027      	beq.n	8000b66 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2220      	movs	r2, #32
 8000b1e:	4013      	ands	r3, r2
 8000b20:	d10b      	bne.n	8000b3a <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	210a      	movs	r1, #10
 8000b2e:	438a      	bics	r2, r1
 8000b30:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2221      	movs	r2, #33	; 0x21
 8000b36:	2101      	movs	r1, #1
 8000b38:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b42:	2102      	movs	r1, #2
 8000b44:	4091      	lsls	r1, r2
 8000b46:	000a      	movs	r2, r1
 8000b48:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2220      	movs	r2, #32
 8000b4e:	2100      	movs	r1, #0
 8000b50:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d036      	beq.n	8000bc8 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	0010      	movs	r0, r2
 8000b62:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000b64:	e030      	b.n	8000bc8 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	2208      	movs	r2, #8
 8000b6c:	409a      	lsls	r2, r3
 8000b6e:	0013      	movs	r3, r2
 8000b70:	68fa      	ldr	r2, [r7, #12]
 8000b72:	4013      	ands	r3, r2
 8000b74:	d028      	beq.n	8000bc8 <HAL_DMA_IRQHandler+0x13c>
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	2208      	movs	r2, #8
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	d024      	beq.n	8000bc8 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	210e      	movs	r1, #14
 8000b8a:	438a      	bics	r2, r1
 8000b8c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b96:	2101      	movs	r1, #1
 8000b98:	4091      	lsls	r1, r2
 8000b9a:	000a      	movs	r2, r1
 8000b9c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2221      	movs	r2, #33	; 0x21
 8000ba8:	2101      	movs	r1, #1
 8000baa:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2220      	movs	r2, #32
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d005      	beq.n	8000bc8 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	0010      	movs	r0, r2
 8000bc4:	4798      	blx	r3
    }
   }
}  
 8000bc6:	e7ff      	b.n	8000bc8 <HAL_DMA_IRQHandler+0x13c>
 8000bc8:	46c0      	nop			; (mov r8, r8)
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	b004      	add	sp, #16
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a08      	ldr	r2, [pc, #32]	; (8000c00 <DMA_CalcBaseAndBitshift+0x30>)
 8000bde:	4694      	mov	ip, r2
 8000be0:	4463      	add	r3, ip
 8000be2:	2114      	movs	r1, #20
 8000be4:	0018      	movs	r0, r3
 8000be6:	f7ff fa8f 	bl	8000108 <__udivsi3>
 8000bea:	0003      	movs	r3, r0
 8000bec:	009a      	lsls	r2, r3, #2
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4a03      	ldr	r2, [pc, #12]	; (8000c04 <DMA_CalcBaseAndBitshift+0x34>)
 8000bf6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000bf8:	46c0      	nop			; (mov r8, r8)
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	b002      	add	sp, #8
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	bffdfff8 	.word	0xbffdfff8
 8000c04:	40020000 	.word	0x40020000

08000c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c16:	e155      	b.n	8000ec4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	697a      	ldr	r2, [r7, #20]
 8000c20:	4091      	lsls	r1, r2
 8000c22:	000a      	movs	r2, r1
 8000c24:	4013      	ands	r3, r2
 8000c26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d100      	bne.n	8000c30 <HAL_GPIO_Init+0x28>
 8000c2e:	e146      	b.n	8000ebe <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d00b      	beq.n	8000c50 <HAL_GPIO_Init+0x48>
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	2b02      	cmp	r3, #2
 8000c3e:	d007      	beq.n	8000c50 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c44:	2b11      	cmp	r3, #17
 8000c46:	d003      	beq.n	8000c50 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	2b12      	cmp	r3, #18
 8000c4e:	d130      	bne.n	8000cb2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	2203      	movs	r2, #3
 8000c5c:	409a      	lsls	r2, r3
 8000c5e:	0013      	movs	r3, r2
 8000c60:	43da      	mvns	r2, r3
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	4013      	ands	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	68da      	ldr	r2, [r3, #12]
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	409a      	lsls	r2, r3
 8000c72:	0013      	movs	r3, r2
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c86:	2201      	movs	r2, #1
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	409a      	lsls	r2, r3
 8000c8c:	0013      	movs	r3, r2
 8000c8e:	43da      	mvns	r2, r3
 8000c90:	693b      	ldr	r3, [r7, #16]
 8000c92:	4013      	ands	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	091b      	lsrs	r3, r3, #4
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	401a      	ands	r2, r3
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	409a      	lsls	r2, r3
 8000ca4:	0013      	movs	r3, r2
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	68db      	ldr	r3, [r3, #12]
 8000cb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	409a      	lsls	r2, r3
 8000cc0:	0013      	movs	r3, r2
 8000cc2:	43da      	mvns	r2, r3
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	689a      	ldr	r2, [r3, #8]
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	409a      	lsls	r2, r3
 8000cd4:	0013      	movs	r3, r2
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	d003      	beq.n	8000cf2 <HAL_GPIO_Init+0xea>
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	2b12      	cmp	r3, #18
 8000cf0:	d123      	bne.n	8000d3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	08da      	lsrs	r2, r3, #3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	3208      	adds	r2, #8
 8000cfa:	0092      	lsls	r2, r2, #2
 8000cfc:	58d3      	ldr	r3, [r2, r3]
 8000cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	2207      	movs	r2, #7
 8000d04:	4013      	ands	r3, r2
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	220f      	movs	r2, #15
 8000d0a:	409a      	lsls	r2, r3
 8000d0c:	0013      	movs	r3, r2
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	4013      	ands	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	691a      	ldr	r2, [r3, #16]
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	2107      	movs	r1, #7
 8000d1e:	400b      	ands	r3, r1
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	409a      	lsls	r2, r3
 8000d24:	0013      	movs	r3, r2
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	08da      	lsrs	r2, r3, #3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3208      	adds	r2, #8
 8000d34:	0092      	lsls	r2, r2, #2
 8000d36:	6939      	ldr	r1, [r7, #16]
 8000d38:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	2203      	movs	r2, #3
 8000d46:	409a      	lsls	r2, r3
 8000d48:	0013      	movs	r3, r2
 8000d4a:	43da      	mvns	r2, r3
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	2203      	movs	r2, #3
 8000d58:	401a      	ands	r2, r3
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	409a      	lsls	r2, r3
 8000d60:	0013      	movs	r3, r2
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685a      	ldr	r2, [r3, #4]
 8000d72:	2380      	movs	r3, #128	; 0x80
 8000d74:	055b      	lsls	r3, r3, #21
 8000d76:	4013      	ands	r3, r2
 8000d78:	d100      	bne.n	8000d7c <HAL_GPIO_Init+0x174>
 8000d7a:	e0a0      	b.n	8000ebe <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7c:	4b57      	ldr	r3, [pc, #348]	; (8000edc <HAL_GPIO_Init+0x2d4>)
 8000d7e:	699a      	ldr	r2, [r3, #24]
 8000d80:	4b56      	ldr	r3, [pc, #344]	; (8000edc <HAL_GPIO_Init+0x2d4>)
 8000d82:	2101      	movs	r1, #1
 8000d84:	430a      	orrs	r2, r1
 8000d86:	619a      	str	r2, [r3, #24]
 8000d88:	4b54      	ldr	r3, [pc, #336]	; (8000edc <HAL_GPIO_Init+0x2d4>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	4013      	ands	r3, r2
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d94:	4a52      	ldr	r2, [pc, #328]	; (8000ee0 <HAL_GPIO_Init+0x2d8>)
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	089b      	lsrs	r3, r3, #2
 8000d9a:	3302      	adds	r3, #2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	589b      	ldr	r3, [r3, r2]
 8000da0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	2203      	movs	r2, #3
 8000da6:	4013      	ands	r3, r2
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	220f      	movs	r2, #15
 8000dac:	409a      	lsls	r2, r3
 8000dae:	0013      	movs	r3, r2
 8000db0:	43da      	mvns	r2, r3
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	2390      	movs	r3, #144	; 0x90
 8000dbc:	05db      	lsls	r3, r3, #23
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d019      	beq.n	8000df6 <HAL_GPIO_Init+0x1ee>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a47      	ldr	r2, [pc, #284]	; (8000ee4 <HAL_GPIO_Init+0x2dc>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d013      	beq.n	8000df2 <HAL_GPIO_Init+0x1ea>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a46      	ldr	r2, [pc, #280]	; (8000ee8 <HAL_GPIO_Init+0x2e0>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d00d      	beq.n	8000dee <HAL_GPIO_Init+0x1e6>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a45      	ldr	r2, [pc, #276]	; (8000eec <HAL_GPIO_Init+0x2e4>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d007      	beq.n	8000dea <HAL_GPIO_Init+0x1e2>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a44      	ldr	r2, [pc, #272]	; (8000ef0 <HAL_GPIO_Init+0x2e8>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d101      	bne.n	8000de6 <HAL_GPIO_Init+0x1de>
 8000de2:	2304      	movs	r3, #4
 8000de4:	e008      	b.n	8000df8 <HAL_GPIO_Init+0x1f0>
 8000de6:	2305      	movs	r3, #5
 8000de8:	e006      	b.n	8000df8 <HAL_GPIO_Init+0x1f0>
 8000dea:	2303      	movs	r3, #3
 8000dec:	e004      	b.n	8000df8 <HAL_GPIO_Init+0x1f0>
 8000dee:	2302      	movs	r3, #2
 8000df0:	e002      	b.n	8000df8 <HAL_GPIO_Init+0x1f0>
 8000df2:	2301      	movs	r3, #1
 8000df4:	e000      	b.n	8000df8 <HAL_GPIO_Init+0x1f0>
 8000df6:	2300      	movs	r3, #0
 8000df8:	697a      	ldr	r2, [r7, #20]
 8000dfa:	2103      	movs	r1, #3
 8000dfc:	400a      	ands	r2, r1
 8000dfe:	0092      	lsls	r2, r2, #2
 8000e00:	4093      	lsls	r3, r2
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e08:	4935      	ldr	r1, [pc, #212]	; (8000ee0 <HAL_GPIO_Init+0x2d8>)
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	089b      	lsrs	r3, r3, #2
 8000e0e:	3302      	adds	r3, #2
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e16:	4b37      	ldr	r3, [pc, #220]	; (8000ef4 <HAL_GPIO_Init+0x2ec>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	43da      	mvns	r2, r3
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	4013      	ands	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685a      	ldr	r2, [r3, #4]
 8000e2a:	2380      	movs	r3, #128	; 0x80
 8000e2c:	025b      	lsls	r3, r3, #9
 8000e2e:	4013      	ands	r3, r2
 8000e30:	d003      	beq.n	8000e3a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e3a:	4b2e      	ldr	r3, [pc, #184]	; (8000ef4 <HAL_GPIO_Init+0x2ec>)
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000e40:	4b2c      	ldr	r3, [pc, #176]	; (8000ef4 <HAL_GPIO_Init+0x2ec>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	43da      	mvns	r2, r3
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685a      	ldr	r2, [r3, #4]
 8000e54:	2380      	movs	r3, #128	; 0x80
 8000e56:	029b      	lsls	r3, r3, #10
 8000e58:	4013      	ands	r3, r2
 8000e5a:	d003      	beq.n	8000e64 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e64:	4b23      	ldr	r3, [pc, #140]	; (8000ef4 <HAL_GPIO_Init+0x2ec>)
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e6a:	4b22      	ldr	r3, [pc, #136]	; (8000ef4 <HAL_GPIO_Init+0x2ec>)
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	43da      	mvns	r2, r3
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	4013      	ands	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	2380      	movs	r3, #128	; 0x80
 8000e80:	035b      	lsls	r3, r3, #13
 8000e82:	4013      	ands	r3, r2
 8000e84:	d003      	beq.n	8000e8e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e8e:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <HAL_GPIO_Init+0x2ec>)
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e94:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <HAL_GPIO_Init+0x2ec>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	43da      	mvns	r2, r3
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685a      	ldr	r2, [r3, #4]
 8000ea8:	2380      	movs	r3, #128	; 0x80
 8000eaa:	039b      	lsls	r3, r3, #14
 8000eac:	4013      	ands	r3, r2
 8000eae:	d003      	beq.n	8000eb8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000eb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <HAL_GPIO_Init+0x2ec>)
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	40da      	lsrs	r2, r3
 8000ecc:	1e13      	subs	r3, r2, #0
 8000ece:	d000      	beq.n	8000ed2 <HAL_GPIO_Init+0x2ca>
 8000ed0:	e6a2      	b.n	8000c18 <HAL_GPIO_Init+0x10>
  } 
}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	b006      	add	sp, #24
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40010000 	.word	0x40010000
 8000ee4:	48000400 	.word	0x48000400
 8000ee8:	48000800 	.word	0x48000800
 8000eec:	48000c00 	.word	0x48000c00
 8000ef0:	48001000 	.word	0x48001000
 8000ef4:	40010400 	.word	0x40010400

08000ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	0008      	movs	r0, r1
 8000f02:	0011      	movs	r1, r2
 8000f04:	1cbb      	adds	r3, r7, #2
 8000f06:	1c02      	adds	r2, r0, #0
 8000f08:	801a      	strh	r2, [r3, #0]
 8000f0a:	1c7b      	adds	r3, r7, #1
 8000f0c:	1c0a      	adds	r2, r1, #0
 8000f0e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f10:	1c7b      	adds	r3, r7, #1
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d004      	beq.n	8000f22 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f18:	1cbb      	adds	r3, r7, #2
 8000f1a:	881a      	ldrh	r2, [r3, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f20:	e003      	b.n	8000f2a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f22:	1cbb      	adds	r3, r7, #2
 8000f24:	881a      	ldrh	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	b002      	add	sp, #8
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b084      	sub	sp, #16
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	000a      	movs	r2, r1
 8000f3c:	1cbb      	adds	r3, r7, #2
 8000f3e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	695b      	ldr	r3, [r3, #20]
 8000f44:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f46:	1cbb      	adds	r3, r7, #2
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	041a      	lsls	r2, r3, #16
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	43db      	mvns	r3, r3
 8000f54:	1cb9      	adds	r1, r7, #2
 8000f56:	8809      	ldrh	r1, [r1, #0]
 8000f58:	400b      	ands	r3, r1
 8000f5a:	431a      	orrs	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	619a      	str	r2, [r3, #24]
}
 8000f60:	46c0      	nop			; (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b004      	add	sp, #16
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	0002      	movs	r2, r0
 8000f70:	1dbb      	adds	r3, r7, #6
 8000f72:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f74:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	1dba      	adds	r2, r7, #6
 8000f7a:	8812      	ldrh	r2, [r2, #0]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	d008      	beq.n	8000f92 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000f82:	1dba      	adds	r2, r7, #6
 8000f84:	8812      	ldrh	r2, [r2, #0]
 8000f86:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f88:	1dbb      	adds	r3, r7, #6
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f000 f807 	bl	8000fa0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	46bd      	mov	sp, r7
 8000f96:	b002      	add	sp, #8
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	40010400 	.word	0x40010400

08000fa0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	0002      	movs	r2, r0
 8000fa8:	1dbb      	adds	r3, r7, #6
 8000faa:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8000fac:	46c0      	nop			; (mov r8, r8)
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	b002      	add	sp, #8
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d102      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	f000 fb76 	bl	80016b4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	4013      	ands	r3, r2
 8000fd0:	d100      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x20>
 8000fd2:	e08e      	b.n	80010f2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000fd4:	4bc5      	ldr	r3, [pc, #788]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	220c      	movs	r2, #12
 8000fda:	4013      	ands	r3, r2
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d00e      	beq.n	8000ffe <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fe0:	4bc2      	ldr	r3, [pc, #776]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	220c      	movs	r2, #12
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	2b08      	cmp	r3, #8
 8000fea:	d117      	bne.n	800101c <HAL_RCC_OscConfig+0x68>
 8000fec:	4bbf      	ldr	r3, [pc, #764]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	23c0      	movs	r3, #192	; 0xc0
 8000ff2:	025b      	lsls	r3, r3, #9
 8000ff4:	401a      	ands	r2, r3
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	025b      	lsls	r3, r3, #9
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d10e      	bne.n	800101c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ffe:	4bbb      	ldr	r3, [pc, #748]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	2380      	movs	r3, #128	; 0x80
 8001004:	029b      	lsls	r3, r3, #10
 8001006:	4013      	ands	r3, r2
 8001008:	d100      	bne.n	800100c <HAL_RCC_OscConfig+0x58>
 800100a:	e071      	b.n	80010f0 <HAL_RCC_OscConfig+0x13c>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d000      	beq.n	8001016 <HAL_RCC_OscConfig+0x62>
 8001014:	e06c      	b.n	80010f0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	f000 fb4c 	bl	80016b4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d107      	bne.n	8001034 <HAL_RCC_OscConfig+0x80>
 8001024:	4bb1      	ldr	r3, [pc, #708]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4bb0      	ldr	r3, [pc, #704]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 800102a:	2180      	movs	r1, #128	; 0x80
 800102c:	0249      	lsls	r1, r1, #9
 800102e:	430a      	orrs	r2, r1
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	e02f      	b.n	8001094 <HAL_RCC_OscConfig+0xe0>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d10c      	bne.n	8001056 <HAL_RCC_OscConfig+0xa2>
 800103c:	4bab      	ldr	r3, [pc, #684]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4baa      	ldr	r3, [pc, #680]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001042:	49ab      	ldr	r1, [pc, #684]	; (80012f0 <HAL_RCC_OscConfig+0x33c>)
 8001044:	400a      	ands	r2, r1
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	4ba8      	ldr	r3, [pc, #672]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4ba7      	ldr	r3, [pc, #668]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 800104e:	49a9      	ldr	r1, [pc, #676]	; (80012f4 <HAL_RCC_OscConfig+0x340>)
 8001050:	400a      	ands	r2, r1
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	e01e      	b.n	8001094 <HAL_RCC_OscConfig+0xe0>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2b05      	cmp	r3, #5
 800105c:	d10e      	bne.n	800107c <HAL_RCC_OscConfig+0xc8>
 800105e:	4ba3      	ldr	r3, [pc, #652]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	4ba2      	ldr	r3, [pc, #648]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001064:	2180      	movs	r1, #128	; 0x80
 8001066:	02c9      	lsls	r1, r1, #11
 8001068:	430a      	orrs	r2, r1
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	4b9f      	ldr	r3, [pc, #636]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b9e      	ldr	r3, [pc, #632]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001072:	2180      	movs	r1, #128	; 0x80
 8001074:	0249      	lsls	r1, r1, #9
 8001076:	430a      	orrs	r2, r1
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	e00b      	b.n	8001094 <HAL_RCC_OscConfig+0xe0>
 800107c:	4b9b      	ldr	r3, [pc, #620]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4b9a      	ldr	r3, [pc, #616]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001082:	499b      	ldr	r1, [pc, #620]	; (80012f0 <HAL_RCC_OscConfig+0x33c>)
 8001084:	400a      	ands	r2, r1
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	4b98      	ldr	r3, [pc, #608]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b97      	ldr	r3, [pc, #604]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 800108e:	4999      	ldr	r1, [pc, #612]	; (80012f4 <HAL_RCC_OscConfig+0x340>)
 8001090:	400a      	ands	r2, r1
 8001092:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d014      	beq.n	80010c6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109c:	f7ff fba4 	bl	80007e8 <HAL_GetTick>
 80010a0:	0003      	movs	r3, r0
 80010a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a4:	e008      	b.n	80010b8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010a6:	f7ff fb9f 	bl	80007e8 <HAL_GetTick>
 80010aa:	0002      	movs	r2, r0
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	2b64      	cmp	r3, #100	; 0x64
 80010b2:	d901      	bls.n	80010b8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e2fd      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b8:	4b8c      	ldr	r3, [pc, #560]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	029b      	lsls	r3, r3, #10
 80010c0:	4013      	ands	r3, r2
 80010c2:	d0f0      	beq.n	80010a6 <HAL_RCC_OscConfig+0xf2>
 80010c4:	e015      	b.n	80010f2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c6:	f7ff fb8f 	bl	80007e8 <HAL_GetTick>
 80010ca:	0003      	movs	r3, r0
 80010cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ce:	e008      	b.n	80010e2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d0:	f7ff fb8a 	bl	80007e8 <HAL_GetTick>
 80010d4:	0002      	movs	r2, r0
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b64      	cmp	r3, #100	; 0x64
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e2e8      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010e2:	4b82      	ldr	r3, [pc, #520]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	2380      	movs	r3, #128	; 0x80
 80010e8:	029b      	lsls	r3, r3, #10
 80010ea:	4013      	ands	r3, r2
 80010ec:	d1f0      	bne.n	80010d0 <HAL_RCC_OscConfig+0x11c>
 80010ee:	e000      	b.n	80010f2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2202      	movs	r2, #2
 80010f8:	4013      	ands	r3, r2
 80010fa:	d100      	bne.n	80010fe <HAL_RCC_OscConfig+0x14a>
 80010fc:	e06c      	b.n	80011d8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010fe:	4b7b      	ldr	r3, [pc, #492]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	220c      	movs	r2, #12
 8001104:	4013      	ands	r3, r2
 8001106:	d00e      	beq.n	8001126 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001108:	4b78      	ldr	r3, [pc, #480]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	220c      	movs	r2, #12
 800110e:	4013      	ands	r3, r2
 8001110:	2b08      	cmp	r3, #8
 8001112:	d11f      	bne.n	8001154 <HAL_RCC_OscConfig+0x1a0>
 8001114:	4b75      	ldr	r3, [pc, #468]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001116:	685a      	ldr	r2, [r3, #4]
 8001118:	23c0      	movs	r3, #192	; 0xc0
 800111a:	025b      	lsls	r3, r3, #9
 800111c:	401a      	ands	r2, r3
 800111e:	2380      	movs	r3, #128	; 0x80
 8001120:	021b      	lsls	r3, r3, #8
 8001122:	429a      	cmp	r2, r3
 8001124:	d116      	bne.n	8001154 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001126:	4b71      	ldr	r3, [pc, #452]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2202      	movs	r2, #2
 800112c:	4013      	ands	r3, r2
 800112e:	d005      	beq.n	800113c <HAL_RCC_OscConfig+0x188>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d001      	beq.n	800113c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e2bb      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800113c:	4b6b      	ldr	r3, [pc, #428]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	22f8      	movs	r2, #248	; 0xf8
 8001142:	4393      	bics	r3, r2
 8001144:	0019      	movs	r1, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	00da      	lsls	r2, r3, #3
 800114c:	4b67      	ldr	r3, [pc, #412]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 800114e:	430a      	orrs	r2, r1
 8001150:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001152:	e041      	b.n	80011d8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d024      	beq.n	80011a6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800115c:	4b63      	ldr	r3, [pc, #396]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b62      	ldr	r3, [pc, #392]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001162:	2101      	movs	r1, #1
 8001164:	430a      	orrs	r2, r1
 8001166:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001168:	f7ff fb3e 	bl	80007e8 <HAL_GetTick>
 800116c:	0003      	movs	r3, r0
 800116e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001170:	e008      	b.n	8001184 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001172:	f7ff fb39 	bl	80007e8 <HAL_GetTick>
 8001176:	0002      	movs	r2, r0
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d901      	bls.n	8001184 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e297      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001184:	4b59      	ldr	r3, [pc, #356]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2202      	movs	r2, #2
 800118a:	4013      	ands	r3, r2
 800118c:	d0f1      	beq.n	8001172 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118e:	4b57      	ldr	r3, [pc, #348]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	22f8      	movs	r2, #248	; 0xf8
 8001194:	4393      	bics	r3, r2
 8001196:	0019      	movs	r1, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	691b      	ldr	r3, [r3, #16]
 800119c:	00da      	lsls	r2, r3, #3
 800119e:	4b53      	ldr	r3, [pc, #332]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 80011a0:	430a      	orrs	r2, r1
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	e018      	b.n	80011d8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011a6:	4b51      	ldr	r3, [pc, #324]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	4b50      	ldr	r3, [pc, #320]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 80011ac:	2101      	movs	r1, #1
 80011ae:	438a      	bics	r2, r1
 80011b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b2:	f7ff fb19 	bl	80007e8 <HAL_GetTick>
 80011b6:	0003      	movs	r3, r0
 80011b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011bc:	f7ff fb14 	bl	80007e8 <HAL_GetTick>
 80011c0:	0002      	movs	r2, r0
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e272      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ce:	4b47      	ldr	r3, [pc, #284]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2202      	movs	r2, #2
 80011d4:	4013      	ands	r3, r2
 80011d6:	d1f1      	bne.n	80011bc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2208      	movs	r2, #8
 80011de:	4013      	ands	r3, r2
 80011e0:	d036      	beq.n	8001250 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d019      	beq.n	800121e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ea:	4b40      	ldr	r3, [pc, #256]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 80011ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011ee:	4b3f      	ldr	r3, [pc, #252]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 80011f0:	2101      	movs	r1, #1
 80011f2:	430a      	orrs	r2, r1
 80011f4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f6:	f7ff faf7 	bl	80007e8 <HAL_GetTick>
 80011fa:	0003      	movs	r3, r0
 80011fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001200:	f7ff faf2 	bl	80007e8 <HAL_GetTick>
 8001204:	0002      	movs	r2, r0
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e250      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001212:	4b36      	ldr	r3, [pc, #216]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001216:	2202      	movs	r2, #2
 8001218:	4013      	ands	r3, r2
 800121a:	d0f1      	beq.n	8001200 <HAL_RCC_OscConfig+0x24c>
 800121c:	e018      	b.n	8001250 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800121e:	4b33      	ldr	r3, [pc, #204]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001220:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001222:	4b32      	ldr	r3, [pc, #200]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001224:	2101      	movs	r1, #1
 8001226:	438a      	bics	r2, r1
 8001228:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800122a:	f7ff fadd 	bl	80007e8 <HAL_GetTick>
 800122e:	0003      	movs	r3, r0
 8001230:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001234:	f7ff fad8 	bl	80007e8 <HAL_GetTick>
 8001238:	0002      	movs	r2, r0
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e236      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001246:	4b29      	ldr	r3, [pc, #164]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124a:	2202      	movs	r2, #2
 800124c:	4013      	ands	r3, r2
 800124e:	d1f1      	bne.n	8001234 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2204      	movs	r2, #4
 8001256:	4013      	ands	r3, r2
 8001258:	d100      	bne.n	800125c <HAL_RCC_OscConfig+0x2a8>
 800125a:	e0b5      	b.n	80013c8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800125c:	231f      	movs	r3, #31
 800125e:	18fb      	adds	r3, r7, r3
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001264:	4b21      	ldr	r3, [pc, #132]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001266:	69da      	ldr	r2, [r3, #28]
 8001268:	2380      	movs	r3, #128	; 0x80
 800126a:	055b      	lsls	r3, r3, #21
 800126c:	4013      	ands	r3, r2
 800126e:	d111      	bne.n	8001294 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001270:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001272:	69da      	ldr	r2, [r3, #28]
 8001274:	4b1d      	ldr	r3, [pc, #116]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001276:	2180      	movs	r1, #128	; 0x80
 8001278:	0549      	lsls	r1, r1, #21
 800127a:	430a      	orrs	r2, r1
 800127c:	61da      	str	r2, [r3, #28]
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001280:	69da      	ldr	r2, [r3, #28]
 8001282:	2380      	movs	r3, #128	; 0x80
 8001284:	055b      	lsls	r3, r3, #21
 8001286:	4013      	ands	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800128c:	231f      	movs	r3, #31
 800128e:	18fb      	adds	r3, r7, r3
 8001290:	2201      	movs	r2, #1
 8001292:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001294:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <HAL_RCC_OscConfig+0x344>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	2380      	movs	r3, #128	; 0x80
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	4013      	ands	r3, r2
 800129e:	d11a      	bne.n	80012d6 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012a0:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <HAL_RCC_OscConfig+0x344>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <HAL_RCC_OscConfig+0x344>)
 80012a6:	2180      	movs	r1, #128	; 0x80
 80012a8:	0049      	lsls	r1, r1, #1
 80012aa:	430a      	orrs	r2, r1
 80012ac:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012ae:	f7ff fa9b 	bl	80007e8 <HAL_GetTick>
 80012b2:	0003      	movs	r3, r0
 80012b4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b6:	e008      	b.n	80012ca <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012b8:	f7ff fa96 	bl	80007e8 <HAL_GetTick>
 80012bc:	0002      	movs	r2, r0
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b64      	cmp	r3, #100	; 0x64
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e1f4      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ca:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <HAL_RCC_OscConfig+0x344>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	2380      	movs	r3, #128	; 0x80
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	4013      	ands	r3, r2
 80012d4:	d0f0      	beq.n	80012b8 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d10e      	bne.n	80012fc <HAL_RCC_OscConfig+0x348>
 80012de:	4b03      	ldr	r3, [pc, #12]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 80012e0:	6a1a      	ldr	r2, [r3, #32]
 80012e2:	4b02      	ldr	r3, [pc, #8]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 80012e4:	2101      	movs	r1, #1
 80012e6:	430a      	orrs	r2, r1
 80012e8:	621a      	str	r2, [r3, #32]
 80012ea:	e035      	b.n	8001358 <HAL_RCC_OscConfig+0x3a4>
 80012ec:	40021000 	.word	0x40021000
 80012f0:	fffeffff 	.word	0xfffeffff
 80012f4:	fffbffff 	.word	0xfffbffff
 80012f8:	40007000 	.word	0x40007000
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d10c      	bne.n	800131e <HAL_RCC_OscConfig+0x36a>
 8001304:	4bca      	ldr	r3, [pc, #808]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001306:	6a1a      	ldr	r2, [r3, #32]
 8001308:	4bc9      	ldr	r3, [pc, #804]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800130a:	2101      	movs	r1, #1
 800130c:	438a      	bics	r2, r1
 800130e:	621a      	str	r2, [r3, #32]
 8001310:	4bc7      	ldr	r3, [pc, #796]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001312:	6a1a      	ldr	r2, [r3, #32]
 8001314:	4bc6      	ldr	r3, [pc, #792]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001316:	2104      	movs	r1, #4
 8001318:	438a      	bics	r2, r1
 800131a:	621a      	str	r2, [r3, #32]
 800131c:	e01c      	b.n	8001358 <HAL_RCC_OscConfig+0x3a4>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	2b05      	cmp	r3, #5
 8001324:	d10c      	bne.n	8001340 <HAL_RCC_OscConfig+0x38c>
 8001326:	4bc2      	ldr	r3, [pc, #776]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001328:	6a1a      	ldr	r2, [r3, #32]
 800132a:	4bc1      	ldr	r3, [pc, #772]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800132c:	2104      	movs	r1, #4
 800132e:	430a      	orrs	r2, r1
 8001330:	621a      	str	r2, [r3, #32]
 8001332:	4bbf      	ldr	r3, [pc, #764]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001334:	6a1a      	ldr	r2, [r3, #32]
 8001336:	4bbe      	ldr	r3, [pc, #760]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001338:	2101      	movs	r1, #1
 800133a:	430a      	orrs	r2, r1
 800133c:	621a      	str	r2, [r3, #32]
 800133e:	e00b      	b.n	8001358 <HAL_RCC_OscConfig+0x3a4>
 8001340:	4bbb      	ldr	r3, [pc, #748]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001342:	6a1a      	ldr	r2, [r3, #32]
 8001344:	4bba      	ldr	r3, [pc, #744]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001346:	2101      	movs	r1, #1
 8001348:	438a      	bics	r2, r1
 800134a:	621a      	str	r2, [r3, #32]
 800134c:	4bb8      	ldr	r3, [pc, #736]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800134e:	6a1a      	ldr	r2, [r3, #32]
 8001350:	4bb7      	ldr	r3, [pc, #732]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001352:	2104      	movs	r1, #4
 8001354:	438a      	bics	r2, r1
 8001356:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d014      	beq.n	800138a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001360:	f7ff fa42 	bl	80007e8 <HAL_GetTick>
 8001364:	0003      	movs	r3, r0
 8001366:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001368:	e009      	b.n	800137e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800136a:	f7ff fa3d 	bl	80007e8 <HAL_GetTick>
 800136e:	0002      	movs	r2, r0
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	4aaf      	ldr	r2, [pc, #700]	; (8001634 <HAL_RCC_OscConfig+0x680>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e19a      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800137e:	4bac      	ldr	r3, [pc, #688]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	2202      	movs	r2, #2
 8001384:	4013      	ands	r3, r2
 8001386:	d0f0      	beq.n	800136a <HAL_RCC_OscConfig+0x3b6>
 8001388:	e013      	b.n	80013b2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138a:	f7ff fa2d 	bl	80007e8 <HAL_GetTick>
 800138e:	0003      	movs	r3, r0
 8001390:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001392:	e009      	b.n	80013a8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001394:	f7ff fa28 	bl	80007e8 <HAL_GetTick>
 8001398:	0002      	movs	r2, r0
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	4aa5      	ldr	r2, [pc, #660]	; (8001634 <HAL_RCC_OscConfig+0x680>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e185      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013a8:	4ba1      	ldr	r3, [pc, #644]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	2202      	movs	r2, #2
 80013ae:	4013      	ands	r3, r2
 80013b0:	d1f0      	bne.n	8001394 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013b2:	231f      	movs	r3, #31
 80013b4:	18fb      	adds	r3, r7, r3
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d105      	bne.n	80013c8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013bc:	4b9c      	ldr	r3, [pc, #624]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80013be:	69da      	ldr	r2, [r3, #28]
 80013c0:	4b9b      	ldr	r3, [pc, #620]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80013c2:	499d      	ldr	r1, [pc, #628]	; (8001638 <HAL_RCC_OscConfig+0x684>)
 80013c4:	400a      	ands	r2, r1
 80013c6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2210      	movs	r2, #16
 80013ce:	4013      	ands	r3, r2
 80013d0:	d063      	beq.n	800149a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d12a      	bne.n	8001430 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80013da:	4b95      	ldr	r3, [pc, #596]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80013dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013de:	4b94      	ldr	r3, [pc, #592]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80013e0:	2104      	movs	r1, #4
 80013e2:	430a      	orrs	r2, r1
 80013e4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80013e6:	4b92      	ldr	r3, [pc, #584]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80013e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013ea:	4b91      	ldr	r3, [pc, #580]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80013ec:	2101      	movs	r1, #1
 80013ee:	430a      	orrs	r2, r1
 80013f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f2:	f7ff f9f9 	bl	80007e8 <HAL_GetTick>
 80013f6:	0003      	movs	r3, r0
 80013f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013fc:	f7ff f9f4 	bl	80007e8 <HAL_GetTick>
 8001400:	0002      	movs	r2, r0
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e152      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800140e:	4b88      	ldr	r3, [pc, #544]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001412:	2202      	movs	r2, #2
 8001414:	4013      	ands	r3, r2
 8001416:	d0f1      	beq.n	80013fc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001418:	4b85      	ldr	r3, [pc, #532]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800141a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800141c:	22f8      	movs	r2, #248	; 0xf8
 800141e:	4393      	bics	r3, r2
 8001420:	0019      	movs	r1, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	00da      	lsls	r2, r3, #3
 8001428:	4b81      	ldr	r3, [pc, #516]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800142a:	430a      	orrs	r2, r1
 800142c:	635a      	str	r2, [r3, #52]	; 0x34
 800142e:	e034      	b.n	800149a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	3305      	adds	r3, #5
 8001436:	d111      	bne.n	800145c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001438:	4b7d      	ldr	r3, [pc, #500]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800143a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800143c:	4b7c      	ldr	r3, [pc, #496]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800143e:	2104      	movs	r1, #4
 8001440:	438a      	bics	r2, r1
 8001442:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001444:	4b7a      	ldr	r3, [pc, #488]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001448:	22f8      	movs	r2, #248	; 0xf8
 800144a:	4393      	bics	r3, r2
 800144c:	0019      	movs	r1, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	00da      	lsls	r2, r3, #3
 8001454:	4b76      	ldr	r3, [pc, #472]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001456:	430a      	orrs	r2, r1
 8001458:	635a      	str	r2, [r3, #52]	; 0x34
 800145a:	e01e      	b.n	800149a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800145c:	4b74      	ldr	r3, [pc, #464]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800145e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001460:	4b73      	ldr	r3, [pc, #460]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001462:	2104      	movs	r1, #4
 8001464:	430a      	orrs	r2, r1
 8001466:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001468:	4b71      	ldr	r3, [pc, #452]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800146a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800146c:	4b70      	ldr	r3, [pc, #448]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800146e:	2101      	movs	r1, #1
 8001470:	438a      	bics	r2, r1
 8001472:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001474:	f7ff f9b8 	bl	80007e8 <HAL_GetTick>
 8001478:	0003      	movs	r3, r0
 800147a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800147e:	f7ff f9b3 	bl	80007e8 <HAL_GetTick>
 8001482:	0002      	movs	r2, r0
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e111      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001490:	4b67      	ldr	r3, [pc, #412]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001494:	2202      	movs	r2, #2
 8001496:	4013      	ands	r3, r2
 8001498:	d1f1      	bne.n	800147e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2220      	movs	r2, #32
 80014a0:	4013      	ands	r3, r2
 80014a2:	d05c      	beq.n	800155e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80014a4:	4b62      	ldr	r3, [pc, #392]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	220c      	movs	r2, #12
 80014aa:	4013      	ands	r3, r2
 80014ac:	2b0c      	cmp	r3, #12
 80014ae:	d00e      	beq.n	80014ce <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80014b0:	4b5f      	ldr	r3, [pc, #380]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	220c      	movs	r2, #12
 80014b6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80014b8:	2b08      	cmp	r3, #8
 80014ba:	d114      	bne.n	80014e6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80014bc:	4b5c      	ldr	r3, [pc, #368]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	23c0      	movs	r3, #192	; 0xc0
 80014c2:	025b      	lsls	r3, r3, #9
 80014c4:	401a      	ands	r2, r3
 80014c6:	23c0      	movs	r3, #192	; 0xc0
 80014c8:	025b      	lsls	r3, r3, #9
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d10b      	bne.n	80014e6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80014ce:	4b58      	ldr	r3, [pc, #352]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80014d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014d2:	2380      	movs	r3, #128	; 0x80
 80014d4:	025b      	lsls	r3, r3, #9
 80014d6:	4013      	ands	r3, r2
 80014d8:	d040      	beq.n	800155c <HAL_RCC_OscConfig+0x5a8>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a1b      	ldr	r3, [r3, #32]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d03c      	beq.n	800155c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e0e6      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a1b      	ldr	r3, [r3, #32]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d01b      	beq.n	8001526 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80014ee:	4b50      	ldr	r3, [pc, #320]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80014f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014f2:	4b4f      	ldr	r3, [pc, #316]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80014f4:	2180      	movs	r1, #128	; 0x80
 80014f6:	0249      	lsls	r1, r1, #9
 80014f8:	430a      	orrs	r2, r1
 80014fa:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff f974 	bl	80007e8 <HAL_GetTick>
 8001500:	0003      	movs	r3, r0
 8001502:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001506:	f7ff f96f 	bl	80007e8 <HAL_GetTick>
 800150a:	0002      	movs	r2, r0
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e0cd      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001518:	4b45      	ldr	r3, [pc, #276]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800151a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800151c:	2380      	movs	r3, #128	; 0x80
 800151e:	025b      	lsls	r3, r3, #9
 8001520:	4013      	ands	r3, r2
 8001522:	d0f0      	beq.n	8001506 <HAL_RCC_OscConfig+0x552>
 8001524:	e01b      	b.n	800155e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001526:	4b42      	ldr	r3, [pc, #264]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001528:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800152a:	4b41      	ldr	r3, [pc, #260]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800152c:	4943      	ldr	r1, [pc, #268]	; (800163c <HAL_RCC_OscConfig+0x688>)
 800152e:	400a      	ands	r2, r1
 8001530:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001532:	f7ff f959 	bl	80007e8 <HAL_GetTick>
 8001536:	0003      	movs	r3, r0
 8001538:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800153c:	f7ff f954 	bl	80007e8 <HAL_GetTick>
 8001540:	0002      	movs	r2, r0
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e0b2      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800154e:	4b38      	ldr	r3, [pc, #224]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001550:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001552:	2380      	movs	r3, #128	; 0x80
 8001554:	025b      	lsls	r3, r3, #9
 8001556:	4013      	ands	r3, r2
 8001558:	d1f0      	bne.n	800153c <HAL_RCC_OscConfig+0x588>
 800155a:	e000      	b.n	800155e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800155c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	2b00      	cmp	r3, #0
 8001564:	d100      	bne.n	8001568 <HAL_RCC_OscConfig+0x5b4>
 8001566:	e0a4      	b.n	80016b2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001568:	4b31      	ldr	r3, [pc, #196]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	220c      	movs	r2, #12
 800156e:	4013      	ands	r3, r2
 8001570:	2b08      	cmp	r3, #8
 8001572:	d100      	bne.n	8001576 <HAL_RCC_OscConfig+0x5c2>
 8001574:	e078      	b.n	8001668 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157a:	2b02      	cmp	r3, #2
 800157c:	d14c      	bne.n	8001618 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800157e:	4b2c      	ldr	r3, [pc, #176]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	4b2b      	ldr	r3, [pc, #172]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001584:	492e      	ldr	r1, [pc, #184]	; (8001640 <HAL_RCC_OscConfig+0x68c>)
 8001586:	400a      	ands	r2, r1
 8001588:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158a:	f7ff f92d 	bl	80007e8 <HAL_GetTick>
 800158e:	0003      	movs	r3, r0
 8001590:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001594:	f7ff f928 	bl	80007e8 <HAL_GetTick>
 8001598:	0002      	movs	r2, r0
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e086      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015a6:	4b22      	ldr	r3, [pc, #136]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	2380      	movs	r3, #128	; 0x80
 80015ac:	049b      	lsls	r3, r3, #18
 80015ae:	4013      	ands	r3, r2
 80015b0:	d1f0      	bne.n	8001594 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015b2:	4b1f      	ldr	r3, [pc, #124]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80015b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b6:	220f      	movs	r2, #15
 80015b8:	4393      	bics	r3, r2
 80015ba:	0019      	movs	r1, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015c0:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80015c2:	430a      	orrs	r2, r1
 80015c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80015c6:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	4a1e      	ldr	r2, [pc, #120]	; (8001644 <HAL_RCC_OscConfig+0x690>)
 80015cc:	4013      	ands	r3, r2
 80015ce:	0019      	movs	r1, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d8:	431a      	orrs	r2, r3
 80015da:	4b15      	ldr	r3, [pc, #84]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80015dc:	430a      	orrs	r2, r1
 80015de:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015e0:	4b13      	ldr	r3, [pc, #76]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4b12      	ldr	r3, [pc, #72]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80015e6:	2180      	movs	r1, #128	; 0x80
 80015e8:	0449      	lsls	r1, r1, #17
 80015ea:	430a      	orrs	r2, r1
 80015ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ee:	f7ff f8fb 	bl	80007e8 <HAL_GetTick>
 80015f2:	0003      	movs	r3, r0
 80015f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f8:	f7ff f8f6 	bl	80007e8 <HAL_GetTick>
 80015fc:	0002      	movs	r2, r0
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e054      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	049b      	lsls	r3, r3, #18
 8001612:	4013      	ands	r3, r2
 8001614:	d0f0      	beq.n	80015f8 <HAL_RCC_OscConfig+0x644>
 8001616:	e04c      	b.n	80016b2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b04      	ldr	r3, [pc, #16]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800161e:	4908      	ldr	r1, [pc, #32]	; (8001640 <HAL_RCC_OscConfig+0x68c>)
 8001620:	400a      	ands	r2, r1
 8001622:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001624:	f7ff f8e0 	bl	80007e8 <HAL_GetTick>
 8001628:	0003      	movs	r3, r0
 800162a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800162c:	e015      	b.n	800165a <HAL_RCC_OscConfig+0x6a6>
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	40021000 	.word	0x40021000
 8001634:	00001388 	.word	0x00001388
 8001638:	efffffff 	.word	0xefffffff
 800163c:	fffeffff 	.word	0xfffeffff
 8001640:	feffffff 	.word	0xfeffffff
 8001644:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001648:	f7ff f8ce 	bl	80007e8 <HAL_GetTick>
 800164c:	0002      	movs	r2, r0
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e02c      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800165a:	4b18      	ldr	r3, [pc, #96]	; (80016bc <HAL_RCC_OscConfig+0x708>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	2380      	movs	r3, #128	; 0x80
 8001660:	049b      	lsls	r3, r3, #18
 8001662:	4013      	ands	r3, r2
 8001664:	d1f0      	bne.n	8001648 <HAL_RCC_OscConfig+0x694>
 8001666:	e024      	b.n	80016b2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166c:	2b01      	cmp	r3, #1
 800166e:	d101      	bne.n	8001674 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e01f      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <HAL_RCC_OscConfig+0x708>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <HAL_RCC_OscConfig+0x708>)
 800167c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001680:	697a      	ldr	r2, [r7, #20]
 8001682:	23c0      	movs	r3, #192	; 0xc0
 8001684:	025b      	lsls	r3, r3, #9
 8001686:	401a      	ands	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168c:	429a      	cmp	r2, r3
 800168e:	d10e      	bne.n	80016ae <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	220f      	movs	r2, #15
 8001694:	401a      	ands	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800169a:	429a      	cmp	r2, r3
 800169c:	d107      	bne.n	80016ae <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800169e:	697a      	ldr	r2, [r7, #20]
 80016a0:	23f0      	movs	r3, #240	; 0xf0
 80016a2:	039b      	lsls	r3, r3, #14
 80016a4:	401a      	ands	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d001      	beq.n	80016b2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	0018      	movs	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	b008      	add	sp, #32
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40021000 	.word	0x40021000

080016c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0bf      	b.n	8001854 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016d4:	4b61      	ldr	r3, [pc, #388]	; (800185c <HAL_RCC_ClockConfig+0x19c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2201      	movs	r2, #1
 80016da:	4013      	ands	r3, r2
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d911      	bls.n	8001706 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e2:	4b5e      	ldr	r3, [pc, #376]	; (800185c <HAL_RCC_ClockConfig+0x19c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2201      	movs	r2, #1
 80016e8:	4393      	bics	r3, r2
 80016ea:	0019      	movs	r1, r3
 80016ec:	4b5b      	ldr	r3, [pc, #364]	; (800185c <HAL_RCC_ClockConfig+0x19c>)
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f4:	4b59      	ldr	r3, [pc, #356]	; (800185c <HAL_RCC_ClockConfig+0x19c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2201      	movs	r2, #1
 80016fa:	4013      	ands	r3, r2
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d001      	beq.n	8001706 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e0a6      	b.n	8001854 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2202      	movs	r2, #2
 800170c:	4013      	ands	r3, r2
 800170e:	d015      	beq.n	800173c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2204      	movs	r2, #4
 8001716:	4013      	ands	r3, r2
 8001718:	d006      	beq.n	8001728 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800171a:	4b51      	ldr	r3, [pc, #324]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	4b50      	ldr	r3, [pc, #320]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 8001720:	21e0      	movs	r1, #224	; 0xe0
 8001722:	00c9      	lsls	r1, r1, #3
 8001724:	430a      	orrs	r2, r1
 8001726:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001728:	4b4d      	ldr	r3, [pc, #308]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	22f0      	movs	r2, #240	; 0xf0
 800172e:	4393      	bics	r3, r2
 8001730:	0019      	movs	r1, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689a      	ldr	r2, [r3, #8]
 8001736:	4b4a      	ldr	r3, [pc, #296]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 8001738:	430a      	orrs	r2, r1
 800173a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2201      	movs	r2, #1
 8001742:	4013      	ands	r3, r2
 8001744:	d04c      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d107      	bne.n	800175e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174e:	4b44      	ldr	r3, [pc, #272]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	2380      	movs	r3, #128	; 0x80
 8001754:	029b      	lsls	r3, r3, #10
 8001756:	4013      	ands	r3, r2
 8001758:	d120      	bne.n	800179c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e07a      	b.n	8001854 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d107      	bne.n	8001776 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001766:	4b3e      	ldr	r3, [pc, #248]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	2380      	movs	r3, #128	; 0x80
 800176c:	049b      	lsls	r3, r3, #18
 800176e:	4013      	ands	r3, r2
 8001770:	d114      	bne.n	800179c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e06e      	b.n	8001854 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b03      	cmp	r3, #3
 800177c:	d107      	bne.n	800178e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800177e:	4b38      	ldr	r3, [pc, #224]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 8001780:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001782:	2380      	movs	r3, #128	; 0x80
 8001784:	025b      	lsls	r3, r3, #9
 8001786:	4013      	ands	r3, r2
 8001788:	d108      	bne.n	800179c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e062      	b.n	8001854 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178e:	4b34      	ldr	r3, [pc, #208]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2202      	movs	r2, #2
 8001794:	4013      	ands	r3, r2
 8001796:	d101      	bne.n	800179c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e05b      	b.n	8001854 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800179c:	4b30      	ldr	r3, [pc, #192]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2203      	movs	r2, #3
 80017a2:	4393      	bics	r3, r2
 80017a4:	0019      	movs	r1, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	4b2d      	ldr	r3, [pc, #180]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 80017ac:	430a      	orrs	r2, r1
 80017ae:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017b0:	f7ff f81a 	bl	80007e8 <HAL_GetTick>
 80017b4:	0003      	movs	r3, r0
 80017b6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b8:	e009      	b.n	80017ce <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ba:	f7ff f815 	bl	80007e8 <HAL_GetTick>
 80017be:	0002      	movs	r2, r0
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	4a27      	ldr	r2, [pc, #156]	; (8001864 <HAL_RCC_ClockConfig+0x1a4>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e042      	b.n	8001854 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ce:	4b24      	ldr	r3, [pc, #144]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	220c      	movs	r2, #12
 80017d4:	401a      	ands	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	429a      	cmp	r2, r3
 80017de:	d1ec      	bne.n	80017ba <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017e0:	4b1e      	ldr	r3, [pc, #120]	; (800185c <HAL_RCC_ClockConfig+0x19c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2201      	movs	r2, #1
 80017e6:	4013      	ands	r3, r2
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d211      	bcs.n	8001812 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ee:	4b1b      	ldr	r3, [pc, #108]	; (800185c <HAL_RCC_ClockConfig+0x19c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2201      	movs	r2, #1
 80017f4:	4393      	bics	r3, r2
 80017f6:	0019      	movs	r1, r3
 80017f8:	4b18      	ldr	r3, [pc, #96]	; (800185c <HAL_RCC_ClockConfig+0x19c>)
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001800:	4b16      	ldr	r3, [pc, #88]	; (800185c <HAL_RCC_ClockConfig+0x19c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2201      	movs	r2, #1
 8001806:	4013      	ands	r3, r2
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d001      	beq.n	8001812 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e020      	b.n	8001854 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2204      	movs	r2, #4
 8001818:	4013      	ands	r3, r2
 800181a:	d009      	beq.n	8001830 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800181c:	4b10      	ldr	r3, [pc, #64]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	4a11      	ldr	r2, [pc, #68]	; (8001868 <HAL_RCC_ClockConfig+0x1a8>)
 8001822:	4013      	ands	r3, r2
 8001824:	0019      	movs	r1, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68da      	ldr	r2, [r3, #12]
 800182a:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 800182c:	430a      	orrs	r2, r1
 800182e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001830:	f000 f820 	bl	8001874 <HAL_RCC_GetSysClockFreq>
 8001834:	0001      	movs	r1, r0
 8001836:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	091b      	lsrs	r3, r3, #4
 800183c:	220f      	movs	r2, #15
 800183e:	4013      	ands	r3, r2
 8001840:	4a0a      	ldr	r2, [pc, #40]	; (800186c <HAL_RCC_ClockConfig+0x1ac>)
 8001842:	5cd3      	ldrb	r3, [r2, r3]
 8001844:	000a      	movs	r2, r1
 8001846:	40da      	lsrs	r2, r3
 8001848:	4b09      	ldr	r3, [pc, #36]	; (8001870 <HAL_RCC_ClockConfig+0x1b0>)
 800184a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800184c:	2000      	movs	r0, #0
 800184e:	f7fe ff85 	bl	800075c <HAL_InitTick>
  
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	0018      	movs	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	b004      	add	sp, #16
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40022000 	.word	0x40022000
 8001860:	40021000 	.word	0x40021000
 8001864:	00001388 	.word	0x00001388
 8001868:	fffff8ff 	.word	0xfffff8ff
 800186c:	080026d0 	.word	0x080026d0
 8001870:	20000004 	.word	0x20000004

08001874 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001874:	b590      	push	{r4, r7, lr}
 8001876:	b08f      	sub	sp, #60	; 0x3c
 8001878:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800187a:	2314      	movs	r3, #20
 800187c:	18fb      	adds	r3, r7, r3
 800187e:	4a37      	ldr	r2, [pc, #220]	; (800195c <HAL_RCC_GetSysClockFreq+0xe8>)
 8001880:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001882:	c313      	stmia	r3!, {r0, r1, r4}
 8001884:	6812      	ldr	r2, [r2, #0]
 8001886:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001888:	1d3b      	adds	r3, r7, #4
 800188a:	4a35      	ldr	r2, [pc, #212]	; (8001960 <HAL_RCC_GetSysClockFreq+0xec>)
 800188c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800188e:	c313      	stmia	r3!, {r0, r1, r4}
 8001890:	6812      	ldr	r2, [r2, #0]
 8001892:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001894:	2300      	movs	r3, #0
 8001896:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001898:	2300      	movs	r3, #0
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
 800189c:	2300      	movs	r3, #0
 800189e:	637b      	str	r3, [r7, #52]	; 0x34
 80018a0:	2300      	movs	r3, #0
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80018a8:	4b2e      	ldr	r3, [pc, #184]	; (8001964 <HAL_RCC_GetSysClockFreq+0xf0>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b0:	220c      	movs	r2, #12
 80018b2:	4013      	ands	r3, r2
 80018b4:	2b08      	cmp	r3, #8
 80018b6:	d006      	beq.n	80018c6 <HAL_RCC_GetSysClockFreq+0x52>
 80018b8:	2b0c      	cmp	r3, #12
 80018ba:	d043      	beq.n	8001944 <HAL_RCC_GetSysClockFreq+0xd0>
 80018bc:	2b04      	cmp	r3, #4
 80018be:	d144      	bne.n	800194a <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018c0:	4b29      	ldr	r3, [pc, #164]	; (8001968 <HAL_RCC_GetSysClockFreq+0xf4>)
 80018c2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018c4:	e044      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80018c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c8:	0c9b      	lsrs	r3, r3, #18
 80018ca:	220f      	movs	r2, #15
 80018cc:	4013      	ands	r3, r2
 80018ce:	2214      	movs	r2, #20
 80018d0:	18ba      	adds	r2, r7, r2
 80018d2:	5cd3      	ldrb	r3, [r2, r3]
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80018d6:	4b23      	ldr	r3, [pc, #140]	; (8001964 <HAL_RCC_GetSysClockFreq+0xf0>)
 80018d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018da:	220f      	movs	r2, #15
 80018dc:	4013      	ands	r3, r2
 80018de:	1d3a      	adds	r2, r7, #4
 80018e0:	5cd3      	ldrb	r3, [r2, r3]
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80018e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018e6:	23c0      	movs	r3, #192	; 0xc0
 80018e8:	025b      	lsls	r3, r3, #9
 80018ea:	401a      	ands	r2, r3
 80018ec:	2380      	movs	r3, #128	; 0x80
 80018ee:	025b      	lsls	r3, r3, #9
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d109      	bne.n	8001908 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80018f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018f6:	481c      	ldr	r0, [pc, #112]	; (8001968 <HAL_RCC_GetSysClockFreq+0xf4>)
 80018f8:	f7fe fc06 	bl	8000108 <__udivsi3>
 80018fc:	0003      	movs	r3, r0
 80018fe:	001a      	movs	r2, r3
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	4353      	muls	r3, r2
 8001904:	637b      	str	r3, [r7, #52]	; 0x34
 8001906:	e01a      	b.n	800193e <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001908:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800190a:	23c0      	movs	r3, #192	; 0xc0
 800190c:	025b      	lsls	r3, r3, #9
 800190e:	401a      	ands	r2, r3
 8001910:	23c0      	movs	r3, #192	; 0xc0
 8001912:	025b      	lsls	r3, r3, #9
 8001914:	429a      	cmp	r2, r3
 8001916:	d109      	bne.n	800192c <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001918:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800191a:	4814      	ldr	r0, [pc, #80]	; (800196c <HAL_RCC_GetSysClockFreq+0xf8>)
 800191c:	f7fe fbf4 	bl	8000108 <__udivsi3>
 8001920:	0003      	movs	r3, r0
 8001922:	001a      	movs	r2, r3
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	4353      	muls	r3, r2
 8001928:	637b      	str	r3, [r7, #52]	; 0x34
 800192a:	e008      	b.n	800193e <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800192c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800192e:	4810      	ldr	r0, [pc, #64]	; (8001970 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001930:	f7fe fbea 	bl	8000108 <__udivsi3>
 8001934:	0003      	movs	r3, r0
 8001936:	001a      	movs	r2, r3
 8001938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193a:	4353      	muls	r3, r2
 800193c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800193e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001940:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001942:	e005      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001946:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001948:	e002      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800194a:	4b09      	ldr	r3, [pc, #36]	; (8001970 <HAL_RCC_GetSysClockFreq+0xfc>)
 800194c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800194e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001952:	0018      	movs	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	b00f      	add	sp, #60	; 0x3c
 8001958:	bd90      	pop	{r4, r7, pc}
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	080026b0 	.word	0x080026b0
 8001960:	080026c0 	.word	0x080026c0
 8001964:	40021000 	.word	0x40021000
 8001968:	00f42400 	.word	0x00f42400
 800196c:	02dc6c00 	.word	0x02dc6c00
 8001970:	007a1200 	.word	0x007a1200

08001974 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e042      	b.n	8001a0c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	223d      	movs	r2, #61	; 0x3d
 800198a:	5c9b      	ldrb	r3, [r3, r2]
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d107      	bne.n	80019a2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	223c      	movs	r2, #60	; 0x3c
 8001996:	2100      	movs	r1, #0
 8001998:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	0018      	movs	r0, r3
 800199e:	f7fe fdd3 	bl	8000548 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	223d      	movs	r2, #61	; 0x3d
 80019a6:	2102      	movs	r1, #2
 80019a8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3304      	adds	r3, #4
 80019b2:	0019      	movs	r1, r3
 80019b4:	0010      	movs	r0, r2
 80019b6:	f000 faab 	bl	8001f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2246      	movs	r2, #70	; 0x46
 80019be:	2101      	movs	r1, #1
 80019c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	223e      	movs	r2, #62	; 0x3e
 80019c6:	2101      	movs	r1, #1
 80019c8:	5499      	strb	r1, [r3, r2]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	223f      	movs	r2, #63	; 0x3f
 80019ce:	2101      	movs	r1, #1
 80019d0:	5499      	strb	r1, [r3, r2]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2240      	movs	r2, #64	; 0x40
 80019d6:	2101      	movs	r1, #1
 80019d8:	5499      	strb	r1, [r3, r2]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2241      	movs	r2, #65	; 0x41
 80019de:	2101      	movs	r1, #1
 80019e0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2242      	movs	r2, #66	; 0x42
 80019e6:	2101      	movs	r1, #1
 80019e8:	5499      	strb	r1, [r3, r2]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2243      	movs	r2, #67	; 0x43
 80019ee:	2101      	movs	r1, #1
 80019f0:	5499      	strb	r1, [r3, r2]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2244      	movs	r2, #68	; 0x44
 80019f6:	2101      	movs	r1, #1
 80019f8:	5499      	strb	r1, [r3, r2]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2245      	movs	r2, #69	; 0x45
 80019fe:	2101      	movs	r1, #1
 8001a00:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	223d      	movs	r2, #61	; 0x3d
 8001a06:	2101      	movs	r1, #1
 8001a08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	b002      	add	sp, #8
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e042      	b.n	8001aac <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	223d      	movs	r2, #61	; 0x3d
 8001a2a:	5c9b      	ldrb	r3, [r3, r2]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d107      	bne.n	8001a42 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	223c      	movs	r2, #60	; 0x3c
 8001a36:	2100      	movs	r1, #0
 8001a38:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f000 f839 	bl	8001ab4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	223d      	movs	r2, #61	; 0x3d
 8001a46:	2102      	movs	r1, #2
 8001a48:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	3304      	adds	r3, #4
 8001a52:	0019      	movs	r1, r3
 8001a54:	0010      	movs	r0, r2
 8001a56:	f000 fa5b 	bl	8001f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2246      	movs	r2, #70	; 0x46
 8001a5e:	2101      	movs	r1, #1
 8001a60:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	223e      	movs	r2, #62	; 0x3e
 8001a66:	2101      	movs	r1, #1
 8001a68:	5499      	strb	r1, [r3, r2]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	223f      	movs	r2, #63	; 0x3f
 8001a6e:	2101      	movs	r1, #1
 8001a70:	5499      	strb	r1, [r3, r2]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2240      	movs	r2, #64	; 0x40
 8001a76:	2101      	movs	r1, #1
 8001a78:	5499      	strb	r1, [r3, r2]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2241      	movs	r2, #65	; 0x41
 8001a7e:	2101      	movs	r1, #1
 8001a80:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2242      	movs	r2, #66	; 0x42
 8001a86:	2101      	movs	r1, #1
 8001a88:	5499      	strb	r1, [r3, r2]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2243      	movs	r2, #67	; 0x43
 8001a8e:	2101      	movs	r1, #1
 8001a90:	5499      	strb	r1, [r3, r2]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2244      	movs	r2, #68	; 0x44
 8001a96:	2101      	movs	r1, #1
 8001a98:	5499      	strb	r1, [r3, r2]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2245      	movs	r2, #69	; 0x45
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	223d      	movs	r2, #61	; 0x3d
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	0018      	movs	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	b002      	add	sp, #8
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001abc:	46c0      	nop			; (mov r8, r8)
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	b002      	add	sp, #8
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d108      	bne.n	8001ae6 <HAL_TIM_PWM_Start+0x22>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	223e      	movs	r2, #62	; 0x3e
 8001ad8:	5c9b      	ldrb	r3, [r3, r2]
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	3b01      	subs	r3, #1
 8001ade:	1e5a      	subs	r2, r3, #1
 8001ae0:	4193      	sbcs	r3, r2
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	e01f      	b.n	8001b26 <HAL_TIM_PWM_Start+0x62>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d108      	bne.n	8001afe <HAL_TIM_PWM_Start+0x3a>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	223f      	movs	r2, #63	; 0x3f
 8001af0:	5c9b      	ldrb	r3, [r3, r2]
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	3b01      	subs	r3, #1
 8001af6:	1e5a      	subs	r2, r3, #1
 8001af8:	4193      	sbcs	r3, r2
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	e013      	b.n	8001b26 <HAL_TIM_PWM_Start+0x62>
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	d108      	bne.n	8001b16 <HAL_TIM_PWM_Start+0x52>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2240      	movs	r2, #64	; 0x40
 8001b08:	5c9b      	ldrb	r3, [r3, r2]
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	1e5a      	subs	r2, r3, #1
 8001b10:	4193      	sbcs	r3, r2
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	e007      	b.n	8001b26 <HAL_TIM_PWM_Start+0x62>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2241      	movs	r2, #65	; 0x41
 8001b1a:	5c9b      	ldrb	r3, [r3, r2]
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	1e5a      	subs	r2, r3, #1
 8001b22:	4193      	sbcs	r3, r2
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e074      	b.n	8001c18 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d104      	bne.n	8001b3e <HAL_TIM_PWM_Start+0x7a>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	223e      	movs	r2, #62	; 0x3e
 8001b38:	2102      	movs	r1, #2
 8001b3a:	5499      	strb	r1, [r3, r2]
 8001b3c:	e013      	b.n	8001b66 <HAL_TIM_PWM_Start+0xa2>
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	d104      	bne.n	8001b4e <HAL_TIM_PWM_Start+0x8a>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	223f      	movs	r2, #63	; 0x3f
 8001b48:	2102      	movs	r1, #2
 8001b4a:	5499      	strb	r1, [r3, r2]
 8001b4c:	e00b      	b.n	8001b66 <HAL_TIM_PWM_Start+0xa2>
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d104      	bne.n	8001b5e <HAL_TIM_PWM_Start+0x9a>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2240      	movs	r2, #64	; 0x40
 8001b58:	2102      	movs	r1, #2
 8001b5a:	5499      	strb	r1, [r3, r2]
 8001b5c:	e003      	b.n	8001b66 <HAL_TIM_PWM_Start+0xa2>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2241      	movs	r2, #65	; 0x41
 8001b62:	2102      	movs	r1, #2
 8001b64:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6839      	ldr	r1, [r7, #0]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	0018      	movs	r0, r3
 8001b70:	f000 fce4 	bl	800253c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a29      	ldr	r2, [pc, #164]	; (8001c20 <HAL_TIM_PWM_Start+0x15c>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d00e      	beq.n	8001b9c <HAL_TIM_PWM_Start+0xd8>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a28      	ldr	r2, [pc, #160]	; (8001c24 <HAL_TIM_PWM_Start+0x160>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d009      	beq.n	8001b9c <HAL_TIM_PWM_Start+0xd8>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a26      	ldr	r2, [pc, #152]	; (8001c28 <HAL_TIM_PWM_Start+0x164>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d004      	beq.n	8001b9c <HAL_TIM_PWM_Start+0xd8>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a25      	ldr	r2, [pc, #148]	; (8001c2c <HAL_TIM_PWM_Start+0x168>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d101      	bne.n	8001ba0 <HAL_TIM_PWM_Start+0xdc>
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e000      	b.n	8001ba2 <HAL_TIM_PWM_Start+0xde>
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d008      	beq.n	8001bb8 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2180      	movs	r1, #128	; 0x80
 8001bb2:	0209      	lsls	r1, r1, #8
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a18      	ldr	r2, [pc, #96]	; (8001c20 <HAL_TIM_PWM_Start+0x15c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d00f      	beq.n	8001be2 <HAL_TIM_PWM_Start+0x11e>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	2380      	movs	r3, #128	; 0x80
 8001bc8:	05db      	lsls	r3, r3, #23
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d009      	beq.n	8001be2 <HAL_TIM_PWM_Start+0x11e>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a17      	ldr	r2, [pc, #92]	; (8001c30 <HAL_TIM_PWM_Start+0x16c>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d004      	beq.n	8001be2 <HAL_TIM_PWM_Start+0x11e>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a11      	ldr	r2, [pc, #68]	; (8001c24 <HAL_TIM_PWM_Start+0x160>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d111      	bne.n	8001c06 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	2207      	movs	r2, #7
 8001bea:	4013      	ands	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2b06      	cmp	r3, #6
 8001bf2:	d010      	beq.n	8001c16 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2101      	movs	r1, #1
 8001c00:	430a      	orrs	r2, r1
 8001c02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c04:	e007      	b.n	8001c16 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2101      	movs	r1, #1
 8001c12:	430a      	orrs	r2, r1
 8001c14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	0018      	movs	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	b004      	add	sp, #16
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40012c00 	.word	0x40012c00
 8001c24:	40014000 	.word	0x40014000
 8001c28:	40014400 	.word	0x40014400
 8001c2c:	40014800 	.word	0x40014800
 8001c30:	40000400 	.word	0x40000400

08001c34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	223c      	movs	r2, #60	; 0x3c
 8001c44:	5c9b      	ldrb	r3, [r3, r2]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d101      	bne.n	8001c4e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	e09c      	b.n	8001d88 <HAL_TIM_PWM_ConfigChannel+0x154>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	223c      	movs	r2, #60	; 0x3c
 8001c52:	2101      	movs	r1, #1
 8001c54:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d029      	beq.n	8001cb0 <HAL_TIM_PWM_ConfigChannel+0x7c>
 8001c5c:	d802      	bhi.n	8001c64 <HAL_TIM_PWM_ConfigChannel+0x30>
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d005      	beq.n	8001c6e <HAL_TIM_PWM_ConfigChannel+0x3a>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8001c62:	e08c      	b.n	8001d7e <HAL_TIM_PWM_ConfigChannel+0x14a>
  switch (Channel)
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	d046      	beq.n	8001cf6 <HAL_TIM_PWM_ConfigChannel+0xc2>
 8001c68:	2b0c      	cmp	r3, #12
 8001c6a:	d065      	beq.n	8001d38 <HAL_TIM_PWM_ConfigChannel+0x104>
      break;
 8001c6c:	e087      	b.n	8001d7e <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	0011      	movs	r1, r2
 8001c76:	0018      	movs	r0, r3
 8001c78:	f000 f9ca 	bl	8002010 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	699a      	ldr	r2, [r3, #24]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2108      	movs	r1, #8
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	699a      	ldr	r2, [r3, #24]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2104      	movs	r1, #4
 8001c98:	438a      	bics	r2, r1
 8001c9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6999      	ldr	r1, [r3, #24]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	691a      	ldr	r2, [r3, #16]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	430a      	orrs	r2, r1
 8001cac:	619a      	str	r2, [r3, #24]
      break;
 8001cae:	e066      	b.n	8001d7e <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68ba      	ldr	r2, [r7, #8]
 8001cb6:	0011      	movs	r1, r2
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f000 fa31 	bl	8002120 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	699a      	ldr	r2, [r3, #24]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2180      	movs	r1, #128	; 0x80
 8001cca:	0109      	lsls	r1, r1, #4
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	699a      	ldr	r2, [r3, #24]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	492d      	ldr	r1, [pc, #180]	; (8001d90 <HAL_TIM_PWM_ConfigChannel+0x15c>)
 8001cdc:	400a      	ands	r2, r1
 8001cde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6999      	ldr	r1, [r3, #24]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	021a      	lsls	r2, r3, #8
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	619a      	str	r2, [r3, #24]
      break;
 8001cf4:	e043      	b.n	8001d7e <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	0011      	movs	r1, r2
 8001cfe:	0018      	movs	r0, r3
 8001d00:	f000 fa92 	bl	8002228 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	69da      	ldr	r2, [r3, #28]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2108      	movs	r1, #8
 8001d10:	430a      	orrs	r2, r1
 8001d12:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	69da      	ldr	r2, [r3, #28]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2104      	movs	r1, #4
 8001d20:	438a      	bics	r2, r1
 8001d22:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	69d9      	ldr	r1, [r3, #28]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	691a      	ldr	r2, [r3, #16]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	61da      	str	r2, [r3, #28]
      break;
 8001d36:	e022      	b.n	8001d7e <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68ba      	ldr	r2, [r7, #8]
 8001d3e:	0011      	movs	r1, r2
 8001d40:	0018      	movs	r0, r3
 8001d42:	f000 faf7 	bl	8002334 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	69da      	ldr	r2, [r3, #28]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2180      	movs	r1, #128	; 0x80
 8001d52:	0109      	lsls	r1, r1, #4
 8001d54:	430a      	orrs	r2, r1
 8001d56:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	69da      	ldr	r2, [r3, #28]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	490b      	ldr	r1, [pc, #44]	; (8001d90 <HAL_TIM_PWM_ConfigChannel+0x15c>)
 8001d64:	400a      	ands	r2, r1
 8001d66:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	69d9      	ldr	r1, [r3, #28]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	021a      	lsls	r2, r3, #8
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	61da      	str	r2, [r3, #28]
      break;
 8001d7c:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	223c      	movs	r2, #60	; 0x3c
 8001d82:	2100      	movs	r1, #0
 8001d84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	0018      	movs	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	b004      	add	sp, #16
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	fffffbff 	.word	0xfffffbff

08001d94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	223c      	movs	r2, #60	; 0x3c
 8001da2:	5c9b      	ldrb	r3, [r3, r2]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d101      	bne.n	8001dac <HAL_TIM_ConfigClockSource+0x18>
 8001da8:	2302      	movs	r3, #2
 8001daa:	e0ab      	b.n	8001f04 <HAL_TIM_ConfigClockSource+0x170>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	223c      	movs	r2, #60	; 0x3c
 8001db0:	2101      	movs	r1, #1
 8001db2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	223d      	movs	r2, #61	; 0x3d
 8001db8:	2102      	movs	r1, #2
 8001dba:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2277      	movs	r2, #119	; 0x77
 8001dc8:	4393      	bics	r3, r2
 8001dca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4a4f      	ldr	r2, [pc, #316]	; (8001f0c <HAL_TIM_ConfigClockSource+0x178>)
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b40      	cmp	r3, #64	; 0x40
 8001de2:	d100      	bne.n	8001de6 <HAL_TIM_ConfigClockSource+0x52>
 8001de4:	e06b      	b.n	8001ebe <HAL_TIM_ConfigClockSource+0x12a>
 8001de6:	d80e      	bhi.n	8001e06 <HAL_TIM_ConfigClockSource+0x72>
 8001de8:	2b10      	cmp	r3, #16
 8001dea:	d100      	bne.n	8001dee <HAL_TIM_ConfigClockSource+0x5a>
 8001dec:	e077      	b.n	8001ede <HAL_TIM_ConfigClockSource+0x14a>
 8001dee:	d803      	bhi.n	8001df8 <HAL_TIM_ConfigClockSource+0x64>
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d100      	bne.n	8001df6 <HAL_TIM_ConfigClockSource+0x62>
 8001df4:	e073      	b.n	8001ede <HAL_TIM_ConfigClockSource+0x14a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001df6:	e07c      	b.n	8001ef2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8001df8:	2b20      	cmp	r3, #32
 8001dfa:	d100      	bne.n	8001dfe <HAL_TIM_ConfigClockSource+0x6a>
 8001dfc:	e06f      	b.n	8001ede <HAL_TIM_ConfigClockSource+0x14a>
 8001dfe:	2b30      	cmp	r3, #48	; 0x30
 8001e00:	d100      	bne.n	8001e04 <HAL_TIM_ConfigClockSource+0x70>
 8001e02:	e06c      	b.n	8001ede <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8001e04:	e075      	b.n	8001ef2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8001e06:	2b70      	cmp	r3, #112	; 0x70
 8001e08:	d00e      	beq.n	8001e28 <HAL_TIM_ConfigClockSource+0x94>
 8001e0a:	d804      	bhi.n	8001e16 <HAL_TIM_ConfigClockSource+0x82>
 8001e0c:	2b50      	cmp	r3, #80	; 0x50
 8001e0e:	d036      	beq.n	8001e7e <HAL_TIM_ConfigClockSource+0xea>
 8001e10:	2b60      	cmp	r3, #96	; 0x60
 8001e12:	d044      	beq.n	8001e9e <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8001e14:	e06d      	b.n	8001ef2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8001e16:	2280      	movs	r2, #128	; 0x80
 8001e18:	0152      	lsls	r2, r2, #5
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d068      	beq.n	8001ef0 <HAL_TIM_ConfigClockSource+0x15c>
 8001e1e:	2280      	movs	r2, #128	; 0x80
 8001e20:	0192      	lsls	r2, r2, #6
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d017      	beq.n	8001e56 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8001e26:	e064      	b.n	8001ef2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6818      	ldr	r0, [r3, #0]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	6899      	ldr	r1, [r3, #8]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f000 fb60 	bl	80024fc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2277      	movs	r2, #119	; 0x77
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	609a      	str	r2, [r3, #8]
      break;
 8001e54:	e04d      	b.n	8001ef2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6818      	ldr	r0, [r3, #0]
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	6899      	ldr	r1, [r3, #8]
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	f000 fb49 	bl	80024fc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2180      	movs	r1, #128	; 0x80
 8001e76:	01c9      	lsls	r1, r1, #7
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	609a      	str	r2, [r3, #8]
      break;
 8001e7c:	e039      	b.n	8001ef2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	6859      	ldr	r1, [r3, #4]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	001a      	movs	r2, r3
 8001e8c:	f000 fabc 	bl	8002408 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2150      	movs	r1, #80	; 0x50
 8001e96:	0018      	movs	r0, r3
 8001e98:	f000 fb16 	bl	80024c8 <TIM_ITRx_SetConfig>
      break;
 8001e9c:	e029      	b.n	8001ef2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6818      	ldr	r0, [r3, #0]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	6859      	ldr	r1, [r3, #4]
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	001a      	movs	r2, r3
 8001eac:	f000 fada 	bl	8002464 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2160      	movs	r1, #96	; 0x60
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	f000 fb06 	bl	80024c8 <TIM_ITRx_SetConfig>
      break;
 8001ebc:	e019      	b.n	8001ef2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6818      	ldr	r0, [r3, #0]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	6859      	ldr	r1, [r3, #4]
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	001a      	movs	r2, r3
 8001ecc:	f000 fa9c 	bl	8002408 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2140      	movs	r1, #64	; 0x40
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f000 faf6 	bl	80024c8 <TIM_ITRx_SetConfig>
      break;
 8001edc:	e009      	b.n	8001ef2 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	0019      	movs	r1, r3
 8001ee8:	0010      	movs	r0, r2
 8001eea:	f000 faed 	bl	80024c8 <TIM_ITRx_SetConfig>
        break;
 8001eee:	e000      	b.n	8001ef2 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8001ef0:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	223d      	movs	r2, #61	; 0x3d
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	223c      	movs	r2, #60	; 0x3c
 8001efe:	2100      	movs	r1, #0
 8001f00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	0018      	movs	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	b004      	add	sp, #16
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	ffff00ff 	.word	0xffff00ff

08001f10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a34      	ldr	r2, [pc, #208]	; (8001ff4 <TIM_Base_SetConfig+0xe4>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d008      	beq.n	8001f3a <TIM_Base_SetConfig+0x2a>
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	2380      	movs	r3, #128	; 0x80
 8001f2c:	05db      	lsls	r3, r3, #23
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d003      	beq.n	8001f3a <TIM_Base_SetConfig+0x2a>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a30      	ldr	r2, [pc, #192]	; (8001ff8 <TIM_Base_SetConfig+0xe8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d108      	bne.n	8001f4c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2270      	movs	r2, #112	; 0x70
 8001f3e:	4393      	bics	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a29      	ldr	r2, [pc, #164]	; (8001ff4 <TIM_Base_SetConfig+0xe4>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d018      	beq.n	8001f86 <TIM_Base_SetConfig+0x76>
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	2380      	movs	r3, #128	; 0x80
 8001f58:	05db      	lsls	r3, r3, #23
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d013      	beq.n	8001f86 <TIM_Base_SetConfig+0x76>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a25      	ldr	r2, [pc, #148]	; (8001ff8 <TIM_Base_SetConfig+0xe8>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d00f      	beq.n	8001f86 <TIM_Base_SetConfig+0x76>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a24      	ldr	r2, [pc, #144]	; (8001ffc <TIM_Base_SetConfig+0xec>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d00b      	beq.n	8001f86 <TIM_Base_SetConfig+0x76>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a23      	ldr	r2, [pc, #140]	; (8002000 <TIM_Base_SetConfig+0xf0>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d007      	beq.n	8001f86 <TIM_Base_SetConfig+0x76>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a22      	ldr	r2, [pc, #136]	; (8002004 <TIM_Base_SetConfig+0xf4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d003      	beq.n	8001f86 <TIM_Base_SetConfig+0x76>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a21      	ldr	r2, [pc, #132]	; (8002008 <TIM_Base_SetConfig+0xf8>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d108      	bne.n	8001f98 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4a20      	ldr	r2, [pc, #128]	; (800200c <TIM_Base_SetConfig+0xfc>)
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2280      	movs	r2, #128	; 0x80
 8001f9c:	4393      	bics	r3, r2
 8001f9e:	001a      	movs	r2, r3
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a0c      	ldr	r2, [pc, #48]	; (8001ff4 <TIM_Base_SetConfig+0xe4>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d00b      	beq.n	8001fde <TIM_Base_SetConfig+0xce>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a0d      	ldr	r2, [pc, #52]	; (8002000 <TIM_Base_SetConfig+0xf0>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d007      	beq.n	8001fde <TIM_Base_SetConfig+0xce>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a0c      	ldr	r2, [pc, #48]	; (8002004 <TIM_Base_SetConfig+0xf4>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d003      	beq.n	8001fde <TIM_Base_SetConfig+0xce>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a0b      	ldr	r2, [pc, #44]	; (8002008 <TIM_Base_SetConfig+0xf8>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d103      	bne.n	8001fe6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	691a      	ldr	r2, [r3, #16]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	615a      	str	r2, [r3, #20]
}
 8001fec:	46c0      	nop			; (mov r8, r8)
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	b004      	add	sp, #16
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40012c00 	.word	0x40012c00
 8001ff8:	40000400 	.word	0x40000400
 8001ffc:	40002000 	.word	0x40002000
 8002000:	40014000 	.word	0x40014000
 8002004:	40014400 	.word	0x40014400
 8002008:	40014800 	.word	0x40014800
 800200c:	fffffcff 	.word	0xfffffcff

08002010 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	2201      	movs	r2, #1
 8002020:	4393      	bics	r3, r2
 8002022:	001a      	movs	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2270      	movs	r2, #112	; 0x70
 800203e:	4393      	bics	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2203      	movs	r2, #3
 8002046:	4393      	bics	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	4313      	orrs	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	2202      	movs	r2, #2
 8002058:	4393      	bics	r3, r2
 800205a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	4313      	orrs	r3, r2
 8002064:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a27      	ldr	r2, [pc, #156]	; (8002108 <TIM_OC1_SetConfig+0xf8>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00b      	beq.n	8002086 <TIM_OC1_SetConfig+0x76>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a26      	ldr	r2, [pc, #152]	; (800210c <TIM_OC1_SetConfig+0xfc>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d007      	beq.n	8002086 <TIM_OC1_SetConfig+0x76>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a25      	ldr	r2, [pc, #148]	; (8002110 <TIM_OC1_SetConfig+0x100>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d003      	beq.n	8002086 <TIM_OC1_SetConfig+0x76>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a24      	ldr	r2, [pc, #144]	; (8002114 <TIM_OC1_SetConfig+0x104>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d10c      	bne.n	80020a0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	2208      	movs	r2, #8
 800208a:	4393      	bics	r3, r2
 800208c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	4313      	orrs	r3, r2
 8002096:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	2204      	movs	r2, #4
 800209c:	4393      	bics	r3, r2
 800209e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a19      	ldr	r2, [pc, #100]	; (8002108 <TIM_OC1_SetConfig+0xf8>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d00b      	beq.n	80020c0 <TIM_OC1_SetConfig+0xb0>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a18      	ldr	r2, [pc, #96]	; (800210c <TIM_OC1_SetConfig+0xfc>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d007      	beq.n	80020c0 <TIM_OC1_SetConfig+0xb0>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a17      	ldr	r2, [pc, #92]	; (8002110 <TIM_OC1_SetConfig+0x100>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d003      	beq.n	80020c0 <TIM_OC1_SetConfig+0xb0>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a16      	ldr	r2, [pc, #88]	; (8002114 <TIM_OC1_SetConfig+0x104>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d111      	bne.n	80020e4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4a15      	ldr	r2, [pc, #84]	; (8002118 <TIM_OC1_SetConfig+0x108>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4a14      	ldr	r2, [pc, #80]	; (800211c <TIM_OC1_SetConfig+0x10c>)
 80020cc:	4013      	ands	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	621a      	str	r2, [r3, #32]
}
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	46bd      	mov	sp, r7
 8002102:	b006      	add	sp, #24
 8002104:	bd80      	pop	{r7, pc}
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	40012c00 	.word	0x40012c00
 800210c:	40014000 	.word	0x40014000
 8002110:	40014400 	.word	0x40014400
 8002114:	40014800 	.word	0x40014800
 8002118:	fffffeff 	.word	0xfffffeff
 800211c:	fffffdff 	.word	0xfffffdff

08002120 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	2210      	movs	r2, #16
 8002130:	4393      	bics	r3, r2
 8002132:	001a      	movs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	4a2e      	ldr	r2, [pc, #184]	; (8002208 <TIM_OC2_SetConfig+0xe8>)
 800214e:	4013      	ands	r3, r2
 8002150:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	4a2d      	ldr	r2, [pc, #180]	; (800220c <TIM_OC2_SetConfig+0xec>)
 8002156:	4013      	ands	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	021b      	lsls	r3, r3, #8
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	4313      	orrs	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2220      	movs	r2, #32
 800216a:	4393      	bics	r3, r2
 800216c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	011b      	lsls	r3, r3, #4
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	4313      	orrs	r3, r2
 8002178:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a24      	ldr	r2, [pc, #144]	; (8002210 <TIM_OC2_SetConfig+0xf0>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d10d      	bne.n	800219e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	2280      	movs	r2, #128	; 0x80
 8002186:	4393      	bics	r3, r2
 8002188:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	011b      	lsls	r3, r3, #4
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	4313      	orrs	r3, r2
 8002194:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	2240      	movs	r2, #64	; 0x40
 800219a:	4393      	bics	r3, r2
 800219c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a1b      	ldr	r2, [pc, #108]	; (8002210 <TIM_OC2_SetConfig+0xf0>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d00b      	beq.n	80021be <TIM_OC2_SetConfig+0x9e>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a1a      	ldr	r2, [pc, #104]	; (8002214 <TIM_OC2_SetConfig+0xf4>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d007      	beq.n	80021be <TIM_OC2_SetConfig+0x9e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a19      	ldr	r2, [pc, #100]	; (8002218 <TIM_OC2_SetConfig+0xf8>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d003      	beq.n	80021be <TIM_OC2_SetConfig+0x9e>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a18      	ldr	r2, [pc, #96]	; (800221c <TIM_OC2_SetConfig+0xfc>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d113      	bne.n	80021e6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4a17      	ldr	r2, [pc, #92]	; (8002220 <TIM_OC2_SetConfig+0x100>)
 80021c2:	4013      	ands	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	4a16      	ldr	r2, [pc, #88]	; (8002224 <TIM_OC2_SetConfig+0x104>)
 80021ca:	4013      	ands	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	621a      	str	r2, [r3, #32]
}
 8002200:	46c0      	nop			; (mov r8, r8)
 8002202:	46bd      	mov	sp, r7
 8002204:	b006      	add	sp, #24
 8002206:	bd80      	pop	{r7, pc}
 8002208:	ffff8fff 	.word	0xffff8fff
 800220c:	fffffcff 	.word	0xfffffcff
 8002210:	40012c00 	.word	0x40012c00
 8002214:	40014000 	.word	0x40014000
 8002218:	40014400 	.word	0x40014400
 800221c:	40014800 	.word	0x40014800
 8002220:	fffffbff 	.word	0xfffffbff
 8002224:	fffff7ff 	.word	0xfffff7ff

08002228 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	4a35      	ldr	r2, [pc, #212]	; (800230c <TIM_OC3_SetConfig+0xe4>)
 8002238:	401a      	ands	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2270      	movs	r2, #112	; 0x70
 8002254:	4393      	bics	r3, r2
 8002256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2203      	movs	r2, #3
 800225c:	4393      	bics	r3, r2
 800225e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	4313      	orrs	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	4a28      	ldr	r2, [pc, #160]	; (8002310 <TIM_OC3_SetConfig+0xe8>)
 800226e:	4013      	ands	r3, r2
 8002270:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	021b      	lsls	r3, r3, #8
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	4313      	orrs	r3, r2
 800227c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a24      	ldr	r2, [pc, #144]	; (8002314 <TIM_OC3_SetConfig+0xec>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d10d      	bne.n	80022a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	4a23      	ldr	r2, [pc, #140]	; (8002318 <TIM_OC3_SetConfig+0xf0>)
 800228a:	4013      	ands	r3, r2
 800228c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	021b      	lsls	r3, r3, #8
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	4313      	orrs	r3, r2
 8002298:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	4a1f      	ldr	r2, [pc, #124]	; (800231c <TIM_OC3_SetConfig+0xf4>)
 800229e:	4013      	ands	r3, r2
 80022a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a1b      	ldr	r2, [pc, #108]	; (8002314 <TIM_OC3_SetConfig+0xec>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d00b      	beq.n	80022c2 <TIM_OC3_SetConfig+0x9a>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a1c      	ldr	r2, [pc, #112]	; (8002320 <TIM_OC3_SetConfig+0xf8>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d007      	beq.n	80022c2 <TIM_OC3_SetConfig+0x9a>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a1b      	ldr	r2, [pc, #108]	; (8002324 <TIM_OC3_SetConfig+0xfc>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d003      	beq.n	80022c2 <TIM_OC3_SetConfig+0x9a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a1a      	ldr	r2, [pc, #104]	; (8002328 <TIM_OC3_SetConfig+0x100>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d113      	bne.n	80022ea <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4a19      	ldr	r2, [pc, #100]	; (800232c <TIM_OC3_SetConfig+0x104>)
 80022c6:	4013      	ands	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4a18      	ldr	r2, [pc, #96]	; (8002330 <TIM_OC3_SetConfig+0x108>)
 80022ce:	4013      	ands	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	011b      	lsls	r3, r3, #4
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	011b      	lsls	r3, r3, #4
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	621a      	str	r2, [r3, #32]
}
 8002304:	46c0      	nop			; (mov r8, r8)
 8002306:	46bd      	mov	sp, r7
 8002308:	b006      	add	sp, #24
 800230a:	bd80      	pop	{r7, pc}
 800230c:	fffffeff 	.word	0xfffffeff
 8002310:	fffffdff 	.word	0xfffffdff
 8002314:	40012c00 	.word	0x40012c00
 8002318:	fffff7ff 	.word	0xfffff7ff
 800231c:	fffffbff 	.word	0xfffffbff
 8002320:	40014000 	.word	0x40014000
 8002324:	40014400 	.word	0x40014400
 8002328:	40014800 	.word	0x40014800
 800232c:	ffffefff 	.word	0xffffefff
 8002330:	ffffdfff 	.word	0xffffdfff

08002334 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	4a28      	ldr	r2, [pc, #160]	; (80023e4 <TIM_OC4_SetConfig+0xb0>)
 8002344:	401a      	ands	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4a22      	ldr	r2, [pc, #136]	; (80023e8 <TIM_OC4_SetConfig+0xb4>)
 8002360:	4013      	ands	r3, r2
 8002362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4a21      	ldr	r2, [pc, #132]	; (80023ec <TIM_OC4_SetConfig+0xb8>)
 8002368:	4013      	ands	r3, r2
 800236a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	021b      	lsls	r3, r3, #8
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	4313      	orrs	r3, r2
 8002376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4a1d      	ldr	r2, [pc, #116]	; (80023f0 <TIM_OC4_SetConfig+0xbc>)
 800237c:	4013      	ands	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	031b      	lsls	r3, r3, #12
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4313      	orrs	r3, r2
 800238a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a19      	ldr	r2, [pc, #100]	; (80023f4 <TIM_OC4_SetConfig+0xc0>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d00b      	beq.n	80023ac <TIM_OC4_SetConfig+0x78>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a18      	ldr	r2, [pc, #96]	; (80023f8 <TIM_OC4_SetConfig+0xc4>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d007      	beq.n	80023ac <TIM_OC4_SetConfig+0x78>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a17      	ldr	r2, [pc, #92]	; (80023fc <TIM_OC4_SetConfig+0xc8>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d003      	beq.n	80023ac <TIM_OC4_SetConfig+0x78>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a16      	ldr	r2, [pc, #88]	; (8002400 <TIM_OC4_SetConfig+0xcc>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d109      	bne.n	80023c0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	4a15      	ldr	r2, [pc, #84]	; (8002404 <TIM_OC4_SetConfig+0xd0>)
 80023b0:	4013      	ands	r3, r2
 80023b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	019b      	lsls	r3, r3, #6
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	4313      	orrs	r3, r2
 80023be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	621a      	str	r2, [r3, #32]
}
 80023da:	46c0      	nop			; (mov r8, r8)
 80023dc:	46bd      	mov	sp, r7
 80023de:	b006      	add	sp, #24
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	ffffefff 	.word	0xffffefff
 80023e8:	ffff8fff 	.word	0xffff8fff
 80023ec:	fffffcff 	.word	0xfffffcff
 80023f0:	ffffdfff 	.word	0xffffdfff
 80023f4:	40012c00 	.word	0x40012c00
 80023f8:	40014000 	.word	0x40014000
 80023fc:	40014400 	.word	0x40014400
 8002400:	40014800 	.word	0x40014800
 8002404:	ffffbfff 	.word	0xffffbfff

08002408 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	2201      	movs	r2, #1
 8002420:	4393      	bics	r3, r2
 8002422:	001a      	movs	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	22f0      	movs	r2, #240	; 0xf0
 8002432:	4393      	bics	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	220a      	movs	r2, #10
 8002444:	4393      	bics	r3, r2
 8002446:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	4313      	orrs	r3, r2
 800244e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	621a      	str	r2, [r3, #32]
}
 800245c:	46c0      	nop			; (mov r8, r8)
 800245e:	46bd      	mov	sp, r7
 8002460:	b006      	add	sp, #24
 8002462:	bd80      	pop	{r7, pc}

08002464 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	2210      	movs	r2, #16
 8002476:	4393      	bics	r3, r2
 8002478:	001a      	movs	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	4a0d      	ldr	r2, [pc, #52]	; (80024c4 <TIM_TI2_ConfigInputStage+0x60>)
 800248e:	4013      	ands	r3, r2
 8002490:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	031b      	lsls	r3, r3, #12
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	4313      	orrs	r3, r2
 800249a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	22a0      	movs	r2, #160	; 0xa0
 80024a0:	4393      	bics	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	011b      	lsls	r3, r3, #4
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	621a      	str	r2, [r3, #32]
}
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	46bd      	mov	sp, r7
 80024be:	b006      	add	sp, #24
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	ffff0fff 	.word	0xffff0fff

080024c8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2270      	movs	r2, #112	; 0x70
 80024dc:	4393      	bics	r3, r2
 80024de:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	2207      	movs	r2, #7
 80024e8:	4313      	orrs	r3, r2
 80024ea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	609a      	str	r2, [r3, #8]
}
 80024f2:	46c0      	nop			; (mov r8, r8)
 80024f4:	46bd      	mov	sp, r7
 80024f6:	b004      	add	sp, #16
 80024f8:	bd80      	pop	{r7, pc}
	...

080024fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
 8002508:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	4a09      	ldr	r2, [pc, #36]	; (8002538 <TIM_ETR_SetConfig+0x3c>)
 8002514:	4013      	ands	r3, r2
 8002516:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	021a      	lsls	r2, r3, #8
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	431a      	orrs	r2, r3
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	4313      	orrs	r3, r2
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	4313      	orrs	r3, r2
 8002528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	609a      	str	r2, [r3, #8]
}
 8002530:	46c0      	nop			; (mov r8, r8)
 8002532:	46bd      	mov	sp, r7
 8002534:	b006      	add	sp, #24
 8002536:	bd80      	pop	{r7, pc}
 8002538:	ffff00ff 	.word	0xffff00ff

0800253c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	221f      	movs	r2, #31
 800254c:	4013      	ands	r3, r2
 800254e:	2201      	movs	r2, #1
 8002550:	409a      	lsls	r2, r3
 8002552:	0013      	movs	r3, r2
 8002554:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	43d2      	mvns	r2, r2
 800255e:	401a      	ands	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a1a      	ldr	r2, [r3, #32]
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	211f      	movs	r1, #31
 800256c:	400b      	ands	r3, r1
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	4099      	lsls	r1, r3
 8002572:	000b      	movs	r3, r1
 8002574:	431a      	orrs	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	621a      	str	r2, [r3, #32]
}
 800257a:	46c0      	nop			; (mov r8, r8)
 800257c:	46bd      	mov	sp, r7
 800257e:	b006      	add	sp, #24
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	223c      	movs	r2, #60	; 0x3c
 8002592:	5c9b      	ldrb	r3, [r3, r2]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d101      	bne.n	800259c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002598:	2302      	movs	r3, #2
 800259a:	e047      	b.n	800262c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	223c      	movs	r2, #60	; 0x3c
 80025a0:	2101      	movs	r1, #1
 80025a2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	223d      	movs	r2, #61	; 0x3d
 80025a8:	2102      	movs	r1, #2
 80025aa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2270      	movs	r2, #112	; 0x70
 80025c0:	4393      	bics	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a16      	ldr	r2, [pc, #88]	; (8002634 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d00f      	beq.n	8002600 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	2380      	movs	r3, #128	; 0x80
 80025e6:	05db      	lsls	r3, r3, #23
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d009      	beq.n	8002600 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a11      	ldr	r2, [pc, #68]	; (8002638 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d004      	beq.n	8002600 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a10      	ldr	r2, [pc, #64]	; (800263c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d10c      	bne.n	800261a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	2280      	movs	r2, #128	; 0x80
 8002604:	4393      	bics	r3, r2
 8002606:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	4313      	orrs	r3, r2
 8002610:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	223d      	movs	r2, #61	; 0x3d
 800261e:	2101      	movs	r1, #1
 8002620:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	223c      	movs	r2, #60	; 0x3c
 8002626:	2100      	movs	r1, #0
 8002628:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	0018      	movs	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	b004      	add	sp, #16
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40012c00 	.word	0x40012c00
 8002638:	40000400 	.word	0x40000400
 800263c:	40014000 	.word	0x40014000

08002640 <__libc_init_array>:
 8002640:	b570      	push	{r4, r5, r6, lr}
 8002642:	2600      	movs	r6, #0
 8002644:	4d0c      	ldr	r5, [pc, #48]	; (8002678 <__libc_init_array+0x38>)
 8002646:	4c0d      	ldr	r4, [pc, #52]	; (800267c <__libc_init_array+0x3c>)
 8002648:	1b64      	subs	r4, r4, r5
 800264a:	10a4      	asrs	r4, r4, #2
 800264c:	42a6      	cmp	r6, r4
 800264e:	d109      	bne.n	8002664 <__libc_init_array+0x24>
 8002650:	2600      	movs	r6, #0
 8002652:	f000 f821 	bl	8002698 <_init>
 8002656:	4d0a      	ldr	r5, [pc, #40]	; (8002680 <__libc_init_array+0x40>)
 8002658:	4c0a      	ldr	r4, [pc, #40]	; (8002684 <__libc_init_array+0x44>)
 800265a:	1b64      	subs	r4, r4, r5
 800265c:	10a4      	asrs	r4, r4, #2
 800265e:	42a6      	cmp	r6, r4
 8002660:	d105      	bne.n	800266e <__libc_init_array+0x2e>
 8002662:	bd70      	pop	{r4, r5, r6, pc}
 8002664:	00b3      	lsls	r3, r6, #2
 8002666:	58eb      	ldr	r3, [r5, r3]
 8002668:	4798      	blx	r3
 800266a:	3601      	adds	r6, #1
 800266c:	e7ee      	b.n	800264c <__libc_init_array+0xc>
 800266e:	00b3      	lsls	r3, r6, #2
 8002670:	58eb      	ldr	r3, [r5, r3]
 8002672:	4798      	blx	r3
 8002674:	3601      	adds	r6, #1
 8002676:	e7f2      	b.n	800265e <__libc_init_array+0x1e>
 8002678:	080026e0 	.word	0x080026e0
 800267c:	080026e0 	.word	0x080026e0
 8002680:	080026e0 	.word	0x080026e0
 8002684:	080026e4 	.word	0x080026e4

08002688 <memset>:
 8002688:	0003      	movs	r3, r0
 800268a:	1812      	adds	r2, r2, r0
 800268c:	4293      	cmp	r3, r2
 800268e:	d100      	bne.n	8002692 <memset+0xa>
 8002690:	4770      	bx	lr
 8002692:	7019      	strb	r1, [r3, #0]
 8002694:	3301      	adds	r3, #1
 8002696:	e7f9      	b.n	800268c <memset+0x4>

08002698 <_init>:
 8002698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800269e:	bc08      	pop	{r3}
 80026a0:	469e      	mov	lr, r3
 80026a2:	4770      	bx	lr

080026a4 <_fini>:
 80026a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026aa:	bc08      	pop	{r3}
 80026ac:	469e      	mov	lr, r3
 80026ae:	4770      	bx	lr
